avgsem.forPlot <- avgsem.forPlot[order(avgsem.forPlot$Panel), ]
avgsem.forPlot <- avgsem.forPlot[-c(15:20, 26:30, 38:40, 49,50), ]
avgsem.forPlot[c(14,18,19, 34), 2] <- c(11, 11, 13, 32)
## Generate dataframe for transcripts added plot
avgsem.forPlot2 <- data.frame(Panel=panels2, SSampled=strainsampled2, Mean=avgs2, SD=sdevs2, SEM=sems2)
avgsem.forPlot2 <- avgsem.forPlot2[order(avgsem.forPlot2$Panel), ]
## calculate the number of transcripts added after each sampling
added.trans <- c(0, avgsem.forPlot2[-1,3] - avgsem.forPlot2[-nrow(avgsem.forPlot2),3])
#added.trans[added.trans <= 0] <- 0
avgsem.forPlot2$added_transcripts <- added.trans
avgsem.forPlot2$rownum <- c(1:length(avgsem.forPlot2$Panel))
## make new df for transcripts added
addedtransForPlot <- avgsem.forPlot2[-c(12:18, 22:27, 34:36, 44:45), -c(3,4,5)]
addedtransForPlot$added_transcripts[addedtransForPlot$added_transcripts <= 0] <- 0
ggplot(avgsem.forPlot, aes(x=SSampled, y=Mean, colour=Panel)) +
geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=.1) +
geom_line() +
geom_point() +
ggtitle("Sampling the full dataset with present threshold of > 100")
ggplot(addedtransForPlot, aes(x=SSampled, y=added_transcripts, colour=Panel)) +
geom_line() +
geom_point() +
ggtitle("Number of transcripts added at each sampling \n Threshold > 100")
pdf(file = "/Users/smiharry/Desktop/Saba_Lab/Liver/Graphics/strainNumberEffectFull.threshold100.pdf")
ggplot(avgsem.forPlot, aes(x=SSampled, y=Mean, colour=Panel)) +
geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=.1) +
geom_line() +
geom_point() +
ggtitle("Sampling the full dataset with present threshold of > 100")
dev.off()
pdf(file = "/Users/smiharry/Desktop/Saba_Lab/Liver/Graphics/transcriptsAdded.threshold100.pdf")
ggplot(addedtransForPlot, aes(x=SSampled, y=added_transcripts, colour=Panel)) +
geom_line() +
geom_point() +
ggtitle("Number of transcripts added at each sampling \n Threshold > 100")
dev.off()
avgsem.100 <- avgs
avgsem2.100 <- avgs2
save(avgsem.100, avgsem2.100, file = paste(dirlocal, tissue, "/quantitation/",  "avgSem.100", ".Rdata", sep = ""))
install.packages("gdtools", type = "source")
install.packages("gdtools", type = "source")
library(flextable)
library(officer)
?read_docx
load(file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/SigSummary.RData")
options(stringsAsFactors = FALSE)
##Load results objects
load(file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/SigSummary.RData")
sigSumFlex <- regulartable(head(sigSummary))
docSum <- read_docx()
docSum <- body_add_flextable(docSum, value = sigSumFlex)
print(docSum, target = "~/Desktop/sigSumFlex.docx")
?regulartable
sigSumFlex <- regulartable(head(sigSummary), cwidth = 0.25, cheight = 0.25)
docSum <- read_docx()
docSum <- body_add_flextable(docSum, value = sigSumFlex)
print(docSum, target = "~/Desktop/sigSumFlex.docx")
sigSumFlex <- regulartable(head(sigSummary), cwidth = 0.50, cheight = 0.25)
docSum <- read_docx()
docSum <- body_add_flextable(docSum, value = sigSumFlex)
print(docSum, target = "~/Desktop/sigSumFlex.docx")
sigSumFlex <- regulartable(head(sigSummary), cwidth = 0.80, cheight = 0.25)
docSum <- read_docx()
docSum <- body_add_flextable(docSum, value = sigSumFlex)
print(docSum, target = "~/Desktop/sigSumFlex.docx")
sigSumFlex <- regulartable(head(sigSummary), cwidth = 0.75, cheight = 0.25)
sigSumFlex <- autofit(sigSumFlex)
docSum <- read_docx()
docSum <- body_add_flextable(docSum, value = sigSumFlex)
print(docSum, target = "~/Desktop/sigSumFlex.docx")
sigSumFlex <- regulartable(head(sigSummary), cwidth = 0.75, cheight = 0.25)
sigSumFlex <- autofit(sigSumFlex)
docSum <- read_docx()
docSum <- body_add_flextable(docSum, value = sigSumFlex)
print(docSum, target = "~/Desktop/sigSumFlex.docx")
sigSumFlex <- regulartable(head(sigSummary), cwidth = 0.75, cheight = 0.25)
sigSumFlex <- autofit(sigSumFlex)
docSum <- read_docx()
docSum <- body_add_flextable(docSum, value = sigSumFlex)
print(docSum, target = "~/Desktop/sigSumFlex.docx")
sigSumFlex <- flextable(head(sigSummary), cwidth = 0.75, cheight = 0.25)
sigSumFlex <- autofit(sigSumFlex)
docSum <- read_docx()
docSum <- body_add_flextable(docSum, value = sigSumFlex)
print(docSum, target = "~/Desktop/sigSumFlex.docx")
sigSumFlex <- flextable(head(sigSummary))
sigSumFlex <- flextable(head(sigSummary), col_keys = names(sigSummary))
sigSumFlex <- flextable(head(sigSummary), col_keys = names(head(sigSummary)))
head(sigSummary)
harry <- sigSummary
colnames(harry) <- paste("name", 1:length(names(harry)), sep = "")
names(harry)
sigSumFlex <- flextable(head(harry), col_keys = names(head(harry)))
colnames(harry) <- paste("name", 1:length(names(harry)), sep = "-")
sigSumFlex <- flextable(head(harry), col_keys = names(head(harry)))
colnames(harry) <- paste("name", 1:length(names(harry)), sep = "_")
names(harry)
sigSumFlex <- flextable(head(harry), col_keys = names(head(harry)))
colnames(harry) <- paste("name", 1:length(names(harry)), sep = " ")
sigSumFlex <- flextable(head(harry), col_keys = names(head(harry)))
rm(list=ls())
options(stringsAsFactors = FALSE)
#load results
load(file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/dge.RData")
#gene level results
geneLevel = dge.genes
geneLevel$geneLevel_pctDiff = paste(sprintf("%.1f",round(100*(2^geneLevel$log2FoldChange),1)),"%",sep="") #format percent differential expression
geneLevel$geneLevel_pvalue = format(geneLevel$pvalue,digits=2,scientific=TRUE) #format p-value
geneLevel$geneLevel_FDR = sprintf("%.4f",round(geneLevel$padj,4)) #format false discovery rate (10%)
geneLevel$geneLevel_FDR[geneLevel$geneLevel_FDR=="0.0000"] = "<0.0001" #format low p-values into somethig that makes sense
geneLevel = geneLevel[,c("Gene.stable.ID","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
#isolate significant isoforms - FDR<0.05
sigGenes <- dge_v2[dge_v2$padj<0.05,]
#create print ready variables
sigGenes$Description <- unlist(lapply(strsplit(sigGenes$Gene.description,split="[",fixed=TRUE),function(a) a[1])) #format gene description
sigGenes$GeneLoc.Mb <- sprintf("%.1f",round(sigGenes$Gene.start..bp./1000000,1)) #format location by converting to mega bases
sigGenes$GeneLoc <- paste("Chr",sigGenes$Chromosome.scaffold.name,": ",sigGenes$GeneLoc.Mb," Mb",sep="") #add chr label to location
sigGenes$strand <- c("+","-")[as.numeric(sigGenes$Strand<0) + 1] #format strand direction
#orange - green
sigGenes$pctOfControl = paste(sprintf("%.1f",round(100*(2^sigGenes$log2FoldChange),1)),"%",sep="")
sigGenes$pvalue = format(sigGenes$pvalue,digits=2,scientific=TRUE)
sigGenes$FDR = sprintf("%.4f",round(sigGenes$padj,4))
sigGenes$FDR[sigGenes$FDR=="0.0000"] = "<0.0001"
sigGenes$treated_isoPct = paste(sprintf("%.1f",round(sigGenes$treated_isoPct,1)),"%")
sigGenes$Untreated_isoPct = paste(sprintf("%.1f",round(sigGenes$Untreated_isoPct,1)),"%")
sigGenes = merge(sigGenes,geneLevel,by="Gene.stable.ID",all.x=T)
sigGenes = sigGenes[,c("Gene.name","Gene.description","Gene.stable.ID","Transcript.stable.ID","Transcript.count","GeneLoc","Strand","Gene.type","pctOfControl","pvalue","FDR","treated_isoPct","Untreated_isoPct","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
sigGenes = sigGenes[order(sigGenes$pvalue),]
colnames(sigGenes) = c("Gene Symbol","Gene Description","Ensembl Gene ID","Ensembl Transcript ID","Number of Isoforms","Gene Location","Strand","Transcript Type","Expression in Cases as Percent of Controls","Unadjusted P-value","FDR","Median Percent of Reads from Gene Allotted to this Isoform - Cases","Median Percent of Reads from Gene Allotted to this Isoform - Controls","Percent Difference in Gene Level Analysis","Unadjusted pvalue in Gene Level Analysis","FDR in Gene Level Analysis")
sigSummary <- sigGenes
save(sigSummary, geneLevel, file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/SigSummary.RData")
write.csv(sigSummary,file="/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/tables/sigSummary.csv",row.names=FALSE,quote=FALSE)
rm(list=ls())
options(stringsAsFactors = FALSE)
#load results
load(file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/dge.RData")
#isolate significant results - FDR<0.05
sigGenes <- dge.genes[dge.genes$padj<0.05,] #Pull out genes with adjusted p-values less than 0.05
#create print ready variables
sigGenes$Description <- unlist(lapply(strsplit(sigGenes$Gene.description,split="[",fixed=TRUE),function(a) a[1])) #remove the source annotation
sigGenes$GeneLoc.Mb <- sprintf("%.1f",round(sigGenes$Gene.start..bp./1000000,1)) #Convert Gene start into Mb units and round to 1 decimal place
sigGenes$GeneLoc <- paste("Chr",sigGenes$Chromosome.scaffold.name,": ",sigGenes$GeneLoc.Mb," Mb",sep="") #Make location variable look like chr1:##Mb
sigGenes$strand <- c("+","-")[as.numeric(sigGenes$Strand<0) + 1] #Assign positive or negative symbol to the appropriate strand
#orange - green
sigGenes$pctOfControl = paste(sprintf("%.1f",round(100*(2^sigGenes$log2FoldChange),1)),"%",sep="") ##Back transform fold change from log base 2, and format into a percent
sigGenes$pvalue = format(sigGenes$pvalue,digits=2,scientific=TRUE) #Format p-value
sigGenes$FDR = sprintf("%.4f",round(sigGenes$padj,4)) #format false discovery rate
sigGenes$FDR[sigGenes$FDR=="0.0000"] = "<0.0001" #Format low false discovery rate to something more readable
sigGenes = sigGenes[,c("Gene.name","Description","Gene.stable.ID","Transcript.count","GeneLoc","strand","Gene.type","pctOfControl","pvalue","FDR")]
colnames(sigGenes) = c("Gene Symbol","Gene Description","Ensembl Gene ID","Number of Isoforms","Gene Location","Strand","Gene Type","Expression in Cases as Percent of Controls","Unadjusted P-value","FDR")
save(sigGenes, file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/SigGenes.RData")
write.csv(sigGenes, file="/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/tables/sigGenes.csv",row.names=FALSE,quote=FALSE)
sigGenes <- sigGenes[order(sigGenes$`Unadjusted P-value`), ]
save(sigGenes, file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/SigGenes.RData")
write.csv(sigGenes, file="/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/tables/sigGenes.csv",row.names=FALSE,quote=FALSE)
rm(list=ls())
options(stringsAsFactors = FALSE)
#load results
load(file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/dge.RData")
#gene level results
geneLevel = dge.genes
geneLevel$geneLevel_pctDiff = paste(sprintf("%.1f",round(100*(2^geneLevel$log2FoldChange),1)),"%",sep="") #format percent differential expression
geneLevel$geneLevel_pvalue = format(geneLevel$pvalue,digits=2,scientific=TRUE) #format p-value
geneLevel$geneLevel_FDR = sprintf("%.4f",round(geneLevel$padj,4)) #format false discovery rate (10%)
geneLevel$geneLevel_FDR[geneLevel$geneLevel_FDR=="0.0000"] = "<0.0001" #format low p-values into somethig that makes sense
geneLevel = geneLevel[,c("Gene.stable.ID","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
#isolate significant isoforms - FDR<0.05
sigGenes <- dge_v2[dge_v2$padj<0.05,]
#create print ready variables
sigGenes$Description <- unlist(lapply(strsplit(sigGenes$Gene.description,split="[",fixed=TRUE),function(a) a[1])) #format gene description
sigGenes$GeneLoc.Mb <- sprintf("%.1f",round(sigGenes$Gene.start..bp./1000000,1)) #format location by converting to mega bases
sigGenes$GeneLoc <- paste("Chr",sigGenes$Chromosome.scaffold.name,": ",sigGenes$GeneLoc.Mb," Mb",sep="") #add chr label to location
sigGenes$strand <- c("+","-")[as.numeric(sigGenes$Strand<0) + 1] #format strand direction
#orange - green
sigGenes$pctOfControl = paste(sprintf("%.1f",round(100*(2^sigGenes$log2FoldChange),1)),"%",sep="")
sigGenes$pvalue = format(sigGenes$pvalue,digits=2,scientific=TRUE)
sigGenes$FDR = sprintf("%.4f",round(sigGenes$padj,4))
sigGenes$FDR[sigGenes$FDR=="0.0000"] = "<0.0001"
sigGenes$treated_isoPct = paste(sprintf("%.1f",round(sigGenes$treated_isoPct,1)),"%")
sigGenes$Untreated_isoPct = paste(sprintf("%.1f",round(sigGenes$Untreated_isoPct,1)),"%")
sigGenes = merge(sigGenes,geneLevel,by="Gene.stable.ID",all.x=T)
sigGenes = sigGenes[,c("Gene.name","Gene.description","Gene.stable.ID","Transcript.stable.ID","Transcript.count","GeneLoc","Strand","Gene.type","pctOfControl","pvalue","FDR","treated_isoPct","Untreated_isoPct","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
sigGenes = sigGenes[order(sigGenes$pvalue),]
colnames(sigGenes) = c("Gene Symbol","Gene Description","Ensembl Gene ID","Ensembl Transcript ID","Number of Isoforms","Gene Location","Strand","Transcript Type","Expression in Cases as Percent of Controls","Unadjusted P-value","FDR","Median Percent of Reads from Gene Allotted to this Isoform - Cases","Median Percent of Reads from Gene Allotted to this Isoform - Controls","Percent Difference in Gene Level Analysis","Unadjusted pvalue in Gene Level Analysis","FDR in Gene Level Analysis")
sigSummary <- sigGenes
View(sigSummary)
rm(list=ls())
options(stringsAsFactors = FALSE)
#load results
load(file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/dge.RData")
#gene level results
geneLevel = dge.genes
geneLevel$geneLevel_pctDiff = paste(sprintf("%.1f",round(100*(2^geneLevel$log2FoldChange),1)),"%",sep="") #format percent differential expression
geneLevel$geneLevel_pvalue = format(geneLevel$pvalue,digits=2,scientific=TRUE) #format p-value
geneLevel$geneLevel_FDR = sprintf("%.4f",round(geneLevel$padj,4)) #format false discovery rate (10%)
geneLevel$geneLevel_FDR[geneLevel$geneLevel_FDR=="0.0000"] = "<0.0001" #format low p-values into somethig that makes sense
geneLevel = geneLevel[,c("Gene.stable.ID","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
#isolate significant isoforms - FDR<0.05
sigGenes <- dge_v2[dge_v2$padj<0.05,]
#create print ready variables
sigGenes$Description <- unlist(lapply(strsplit(sigGenes$Gene.description,split="[",fixed=TRUE),function(a) a[1])) #format gene description
sigGenes$GeneLoc.Mb <- sprintf("%.1f",round(sigGenes$Gene.start..bp./1000000,1)) #format location by converting to mega bases
sigGenes$GeneLoc <- paste("Chr",sigGenes$Chromosome.scaffold.name,": ",sigGenes$GeneLoc.Mb," Mb",sep="") #add chr label to location
sigGenes$strand <- c("+","-")[as.numeric(sigGenes$Strand<0) + 1] #format strand direction
#orange - green
sigGenes$pctOfControl = paste(sprintf("%.1f",round(100*(2^sigGenes$log2FoldChange),1)),"%",sep="")
sigGenes$pvalue = format(sigGenes$pvalue,digits=2,scientific=TRUE)
sigGenes$FDR = sprintf("%.4f",round(sigGenes$padj,4))
sigGenes$FDR[sigGenes$FDR=="0.0000"] = "<0.0001"
sigGenes$treated_isoPct = paste(sprintf("%.1f",round(sigGenes$treated_isoPct,1)),"%")
sigGenes$Untreated_isoPct = paste(sprintf("%.1f",round(sigGenes$Untreated_isoPct,1)),"%")
sigGenes = merge(sigGenes,geneLevel,by="Gene.stable.ID",all.x=T)
sigGenes = sigGenes[,c("Gene.name","Gene.description","Gene.stable.ID","Transcript.stable.ID","Transcript.count","GeneLoc","Strand","Gene.type","pctOfControl","pvalue","FDR","treated_isoPct","Untreated_isoPct","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
sigGenes = sigGenes[order(sigGenes$pvalue),]
View(sigGenes)
rm(list=ls())
options(stringsAsFactors = FALSE)
#load results
load(file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/dge.RData")
#gene level results
geneLevel = dge.genes
geneLevel$geneLevel_pctDiff = paste(sprintf("%.1f",round(100*(2^geneLevel$log2FoldChange),1)),"%",sep="") #format percent differential expression
geneLevel$geneLevel_pvalue = format(geneLevel$pvalue,digits=2,scientific=TRUE) #format p-value
geneLevel$geneLevel_FDR = sprintf("%.4f",round(geneLevel$padj,4)) #format false discovery rate (10%)
geneLevel$geneLevel_FDR[geneLevel$geneLevel_FDR=="0.0000"] = "<0.0001" #format low p-values into somethig that makes sense
geneLevel = geneLevel[,c("Gene.stable.ID","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
#isolate significant isoforms - FDR<0.05
sigGenes <- dge_v2[dge_v2$padj<0.05,]
#create print ready variables
sigGenes$Description <- unlist(lapply(strsplit(sigGenes$Gene.description,split="[",fixed=TRUE),function(a) a[1])) #format gene description
sigGenes$GeneLoc.Mb <- sprintf("%.1f",round(sigGenes$Gene.start..bp./1000000,1)) #format location by converting to mega bases
sigGenes$GeneLoc <- paste("Chr",sigGenes$Chromosome.scaffold.name,": ",sigGenes$GeneLoc.Mb," Mb",sep="") #add chr label to location
sigGenes$strand <- c("+","-")[as.numeric(sigGenes$Strand<0) + 1] #format strand direction
#orange - green
sigGenes$pctOfControl = paste(sprintf("%.1f",round(100*(2^sigGenes$log2FoldChange),1)),"%",sep="")
sigGenes$pvalue = format(sigGenes$pvalue,digits=2,scientific=TRUE)
sigGenes$FDR = sprintf("%.4f",round(sigGenes$padj,4))
sigGenes$FDR[sigGenes$FDR=="0.0000"] = "<0.0001"
sigGenes$treated_isoPct = paste(sprintf("%.1f",round(sigGenes$treated_isoPct,1)),"%")
sigGenes$Untreated_isoPct = paste(sprintf("%.1f",round(sigGenes$Untreated_isoPct,1)),"%")
sigGenes = merge(sigGenes,geneLevel,by="Gene.stable.ID",all.x=T)
sigGenes = sigGenes[,c("Gene.name","Gene.description","Gene.stable.ID","Transcript.stable.ID","Transcript.count","GeneLoc","Strand","Gene.type","pctOfControl","pvalue","FDR","treated_isoPct","Untreated_isoPct","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
sigGenes = sigGenes[order(sigGenes$pvalue),]
colnames(sigGenes) = c("Gene Symbol","Gene Description","Ensembl Gene ID","Ensembl Transcript ID","Number of Isoforms","Gene Location","Strand","Transcript Type","Expression in Cases as Percent of Controls","Unadjusted P-value","FDR","Median Percent of Reads from Gene Allotted to this Isoform - Cases","Median Percent of Reads from Gene Allotted to this Isoform - Controls","Percent Difference in Gene Level Analysis","Unadjusted pvalue in Gene Level Analysis","FDR in Gene Level Analysis")
sigSummary <- sigGenes
save(sigSummary, geneLevel, file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/SigSummary.RData")
write.csv(sigSummary,file="/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/tables/sigSummary.csv",row.names=FALSE,quote=FALSE)
rm(list=ls())
options(stringsAsFactors = FALSE)
#load results
load(file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/dge.RData")
#isolate significant results - FDR<0.05
sigGenes <- dge.genes[dge.genes$padj<0.05,] #Pull out genes with adjusted p-values less than 0.05
#create print ready variables
sigGenes$Description <- unlist(lapply(strsplit(sigGenes$Gene.description,split="[",fixed=TRUE),function(a) a[1])) #remove the source annotation
sigGenes$GeneLoc.Mb <- sprintf("%.1f",round(sigGenes$Gene.start..bp./1000000,1)) #Convert Gene start into Mb units and round to 1 decimal place
sigGenes$GeneLoc <- paste("Chr",sigGenes$Chromosome.scaffold.name,": ",sigGenes$GeneLoc.Mb," Mb",sep="") #Make location variable look like chr1:##Mb
sigGenes$strand <- c("+","-")[as.numeric(sigGenes$Strand<0) + 1] #Assign positive or negative symbol to the appropriate strand
#orange - green
sigGenes$pctOfControl = paste(sprintf("%.1f",round(100*(2^sigGenes$log2FoldChange),1)),"%",sep="") ##Back transform fold change from log base 2, and format into a percent
sigGenes$pvalue = format(sigGenes$pvalue,digits=2,scientific=TRUE) #Format p-value
sigGenes$FDR = sprintf("%.4f",round(sigGenes$padj,4)) #format false discovery rate
sigGenes$FDR[sigGenes$FDR=="0.0000"] = "<0.0001" #Format low false discovery rate to something more readable
sigGenes = sigGenes[,c("Gene.name","Description","Gene.stable.ID","Transcript.count","GeneLoc","strand","Gene.type","pctOfControl","pvalue","FDR")]
colnames(sigGenes) = c("Gene Symbol","Gene Description","Ensembl Gene ID","Number of Isoforms","Gene Location","Strand","Gene Type","Expression in Cases as Percent of Controls","Unadjusted P-value","FDR")
save(sigGenes, file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/SigGenes.RData")
write.csv(sigGenes, file="/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/tables/sigGenes.csv",row.names=FALSE,quote=FALSE)
rm(list=ls())
options(stringsAsFactors = FALSE)
#load results
load(file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/dge.RData")
#gene level results
geneLevel = dge.genes
geneLevel$geneLevel_pctDiff = paste(sprintf("%.1f",round(100*(2^geneLevel$log2FoldChange),1)),"%",sep="") #format percent differential expression
geneLevel$geneLevel_pvalue = format(geneLevel$pvalue,digits=2,scientific=TRUE) #format p-value
geneLevel$geneLevel_FDR = sprintf("%.4f",round(geneLevel$padj,4)) #format false discovery rate (10%)
geneLevel$geneLevel_FDR[geneLevel$geneLevel_FDR=="0.0000"] = "<0.0001" #format low p-values into somethig that makes sense
geneLevel = geneLevel[,c("Gene.stable.ID","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
#isolate significant isoforms - FDR<0.05
sigGenes <- dge_v2[dge_v2$padj<0.05,]
#create print ready variables
sigGenes$Description <- unlist(lapply(strsplit(sigGenes$Gene.description,split="[",fixed=TRUE),function(a) a[1])) #format gene description
sigGenes$GeneLoc.Mb <- sprintf("%.1f",round(sigGenes$Gene.start..bp./1000000,1)) #format location by converting to mega bases
sigGenes$GeneLoc <- paste("Chr",sigGenes$Chromosome.scaffold.name,": ",sigGenes$GeneLoc.Mb," Mb",sep="") #add chr label to location
sigGenes$strand <- c("+","-")[as.numeric(sigGenes$Strand<0) + 1] #format strand direction
#orange - green
sigGenes$pctOfControl = paste(sprintf("%.1f",round(100*(2^sigGenes$log2FoldChange),1)),"%",sep="")
sigGenes$pvalue = format(sigGenes$pvalue,digits=2,scientific=TRUE)
sigGenes$FDR = sprintf("%.4f",round(sigGenes$padj,4))
sigGenes$FDR[sigGenes$FDR=="0.0000"] = "<0.0001"
sigGenes$treated_isoPct = paste(sprintf("%.1f",round(sigGenes$treated_isoPct,1)),"%")
sigGenes$Untreated_isoPct = paste(sprintf("%.1f",round(sigGenes$Untreated_isoPct,1)),"%")
sigGenes = merge(sigGenes,geneLevel,by="Gene.stable.ID",all.x=T)
sigGenes = sigGenes[,c("Gene.name","Gene.description","Gene.stable.ID","Transcript.stable.ID","Transcript.count","GeneLoc","Strand","Gene.type","pctOfControl","pvalue","FDR","treated_isoPct","Untreated_isoPct","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
sigGenes = sigGenes[order(sigGenes$pvalue),]
sigGenes$Gene.description <- gsub(",", ";", sigGenes$Gene.description, fixed = T)
colnames(sigGenes) = c("Gene Symbol","Gene Description","Ensembl Gene ID","Ensembl Transcript ID","Number of Isoforms","Gene Location","Strand","Transcript Type","Expression in Cases as Percent of Controls","Unadjusted P-value","FDR","Median Percent of Reads from Gene Allotted to this Isoform - Cases","Median Percent of Reads from Gene Allotted to this Isoform - Controls","Percent Difference in Gene Level Analysis","Unadjusted pvalue in Gene Level Analysis","FDR in Gene Level Analysis")
sigSummary <- sigGenes
save(sigSummary, geneLevel, file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/SigSummary.RData")
write.csv(sigSummary,file="/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/tables/sigSummary.csv",row.names=FALSE,quote=FALSE)
rm(list=ls())
options(stringsAsFactors = FALSE)
#load results
load(file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/dge.RData")
#isolate significant results - FDR<0.05
sigGenes <- dge.genes[dge.genes$padj<0.05,] #Pull out genes with adjusted p-values less than 0.05
#create print ready variables
sigGenes$Description <- unlist(lapply(strsplit(sigGenes$Gene.description,split="[",fixed=TRUE),function(a) a[1])) #remove the source annotation
sigGenes$GeneLoc.Mb <- sprintf("%.1f",round(sigGenes$Gene.start..bp./1000000,1)) #Convert Gene start into Mb units and round to 1 decimal place
sigGenes$GeneLoc <- paste("Chr",sigGenes$Chromosome.scaffold.name,": ",sigGenes$GeneLoc.Mb," Mb",sep="") #Make location variable look like chr1:##Mb
sigGenes$strand <- c("+","-")[as.numeric(sigGenes$Strand<0) + 1] #Assign positive or negative symbol to the appropriate strand
#orange - green
sigGenes$pctOfControl = paste(sprintf("%.1f",round(100*(2^sigGenes$log2FoldChange),1)),"%",sep="") ##Back transform fold change from log base 2, and format into a percent
sigGenes$pvalue = format(sigGenes$pvalue,digits=2,scientific=TRUE) #Format p-value
sigGenes$FDR = sprintf("%.4f",round(sigGenes$padj,4)) #format false discovery rate
sigGenes$FDR[sigGenes$FDR=="0.0000"] = "<0.0001" #Format low false discovery rate to something more readable
sigGenes = sigGenes[,c("Gene.name","Description","Gene.stable.ID","Transcript.count","GeneLoc","strand","Gene.type","pctOfControl","pvalue","FDR")]
sigGenes$Gene.description <- gsub(",", ";", sigGenes$Gene.description, fixed = T)
colnames(sigGenes) = c("Gene Symbol","Gene Description","Ensembl Gene ID","Number of Isoforms","Gene Location","Strand","Gene Type","Expression in Cases as Percent of Controls","Unadjusted P-value","FDR")
save(sigGenes, file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/SigGenes.RData")
write.csv(sigGenes, file="/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/tables/sigGenes.csv",row.names=FALSE,quote=FALSE)
## WORKING FROM LOCAL MACHINE SOURCE ##
source("~/Desktop/Saba_Lab/Liver/code/rsem.read.R")
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/"
dirs2 <- "/Volumes/rn6/quantitation/liverTotalRNA/RI/"
dirlocal <- "~/Desktop/Saba_Lab/"
N <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
tissue <- "Liver"
options(stringsAsFactors = FALSE)
library(rtracklayer)
library(GenomicRanges)
ST_gtfClean <- import(paste(directory, file_merged, sep = ""))
directory <- paste(dirlocal, tissue, "/quantitation/", sep = "")
file_merged <- "stringtie_results_liver.gtf"
sample_merged <- "merged"
options(stringsAsFactors = FALSE)
library(rtracklayer)
library(GenomicRanges)
ST_gtfClean <- import(paste(directory, file_merged, sep = ""))
ST_df <- as.data.frame(ST_gtfClean) #Converts the object above to a dataframe
View(ST_df)
#load results
load(file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/dge.RData")
#gene level results
geneLevel = dge.genes
View(geneLevel)
geneLevel$geneLevel_pctDiff = paste(sprintf("%.1f",round(100*(2^geneLevel$log2FoldChange),1)),"%",sep="") #format percent differential expression
geneLevel$geneLevel_pvalue = format(geneLevel$pvalue,digits=2,scientific=TRUE) #format p-value
geneLevel$geneLevel_FDR = sprintf("%.4f",round(geneLevel$padj,4)) #format false discovery rate (10%)
geneLevel$geneLevel_FDR[geneLevel$geneLevel_FDR=="0.0000"] = "<0.0001" #format low p-values into somethig that makes sense
geneLevel = geneLevel[,c("Gene.stable.ID","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
#isolate significant isoforms - FDR<0.05
sigGenes <- dge_v2[dge_v2$padj<0.05,]
#create print ready variables
sigGenes$Description <- unlist(lapply(strsplit(sigGenes$Gene.description,split="[",fixed=TRUE),function(a) a[1])) #format gene description
sigGenes$GeneLoc.Mb <- sprintf("%.1f",round(sigGenes$Gene.start..bp./1000000,1)) #format location by converting to mega bases
sigGenes$GeneLoc <- paste("Chr",sigGenes$Chromosome.scaffold.name,": ",sigGenes$GeneLoc.Mb," Mb",sep="") #add chr label to location
sigGenes$strand <- c("+","-")[as.numeric(sigGenes$Strand<0) + 1] #format strand direction
#orange - green
sigGenes$pctOfControl = paste(sprintf("%.1f",round(100*(2^sigGenes$log2FoldChange),1)),"%",sep="")
sigGenes$pvalue = format(sigGenes$pvalue,digits=2,scientific=TRUE)
sigGenes$FDR = sprintf("%.4f",round(sigGenes$padj,4))
sigGenes$FDR[sigGenes$FDR=="0.0000"] = "<0.0001"
sigGenes$treated_isoPct = paste(sprintf("%.1f",round(sigGenes$treated_isoPct,1)),"%")
sigGenes$Untreated_isoPct = paste(sprintf("%.1f",round(sigGenes$Untreated_isoPct,1)),"%")
sigGenes = merge(sigGenes,geneLevel,by="Gene.stable.ID",all.x=T)
View(sigGenes)
harry <- ST_df
colnames(harry)[5] <- "Strand"
harry <- harry[, c(5,10, 11)]
smith <- merge(sigGenes, harry, by.x = "Transcript.stable.ID", by.y = "transcript_id")
View(smith)
rm(smith)
smith <- merge(sigGenes, harry, by.x = "Transcript.stable.ID", by.y = "transcript_id", all.x = TRUE)
View(smith)
View(sigGenes)
harry <- ST_df
for(i in 1:length(sigGenes$Transcript.stable.ID)) {
txpos <- match(sigGenes$Transcript.stable.ID[i], harry$transcript_id)
tID <- BXH1IR.nospike$transcript_id[txpos]
if(startsWith(tID, "MSTRG")){sigGenes$Strand[i] = harry$strand[txpos]} else {sigGenes$Strand[i] = sigGenes$Strand[i]}
}
for(i in 1:length(sigGenes$Transcript.stable.ID)) {
txpos <- match(sigGenes$Transcript.stable.ID[i], harry$transcript_id)
tID <- harry$transcript_id[txpos]
if(startsWith(tID, "MSTRG")){sigGenes$Strand[i] = harry$strand[txpos]} else {sigGenes$Strand[i] = sigGenes$Strand[i]}
}
txpos <- match(sigGenes$Transcript.stable.ID[i], harry$transcript_id)
txpos
sigGenes$Transcript.stable.ID[i]
harry$transcript_id
txpos <- match(sigGenes$Transcript.stable.ID[400], harry$transcript_id)
txpos
tID <- harry$transcript_id[txpos]
tID
if(startsWith(tID, "MSTRG")){sigGenes$Strand[400] = harry$strand[txpos]} else {sigGenes$Strand[400] = sigGenes$Strand[400]}
sigGenes$Strand[400]
harry$strand[txpos]
tID
startsWith(tID, "MSTRG")
txpos <- match(sigGenes$Transcript.stable.ID[400], harry$transcript_id)
tID <- harry$transcript_id[txpos]
if(startsWith(tID, "MSTRG")){sigGenes$Strand[400] = harry$strand[txpos]} else {sigGenes$Strand[400] = sigGenes$Strand[400]}
sigGenes$Strand[400]
txpos <- match(sigGenes$Transcript.stable.ID[400], harry$transcript_id)
tID <- harry$transcript_id[txpos]
if(startsWith(tID, "MSTRG")){sigGenes$Strand[400] = as.character(harry$strand[txpos])} else {sigGenes$Strand[400] = sigGenes$Strand[400]}
sigGenes$Strand[400]
## Read in "stringtie_merged_results.gtf" and format into dataframe
directory <- "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/stringtie/"
file_merged <- "stringtie_results.gtf"
sample_merged <- "merged"
options(stringsAsFactors = FALSE)
library(rtracklayer)
library(GenomicRanges)
ST_gtfClean <- import(paste(directory, file_merged, sep = "")) #This imports the .gtf file and formats the information in the file and the 9th column to something more    readible
ST_df <- as.data.frame(ST_gtfClean) #Converts the object above to a dataframe
harry <- ST_df
txpos <- match(sigGenes$Transcript.stable.ID[400], harry$transcript_id)
tID <- harry$transcript_id[txpos]
if(startsWith(tID, "MSTRG")){sigGenes$Strand[400] = as.character(harry$strand[txpos])} else {sigGenes$Strand[400] = sigGenes$Strand[400]}
sigGenes$Strand[400]
for(i in 1:length(sigGenes$Transcript.stable.ID)) {
txpos <- match(sigGenes$Transcript.stable.ID[i], harry$transcript_id)
tID <- harry$transcript_id[txpos]
if(startsWith(tID, "MSTRG")){sigGenes$Strand[i] = as.character(harry$strand[txpos])} else {sigGenes$Strand[i] = sigGenes$Strand[i]}
}
View(harry)
rm(list=ls())
options(stringsAsFactors = FALSE)
#load results
load(file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/dge.RData")
#gene level results
geneLevel = dge.genes
geneLevel$geneLevel_pctDiff = paste(sprintf("%.1f",round(100*(2^geneLevel$log2FoldChange),1)),"%",sep="") #format percent differential expression
geneLevel$geneLevel_pvalue = format(geneLevel$pvalue,digits=2,scientific=TRUE) #format p-value
geneLevel$geneLevel_FDR = sprintf("%.4f",round(geneLevel$padj,4)) #format false discovery rate (10%)
geneLevel$geneLevel_FDR[geneLevel$geneLevel_FDR=="0.0000"] = "<0.0001" #format low p-values into somethig that makes sense
geneLevel = geneLevel[,c("Gene.stable.ID","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
#isolate significant isoforms - FDR<0.05
sigGenes <- dge_v2[dge_v2$padj<0.05,]
#create print ready variables
sigGenes$Description <- unlist(lapply(strsplit(sigGenes$Gene.description,split="[",fixed=TRUE),function(a) a[1])) #format gene description
sigGenes$GeneLoc.Mb <- sprintf("%.1f",round(sigGenes$Gene.start..bp./1000000,1)) #format location by converting to mega bases
sigGenes$GeneLoc <- paste("Chr",sigGenes$Chromosome.scaffold.name,": ",sigGenes$GeneLoc.Mb," Mb",sep="") #add chr label to location
sigGenes$strand <- c("+","-")[as.numeric(sigGenes$Strand<0) + 1] #format strand direction
#orange - green
sigGenes$pctOfControl = paste(sprintf("%.1f",round(100*(2^sigGenes$log2FoldChange),1)),"%",sep="")
sigGenes$pvalue = format(sigGenes$pvalue,digits=2,scientific=TRUE)
sigGenes$FDR = sprintf("%.4f",round(sigGenes$padj,4))
sigGenes$FDR[sigGenes$FDR=="0.0000"] = "<0.0001"
sigGenes$treated_isoPct = paste(sprintf("%.1f",round(sigGenes$treated_isoPct,1)),"%")
sigGenes$Untreated_isoPct = paste(sprintf("%.1f",round(sigGenes$Untreated_isoPct,1)),"%")
sigGenes = merge(sigGenes,geneLevel,by="Gene.stable.ID",all.x=T)
sigGenes = sigGenes[,c("Gene.name","Gene.description","Gene.stable.ID","Transcript.stable.ID","Transcript.count","GeneLoc","Strand","Gene.type","pctOfControl","pvalue","FDR","treated_isoPct","Untreated_isoPct","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
sigGenes = sigGenes[order(sigGenes$pvalue),]
sigGenes$Gene.description <- gsub(",", ";", sigGenes$Gene.description, fixed = T)
## Read in "stringtie_merged_results.gtf" and format into dataframe
directory <- "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/stringtie/"
file_merged <- "stringtie_results.gtf"
sample_merged <- "merged"
options(stringsAsFactors = FALSE)
library(rtracklayer)
library(GenomicRanges)
ST_gtfClean <- import(paste(directory, file_merged, sep = "")) #This imports the .gtf file and formats the information in the file and the 9th column to something more    readible
ST_df <- as.data.frame(ST_gtfClean) #Converts the object above to a dataframe
harry <- ST_df
for(i in 1:length(sigGenes$Transcript.stable.ID)) {
txpos <- match(sigGenes$Transcript.stable.ID[i], harry$transcript_id)
tID <- harry$transcript_id[txpos]
if(startsWith(tID, "MSTRG")){sigGenes$Strand[i] = as.character(harry$strand[txpos])} else {sigGenes$Strand[i] = sigGenes$Strand[i]}
}
View(sigGenes)
library(stcr)
rsem.read.iso
?diag
load(file = paste(dirlocal, tissue, "/quantitation/",  "cnts.Merged.isoforms", ".Rdata", sep = ""))
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/"
dirs2 <- "/Volumes/rn6/quantitation/liverTotalRNA/RI/"
dirlocal <- "~/Desktop/Saba_Lab/"
N <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
tissue <- "Liver"
load(file = paste(dirlocal, tissue, "/quantitation/",  "cnts.Merged.isoforms", ".Rdata", sep = ""))
View(cntsMerged)
options(stringsAsFactors = FALSE)
library(rtracklayer)
library(GenomicRanges)
ST_gtfClean <- import(paste(directory, file_merged, sep = "")) #This imports the .gtf file and formats the information in the file and the 9th column to something more    readible
ST_df <- as.data.frame(ST_gtfClean) #Converts the object above to a dataframe
## Read in "stringtie_merged_results.gtf" and format into dataframe
directory <- paste(dirlocal, tissue, "/quantitation/", sep = "")
file_merged <- "gffcmp.annotated.cleaned.gtf"
sample_merged <- "merged"
options(stringsAsFactors = FALSE)
library(rtracklayer)
library(GenomicRanges)
ST_gtfClean <- import(paste(directory, file_merged, sep = "")) #This imports the .gtf file and formats the information in the file and the 9th column to something more    readible
ST_df <- as.data.frame(ST_gtfClean) #Converts the object above to a dataframe
View(ST_df)
!duplicated(ST_df$seqnames)
unique(ST_df$seqnames)
harry <- ST_df[which(ST_df$seqnames %in% "ERCC-00003"), ]
harry
library(stcr)
rsem.read.iso
remove.packages("stcr")
library("devtools")
library(roxygen2)
setwd("/Users/smiharry/Desktop/Saba_Lab/RLBTCP")
create("stcr")
