## Remove duplicate genes for same reaon as above
fullgenedf.merge <- fullgenedf.merge[!duplicated(fullgenedf.merge$gene_id), ]
## Calculate total read counts across all samples for each gene
fullgenedf.merge$geneReadSum <- rowSums(cntsMerged.gene[which(cntsMerged.gene$gene_id %in% index), -1])
## Summarize read counts by gene.type
cnt.gene.agg <- aggregate(geneReadSum~Gene.type, data = fullgenedf.merge, FUN = function(x) sum(x))
## plot histogram of rounded TPM values
d.cut <- cut((as.numeric(fullgenedf.merge$geneReadSum)), c(seq(0, 10, 1), Inf), include.lowest = TRUE)
hist(as.numeric(d.cut), breaks=0:11, xaxt='n', xlab='',
col=1, border=0, main='Distribution of read counts across samples \nfor reference Ensembl Genes', cex.axis=0.8, las=1)
axis(1, at=0:11, labels=c(seq(0, 10, 1), '>10'), cex.axis=0.8)
title(xlab = "Expected Counts")
## Separate data into high expressed and low expressed
fullgenedf.merge.low <- fullgenedf.merge[which(fullgenedf.merge$geneReadSum < 10), ]
fullgenedf.merge.high <- fullgenedf.merge[which(fullgenedf.merge$geneReadSum >= 10), ]
## aggregate rowsums by gene type for low/high datasets as above
cnt.gene.agg.low <- aggregate(geneReadSum~Gene.type, data = fullgenedf.merge.low, FUN = function(x) sum(x))
cnt.gene.agg.high <- aggregate(geneReadSum~Gene.type, data = fullgenedf.merge.high, FUN = function(x) sum(x))
## Plot distibution of reads by gene type
library(ggplot2)
ggplot(cnt.gene.agg, aes(x=Gene.type, y=geneReadSum)) +
geom_bar(stat="identity", fill="lightgreen", color="grey50")+
coord_flip() + ggtitle("Read distribution by gene type \n Full dataset")
ggplot(cnt.gene.agg.low, aes(x=Gene.type, y=geneReadSum)) +
geom_bar(stat="identity", fill="lightgreen", color="grey50")+
coord_flip() + ggtitle("Read distribution by gene type \n Genes with < 10 reads \n across all samples")
ggplot(cnt.gene.agg.high, aes(x=Gene.type, y=geneReadSum)) +
geom_bar(stat="identity", fill="lightgreen", color="grey50")+
coord_flip() + ggtitle("Read distribution by gene type \n Genes with >= 10 reads \n across all samples")
#################################################################################################
# Check to see if ENS gene IDs have MSRTG transcript IDs and vice versa
#################################################################################################
## How many ENSEMBL reference gene IDs have associated stringtie transcript IDs
sum(grepl("MSTRG", BXH_12_1.gene2$transcript_id.s.)) # 0
## How many stringtie gene IDs have ENSEMBL associate transcript IDs
BXH_12_1.gene3 <- BXH_12_1.gene[which(BXH_12_1.gene$gene_id %!in% index), ]
sum(grepl("ENSRNOT", BXH_12_1.gene3$transcript_id.s.)) # 25,008
## read in tmap file for merged liver reconstruction
gff.tmap <- read.table(file = "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/Transcript_Reconstruction/Liver/StringTie_Results/gffcmp.stringtie_results_liver.gtf.tmap",
header = TRUE)
## Gete number of time class code is '=' for each gene
geneccodesums <- aggregate(class_code~ref_gene_id, data = gff.tmap, FUN = function(x) sum(x == "="))
## get number of times each gene occures
geneoccurances <- as.data.frame(table(gff.tmap$ref_gene_id))
## check to make sure the genes are in the same order in both datasets
identical(order(geneccodesums$ref_gene_id), order(geneoccurances$Var1))
## Merge based on gene ID
gffcheck <- merge(geneoccurances, geneccodesums, by.x = "Var1", by.y = "ref_gene_id")
colnames(gffcheck) <- c("ref_gene_id", "occurances", "class_code_count")
## get number of genes that have all '=' class codes
sum(gffcheck$occurances == gffcheck$class_code_count)
index2 <- gffcheck$occurances == gffcheck$class_code_count
completematchDF <- gffcheck[index2, ]
sum(completematchDF$class_code_count == 1)
completematch.merge <- merge(completematchDF, gff.tmap[, c(1,2)], by = "ref_gene_id")
completematch.merge <- merge(completematch.merge, biomart.91[, c(1,2,8,9)], by.x = "ref_id", by.y = "Transcript.stable.ID")
## Read in RSEM data by batch number
library(stcr)
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/"
dirs2 <- "/Volumes/rn6/quantitation/brainTotalRNA/RI/"
dirlocal <- "~/Desktop/Saba_Lab/"
N <- c(3, 4, 5, 6, 7, 8, 9, 10)
tissue <- "Brain"
qtype <- "counts"
filename <- "cnts.merged.brain"
N <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", filename = filename)
## Read in RSEM data by batch number
library(stcr)
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/"
dirs2 <- "/Volumes/rn6/quantitation/brainTotalRNA/RI/"
dirlocal <- "~/Desktop/Saba_Lab/"
N <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
tissue <- "Brain"
qtype <- "counts"
filename <- "cnts.merged.brain"
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", filename = filename)
## Read in RSEM data by batch number
library(stcr)
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/"
dirs2 <- "/Volumes/rn6/quantitation/brainTotalRNA/RI/"
dirlocal <- "~/Desktop/Saba_Lab/"
N <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
tissue <- "Brain"
qtype <- "counts"
filename <- "cnts.merged.brain"
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", filename = filename)
library("devtools")
library(roxygen2)
remove.packages("stcr")
rsem.read.iso <- function(dir, dirs2, tissue, N, qtype, level, filename) {
for(h in unique(N)) {
## Define "not in" function
'%!in%' <- function(x,y)!('%in%'(x,y))
## Read in batch file list and extract unique strain names with replicate number attached
flist <- as.character(read.table(file = paste(dir, "metadata/", tissue, "/", "RSEM.", "batch", h, ".filelist.txt", sep = ""), header = F)$V1)
sampleID <- unique(unlist(lapply(strsplit(flist,split=".",fixed=TRUE),function(a) a[1])))
sampleID <- sampleID[which(sampleID %!in% c("prep", paste("prepL", h, sep = ""), "rsem", "rsemb1r1", "RSEM", paste("rsemp", c(1:10), sep = ""), paste("rsemb", c(1:10), sep = ""), paste("rsem", c(1:10), sep = ""), "rsem_redo", "new_rsem", paste("rsemL", N, sep = "")))]
fcheck <- rep(NA, length(sampleID))
for(v in 1:length(sampleID)){
if(paste(sampleID[v], ".", "isoforms.results", sep = "") %in% flist) {fcheck[v] = 1.0} else {fcheck[v] = 0.0}
}
fcheck <- ifelse(fcheck == 1, TRUE, FALSE)
if(sum(fcheck) != length(sampleID)) {stop(paste('There is no .results file present in directory for one of the strains: ', sampleID[!fcheck], "\n", sep = ""))}
}
for(h in unique(N)) {
## Define "not in" function
'%!in%' <- function(x,y)!('%in%'(x,y))
## Read in batch file list and extract unique strain names with replicate number attached
flist <- as.character(read.table(file = paste(dir, "metadata/", tissue, "/", "RSEM.", "batch", h, ".filelist.txt", sep = ""), header = F)$V1)
sampleID <- unique(unlist(lapply(strsplit(flist,split=".",fixed=TRUE),function(a) a[1])))
sampleID <- sampleID[which(sampleID %!in% c("prep", paste("prepL", h, sep = ""), "rsem", "rsemb1r1", "RSEM", paste("rsemp", c(1:10), sep = ""), paste("rsem", c(1:10), sep = ""), "rsem_redo", "new_rsem", paste("rsemL", N, sep = "")))]
if(level == "transcript"){
if(qtype == "counts") {
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".isoforms.results",sep=""),sep="\t",header=TRUE)
y = data.frame(transcript_id = x$transcript_id, i=x$expected_count)
colnames(y)[2] = i
if(i==sampleID[1]) cntsT = y
if(i!=sampleID[1]) cntsT = merge(cntsT,y,by="transcript_id")
}
colnames(cntsT)[-1] <- paste(colnames(cntsT)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged = cntsT
if(h!=N[1]) cntsMerged = merge(cntsMerged,cntsT,by="transcript_id")
## save cnts
save(list = c("cntsMerged"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
} else{
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".isoforms.results",sep=""),sep="\t",header=TRUE)
y = data.frame(transcript_id = x$transcript_id, i=x$TPM)
colnames(y)[2] = i
if(i==sampleID[1]) cntsT = y
if(i!=sampleID[1]) cntsT = merge(cntsT,y,by="transcript_id")
}
colnames(cntsT)[-1] <- paste(colnames(cntsT)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged = cntsT
if(h!=N[1]) cntsMerged = merge(cntsMerged,cntsT,by="transcript_id")
## save cnts
save(list = c("cntsMerged"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
}
}
else {
if(qtype == "counts") {
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".genes.results",sep=""),sep="\t",header=TRUE)
y = data.frame(gene_id = x$gene_id, i=x$expected_count)
colnames(y)[2] = i
if(i==sampleID[1]) cntsG = y
if(i!=sampleID[1]) cntsG = merge(cntsG,y,by="gene_id")
}
colnames(cntsG)[-1] <- paste(colnames(cntsG)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged.gene = cntsG
if(h!=N[1]) cntsMerged.gene = merge(cntsMerged.gene,cntsG,by="gene_id")
## save cnts
save(list = c("cntsMerged.gene"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
} else{
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".genes.results",sep=""),sep="\t",header=TRUE)
y = data.frame(gene_id = x$gene_id, i=x$TPM)
colnames(y)[2] = i
if(i==sampleID[1]) cntsG = y
if(i!=sampleID[1]) cntsG = merge(cntsG,y,by="gene_id")
}
colnames(cntsG)[-1] <- paste(colnames(cntsG)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged.gene = cntsG
if(h!=N[1]) cntsMerged.gene = merge(cntsMerged.gene,cntsG,by="gene_id")
## save cnts
save(list = c("cntsMerged.gene"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
}
}
}
}
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/"
dirs2 <- "/Volumes/rn6/quantitation/brainTotalRNA/RI/"
dirlocal <- "~/Desktop/Saba_Lab/"
N <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
tissue <- "Brain"
qtype <- "counts"
filename <- "cnts.merged.brain"
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", filename = filename)
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", filename = filename)
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", filename = filename)
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", filename = filename)
rsem.read.iso <- function(dir, dirs2, tissue, N, qtype, level, filename) {
for(h in unique(N)) {
## Define "not in" function
'%!in%' <- function(x,y)!('%in%'(x,y))
## Read in batch file list and extract unique strain names with replicate number attached
flist <- as.character(read.table(file = paste(dir, "metadata/", tissue, "/", "RSEM.", "batch", h, ".filelist.txt", sep = ""), header = F)$V1)
sampleID <- unique(unlist(lapply(strsplit(flist,split=".",fixed=TRUE),function(a) a[1])))
sampleID <- sampleID[which(sampleID %!in% c("prep", paste("prepL", h, sep = ""), "rsem", "rsemb1r1", "RSEM", paste("rsemp", c(1:10), sep = ""), paste("rsemb", c(1:10), sep = ""), paste("rsem", c(1:10), sep = ""), "rsem_redo", "new_rsem", paste("rsemL", N, sep = "")))]
fcheck <- rep(NA, length(sampleID))
for(v in 1:length(sampleID)){
if(c(paste(sampleID[v], ".", "isoforms.results", sep = ""), paste(sampleID[v], ".", ".isoforms.isoforms.results", sep = "")) %in% flist) {fcheck[v] = 1.0} else {fcheck[v] = 0.0}
}
fcheck <- ifelse(fcheck == 1, TRUE, FALSE)
if(sum(fcheck) != length(sampleID)) {stop(paste('There is no .results file present in directory for one of the strains: ', sampleID[!fcheck], "\n", sep = ""))}
}
for(h in unique(N)) {
## Define "not in" function
'%!in%' <- function(x,y)!('%in%'(x,y))
## Read in batch file list and extract unique strain names with replicate number attached
flist <- as.character(read.table(file = paste(dir, "metadata/", tissue, "/", "RSEM.", "batch", h, ".filelist.txt", sep = ""), header = F)$V1)
sampleID <- unique(unlist(lapply(strsplit(flist,split=".",fixed=TRUE),function(a) a[1])))
sampleID <- sampleID[which(sampleID %!in% c("prep", paste("prepL", h, sep = ""), "rsem", "rsemb1r1", "RSEM", paste("rsemp", c(1:10), sep = ""), paste("rsem", c(1:10), sep = ""), "rsem_redo", "new_rsem", paste("rsemL", N, sep = "")))]
if(level == "transcript"){
if(qtype == "counts") {
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".isoforms.results",sep=""),sep="\t",header=TRUE)
y = data.frame(transcript_id = x$transcript_id, i=x$expected_count)
colnames(y)[2] = i
if(i==sampleID[1]) cntsT = y
if(i!=sampleID[1]) cntsT = merge(cntsT,y,by="transcript_id")
}
colnames(cntsT)[-1] <- paste(colnames(cntsT)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged = cntsT
if(h!=N[1]) cntsMerged = merge(cntsMerged,cntsT,by="transcript_id")
## save cnts
save(list = c("cntsMerged"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
} else{
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".isoforms.results",sep=""),sep="\t",header=TRUE)
y = data.frame(transcript_id = x$transcript_id, i=x$TPM)
colnames(y)[2] = i
if(i==sampleID[1]) cntsT = y
if(i!=sampleID[1]) cntsT = merge(cntsT,y,by="transcript_id")
}
colnames(cntsT)[-1] <- paste(colnames(cntsT)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged = cntsT
if(h!=N[1]) cntsMerged = merge(cntsMerged,cntsT,by="transcript_id")
## save cnts
save(list = c("cntsMerged"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
}
}
else {
if(qtype == "counts") {
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".genes.results",sep=""),sep="\t",header=TRUE)
y = data.frame(gene_id = x$gene_id, i=x$expected_count)
colnames(y)[2] = i
if(i==sampleID[1]) cntsG = y
if(i!=sampleID[1]) cntsG = merge(cntsG,y,by="gene_id")
}
colnames(cntsG)[-1] <- paste(colnames(cntsG)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged.gene = cntsG
if(h!=N[1]) cntsMerged.gene = merge(cntsMerged.gene,cntsG,by="gene_id")
## save cnts
save(list = c("cntsMerged.gene"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
} else{
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".genes.results",sep=""),sep="\t",header=TRUE)
y = data.frame(gene_id = x$gene_id, i=x$TPM)
colnames(y)[2] = i
if(i==sampleID[1]) cntsG = y
if(i!=sampleID[1]) cntsG = merge(cntsG,y,by="gene_id")
}
colnames(cntsG)[-1] <- paste(colnames(cntsG)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged.gene = cntsG
if(h!=N[1]) cntsMerged.gene = merge(cntsMerged.gene,cntsG,by="gene_id")
## save cnts
save(list = c("cntsMerged.gene"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
}
}
}
}
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", filename = filename)
c(paste(sampleID[v], ".", "isoforms.results", sep = ""), paste(sampleID[v], ".", ".isoforms.isoforms.results", sep = ""))
## Load expected counts datasets
## Load data and reassign name
load("/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/Transcript_Reconstruction/Liver/quantitation/cnts.Merged.isoforms.RData")
cntsMerged.isoforms <- cntsMerged
## Load data and reassign name
load("/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/Transcript_Reconstruction/Liver/quantitation/cnts.Merged.genes.RData")
cntsMerged.gene <- cntsMerged.gene
options(stringsAsFactors = FALSE)
'%!in%' <- function(x,y)!('%in%'(x,y))
## Investigate read values at each resolution level
samplesums.iso <- apply(cntsMerged.isoforms[, -1], 2, function(x) sum(x))
samplesums.gene <- apply(cntsMerged.gene[, -1], 2, function(x) sum(x))
cntdiff <- samplesums.iso - samplesums.gene
sampsum.tab <- rbind(samplesums.iso, samplesums.gene, cntdiff)
## Read in raw rsem output for one sample and make sure reads for transcripts add up to the reads for a given gene
BXH_12_1.gene <- read.table(file = "/Volumes/rn6/quantitation/liverTotalRNA/RI/batch1/RI.reconst.v1/BXH12_1.genes.results", header = TRUE, sep = "\t")
BXH_12_1.iso <- read.table(file = "/Volumes/rn6/quantitation/liverTotalRNA/RI/batch1/RI.reconst.v1/BXH12_1.isoforms.results", header = TRUE, sep = "\t")
## Generate second gene level dataset that only contains Ensembl genes
index <- as.character(BXH_12_1.gene$gene_id[!grepl("^MSTRG|ERCC", as.character(BXH_12_1.gene$gene_id))])
BXH_12_1.gene2 <- BXH_12_1.gene[which(BXH_12_1.gene$gene_id %in% index), ] # Should be 5019
## aggregate transcript counts by gene name and merge with gene level rsem output
cntcompare.df <- merge(aggregate(expected_count~gene_id, data = BXH_12_1.iso, sum), BXH_12_1.gene[, c(1,5)], by = "gene_id")
## Check to see which gene level read sums match the sums of their respective transcript sums. In order for the value to be TRUE the difference between the 2 sums must be less than 1.0.
cntcompare.df$check <- apply(cntcompare.df, 1, FUN = function(x) all.equal(as.integer(x[2]), as.integer(x[3]), tolerance = 1))
checksum <- as.data.frame(table(cntcompare.df$check))
#checksum$mrd <- unlist(lapply(strsplit(as.character(checksum$Var1), split = ": ", fixed = TRUE), FUN = function(x) x[2]))
#checksum$mrdcheck <- ifelse(as.numeric(checksum$mrd) > 1.0, 1, 0)
#sum(checksum$mrdcheck, na.rm = TRUE) # 0
## Read in annotation data from biomart (Ensembl)
biomart.91 <- read.csv(file = "/Users/smiharry/Desktop/Saba_Lab/Liver/quantitation/biomart.rn6.91.full.txt", header = TRUE)
## Merge annotation with BXH_12 rsem gene level data (Ensemble IDs only)
bxh.bio.merge <- merge(BXH_12_1.gene2, biomart.91, by.x = "gene_id", by.y = "Gene.stable.ID")
## Remove duplicate genes (Due to multiple transcript IDs per gene in annotation data)
bxh.bio.merge <- bxh.bio.merge[!duplicated(bxh.bio.merge$gene_id), ]
## read in biomart version 90 gtf
directory <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/Transcript_Reconstruction/index/"
file_merged <- "Rattus_norvegicus.Rnor_6.0.90.cleaned.gtf"
sample_merged <- "rn6.v90"
options(stringsAsFactors = FALSE)
library(rtracklayer)
library(GenomicRanges)
rn6v90_gtfClean <- import(paste(directory, file_merged, sep = "")) #This imports the .gtf file and formats the information in the file and the 9th column to something more    readible
rnv90_df <- as.data.frame(rn6v90_gtfClean) #Converts the object above to a dataframe
View(rnv90_df)
sum(!duplicated(rn6v90_gtfClean$gene_id))
sum(!duplicated(rn6v90_gtfClean$transcript_id))
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", filename = filename)
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/"
dirs2 <- "/Volumes/rn6/quantitation/brainTotalRNA/RI/"
dirlocal <- "~/Desktop/Saba_Lab/"
N <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
tissue <- "Brain"
qtype <- "counts"
filename <- "cnts.merged.brain"
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", filename = filename)
rsem.read.iso <- function(dir, dirs2, tissue, N, qtype, level, filename) {
for(h in unique(N)) {
## Define "not in" function
'%!in%' <- function(x,y)!('%in%'(x,y))
## Read in batch file list and extract unique strain names with replicate number attached
flist <- as.character(read.table(file = paste(dir, "metadata/", tissue, "/", "RSEM.", "batch", h, ".filelist.txt", sep = ""), header = F)$V1)
sampleID <- unique(unlist(lapply(strsplit(flist,split=".",fixed=TRUE),function(a) a[1])))
sampleID <- sampleID[which(sampleID %!in% c("prep", paste("prepL", h, sep = ""), "rsem", "rsemb1r1", "RSEM", paste("rsemp", c(1:10), sep = ""), paste("rsemb", c(1:10), sep = ""), paste("rsem", c(1:10), sep = ""), "rsem_redo", "new_rsem", paste("rsemL", N, sep = "")))]
fcheck <- rep(NA, length(sampleID))
for(v in 1:length(sampleID)){
if(c(paste(sampleID[v], ".", "isoforms.results", sep = "")) %in% flist) {fcheck[v] = 1.0} else {fcheck[v] = 0.0}
}
fcheck <- ifelse(fcheck == 1, TRUE, FALSE)
if(sum(fcheck) != length(sampleID)) {stop(paste('There is no .results file present in directory for one of the strains: ', sampleID[!fcheck], "\n", sep = ""))}
}
for(h in unique(N)) {
## Define "not in" function
'%!in%' <- function(x,y)!('%in%'(x,y))
## Read in batch file list and extract unique strain names with replicate number attached
flist <- as.character(read.table(file = paste(dir, "metadata/", tissue, "/", "RSEM.", "batch", h, ".filelist.txt", sep = ""), header = F)$V1)
sampleID <- unique(unlist(lapply(strsplit(flist,split=".",fixed=TRUE),function(a) a[1])))
sampleID <- sampleID[which(sampleID %!in% c("prep", paste("prepL", h, sep = ""), "rsem", "rsemb1r1", "RSEM", paste("rsemp", c(1:10), sep = ""), paste("rsem", c(1:10), sep = ""), "rsem_redo", "new_rsem", paste("rsemL", N, sep = "")))]
if(level == "transcript"){
if(qtype == "counts") {
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".isoforms.results",sep=""),sep="\t",header=TRUE)
y = data.frame(transcript_id = x$transcript_id, i=x$expected_count)
colnames(y)[2] = i
if(i==sampleID[1]) cntsT = y
if(i!=sampleID[1]) cntsT = merge(cntsT,y,by="transcript_id")
}
colnames(cntsT)[-1] <- paste(colnames(cntsT)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged = cntsT
if(h!=N[1]) cntsMerged = merge(cntsMerged,cntsT,by="transcript_id")
## save cnts
save(list = c("cntsMerged"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
} else{
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".isoforms.results",sep=""),sep="\t",header=TRUE)
y = data.frame(transcript_id = x$transcript_id, i=x$TPM)
colnames(y)[2] = i
if(i==sampleID[1]) cntsT = y
if(i!=sampleID[1]) cntsT = merge(cntsT,y,by="transcript_id")
}
colnames(cntsT)[-1] <- paste(colnames(cntsT)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged = cntsT
if(h!=N[1]) cntsMerged = merge(cntsMerged,cntsT,by="transcript_id")
## save cnts
save(list = c("cntsMerged"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
}
}
else {
if(qtype == "counts") {
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".genes.results",sep=""),sep="\t",header=TRUE)
y = data.frame(gene_id = x$gene_id, i=x$expected_count)
colnames(y)[2] = i
if(i==sampleID[1]) cntsG = y
if(i!=sampleID[1]) cntsG = merge(cntsG,y,by="gene_id")
}
colnames(cntsG)[-1] <- paste(colnames(cntsG)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged.gene = cntsG
if(h!=N[1]) cntsMerged.gene = merge(cntsMerged.gene,cntsG,by="gene_id")
## save cnts
save(list = c("cntsMerged.gene"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
} else{
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".genes.results",sep=""),sep="\t",header=TRUE)
y = data.frame(gene_id = x$gene_id, i=x$TPM)
colnames(y)[2] = i
if(i==sampleID[1]) cntsG = y
if(i!=sampleID[1]) cntsG = merge(cntsG,y,by="gene_id")
}
colnames(cntsG)[-1] <- paste(colnames(cntsG)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged.gene = cntsG
if(h!=N[1]) cntsMerged.gene = merge(cntsMerged.gene,cntsG,by="gene_id")
## save cnts
save(list = c("cntsMerged.gene"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
}
}
}
}
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", filename = filename)
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", filename = filename)
## Read in RSEM data by batch number
library(stcr)
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/"
dirs2 <- "/Volumes/rn6/quantitation/brainTotalRNA/RI/"
dirlocal <- "~/Desktop/Saba_Lab/"
N <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
tissue <- "Brain"
qtype <- "counts"
filename <- "cnts.merged.brain"
## Read in data
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", filename = filename)
rsem.read.iso
library("devtools")
library(roxygen2)
remove.packages("stcr")
library("devtools")
library(roxygen2)
setwd("/Users/smiharry/Desktop/Saba_Lab/RLBTCP")
create("stcr")
setwd("./stcr")
document()
setwd("..")
install("stcr")
library(stcr)
?rsem.read.iso
?rsem.read.gene
?rm.tech.rep
?pres.abs.table
?sep.panel
?sep.panel.sample
?content.for.plot
?track.position.table
?track.position.bytransc
?summarize.content
?contentQC
## Read in RSEM data by batch number
library(stcr)
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/"
dirs2 <- "/Volumes/rn6/quantitation/brainTotalRNA/RI/"
dirlocal <- "~/Desktop/Saba_Lab/"
N <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
tissue <- "Brain"
qtype <- "counts"
filename <- "cnts.merged.brain"
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", filename = filename)
load("/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/Transcript_Reconstruction/Brain/quantitation/cnts.merged.brain.RData")
View(cntsMerged)
b1.2DF <- cntsMerged[grep("*_L00*", colnames(cntsMerged)), ]
names(b1.2DF)
b1.2DF <- cntsMerged[, grep("*_L00*", colnames(cntsMerged))]
names(b1.2DF)
harry <- ifelse(grepl("*_L00*", colnames(b1.2DF)),
unlist(lapply(strsplit(colnames(b1.2DF[grep("*_L00*", colnames(b1.2DF))]), split = "_", fixed = TRUE), FUN = function(x) paste(x[1], x[4], x[5], sep = "_"))), colnames(b1.2DF))
harry
names(cntsMerged)
harry <- ifelse(grepl("*_L00*", colnames(cntsMerged)),
unlist(lapply(strsplit(colnames(cntsMerged[grep("*_L00*", colnames(cntsMerged))]), split = "_", fixed = TRUE), FUN = function(x) paste(x[1], x[2], x[4], sep = "_"))), colnames(cntsMerged))
harry
## Set directory
directory <- "Volumes/smiharry/Saba_Lab/RNA-Seq/HS/stringtie/mergedgtfs/"
## Set each file name object
Acbc <- "gffcmp.annotated_Acbc.gtf"
IL <- "gffcmp.annotated_IL.gtf"
LHB <- "gffcmp.annotated_LHB.gtf"
PL <- "gffcmp.annotated_PL.gtf"
VoLo <- "gffcmp.annotated_VoLo.gtf"
FULL <- "gffcmp.annotated_FULL.gtf"
options(stringsAsFactors = FALSE)
library(rtracklayer)
library(GenomicRanges)
Acbc.gtf <- import(paste(directory, Acbc, sep = "")) #This imports the .gtf file and formats the information in the file and the 9th column to something more    readible
directory <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/stringtie/mergedgtfs"
Acbc.gtf <- import(paste(directory, Acbc, sep = "")) #This imports the .gtf file and formats the information in the file and the 9th column to something more    readible
directory <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/stringtie/mergedgtfs/"
Acbc.gtf <- import(paste(directory, Acbc, sep = "")) #This imports the .gtf file and formats the information in the file and the 9th column to something more    readible
