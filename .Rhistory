## Define "not in" function
'%!in%' <- function(x,y)!('%in%'(x,y))
## Read in batch file list and extract unique strain names with replicate number attached
flist <- as.character(read.table(file = paste(dir, "metadata/", tissue, "/", "RSEM.", "batch", h, ".filelist.txt", sep = ""), header = F)$V1)
sampleID <- unique(unlist(lapply(strsplit(flist,split=".",fixed=TRUE),function(a) a[1])))
sampleID <- sampleID[which(sampleID %!in% c("prep", paste("prepL", h, sep = ""), "rsem", "rsemb1r1", "RSEM", paste("rsemp", c(1:10), sep = ""), paste("rsemb", c(1:10), sep = ""), paste("rsem", c(1:10), sep = ""), "rsem_redo", "new_rsem", paste("rsemL", N, sep = "")))]
fcheck <- rep(NA, length(sampleID))
for(v in 1:length(sampleID)){
if(c(paste(sampleID[v], ".", "isoforms.results", sep = "")) %in% flist) {fcheck[v] = 1.0} else {fcheck[v] = 0.0}
}
fcheck <- ifelse(fcheck == 1, TRUE, FALSE)
if(sum(fcheck) != length(sampleID)) {stop(paste('There is no .results file present in directory for one of the strains: ', sampleID[!fcheck], "\n", sep = ""))}
}
for(h in unique(N)) {
## Define "not in" function
'%!in%' <- function(x,y)!('%in%'(x,y))
## Read in batch file list and extract unique strain names with replicate number attached
flist <- as.character(read.table(file = paste(dir, "metadata/", tissue, "/", "RSEM.", "batch", h, ".filelist.txt", sep = ""), header = F)$V1)
sampleID <- unique(unlist(lapply(strsplit(flist,split=".",fixed=TRUE),function(a) a[1])))
sampleID <- sampleID[which(sampleID %!in% c("prep", paste("prepL", h, sep = ""), "rsem", "rsemb1r1", "RSEM", paste("rsemp", c(1:10), sep = ""), paste("rsemb", c(1:10), sep = ""), paste("rsem", c(1:10), sep = ""), "rsem_redo", "new_rsem", paste("rsemL", N, sep = "")))]
if(level == "transcript"){
if(qtype == "counts") {
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/", location, "/",i,".isoforms.results",sep=""),sep="\t",header=TRUE)
y = data.frame(transcript_id = x$transcript_id, i=x$expected_count)
colnames(y)[2] = i
if(i==sampleID[1]) cntsT = y
if(i!=sampleID[1]) cntsT = merge(cntsT,y,by="transcript_id")
}
colnames(cntsT)[-1] <- paste(colnames(cntsT)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged = cntsT
if(h!=N[1]) cntsMerged = merge(cntsMerged,cntsT,by="transcript_id")
## save cnts
save(list = c("cntsMerged"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
} else{
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/", location, "/",i,".isoforms.results",sep=""),sep="\t",header=TRUE)
y = data.frame(transcript_id = x$transcript_id, i=x$TPM)
colnames(y)[2] = i
if(i==sampleID[1]) cntsT = y
if(i!=sampleID[1]) cntsT = merge(cntsT,y,by="transcript_id")
}
colnames(cntsT)[-1] <- paste(colnames(cntsT)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged = cntsT
if(h!=N[1]) cntsMerged = merge(cntsMerged,cntsT,by="transcript_id")
## save cnts
save(list = c("cntsMerged"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
}
}
else {
if(qtype == "counts") {
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/", location, "/",i,".genes.results",sep=""),sep="\t",header=TRUE)
y = data.frame(gene_id = x$gene_id, i=x$expected_count)
colnames(y)[2] = i
if(i==sampleID[1]) cntsG = y
if(i!=sampleID[1]) cntsG = merge(cntsG,y,by="gene_id")
}
colnames(cntsG)[-1] <- paste(colnames(cntsG)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged.gene = cntsG
if(h!=N[1]) cntsMerged.gene = merge(cntsMerged.gene,cntsG,by="gene_id")
## save cnts
save(list = c("cntsMerged.gene"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
} else{
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h,"/", location, "/",i,".genes.results",sep=""),sep="\t",header=TRUE)
y = data.frame(gene_id = x$gene_id, i=x$TPM)
colnames(y)[2] = i
if(i==sampleID[1]) cntsG = y
if(i!=sampleID[1]) cntsG = merge(cntsG,y,by="gene_id")
}
colnames(cntsG)[-1] <- paste(colnames(cntsG)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged.gene = cntsG
if(h!=N[1]) cntsMerged.gene = merge(cntsMerged.gene,cntsG,by="gene_id")
## save cnts
save(list = c("cntsMerged.gene"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
}
}
}
}
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "gene", location = location, filename = "cnts.merged.genes")
setwd("/Users/smiharry/Desktop/Saba_Lab/RLBTCP")
create("stcr")
setwd("./stcr")
document()
setwd("..")
install("stcr")
library(stcr)
?rsem.read.iso
?rsem.read.gene
?rm.tech.rep
?pres.abs.table
?sep.panel
?sep.panel.sample
?content.for.plot
?track.position.table
?track.position.bytransc
?summarize.content
?contentQC
## Read in RSEM data by batch number
library(stcr)
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/"
dirs2 <- "/Volumes/rn6/quantitation/HS_brainPolyA/"
dirlocal <- "~/Desktop/Saba_Lab/"
location <- "reconst.Full"
N <- list(1, 2, "_3_4_5")
tissue <- "Brain"
qtype <- "counts"
filename <- "cnts.merged"
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "gene", location = location, filename = "cnts.merged.genes")
rsem.read.iso
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "gene", location = location, filename = "cnts.merged.genes")
rm(list = ls())
options(stringsAsFactors = FALSE)
library(DESeq2)
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/"
dirlocal <- "~/Desktop/Saba_Lab/"
tissue <- "Liver"
## Load full expected counts dataset
load(file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  "cnts.Merged.isoforms.RMO", ".Rdata", sep = ""))
## Remove spike-ins
cntsMerged.norep.RMO <- cntsMerged.norep.RMO[-c(1:92), ]
##subset data
countdata <- cntsMerged.norep.RMO[, c(grep("F344-NHsd", colnames(cntsMerged.norep.RMO)), grep("LEW-SsNHsd", colnames(cntsMerged.norep.RMO)))]
## Filter genes by counts
rownames(countdata) <- cntsMerged.norep.RMO$transcript_id
countdata <- countdata[rowSums(countdata)>(10*ncol(countdata)),]
## Generate 'phenotypedata
phen <- data.frame("sample" = colnames(countdata), "condition" = as.factor(c(rep("F", 3), rep("L", 3))))
##Generate expression set object
dds <- DESeqDataSetFromMatrix(countData = round(countdata),
colData = phen,
design = ~ condition)
## rlog transform for data visualization
rld <- rlog(dds)
## Plot first 2 samples to get idea of rlog success: Doesn;t look good
plot(assay(rld)[ , 1:2],
pch=16, cex=0.3)
## PCA plot: Looks ok. the strains cluster away from each other
plotPCA(rld, intgroup = c("condition"))
## run DE analysis
dds <- DESeq(dds)
## Gives a note. but based on M. Love (https://www.biostars.org/p/119115/), no furhter action required by user.
## Build results table
res <- results(dds)
results.t <- as.data.frame(res[!is.na(res$pvalue), c("log2FoldChange", "pvalue", "padj")])
results.t$transcript_id <- rownames(results.t)
results.t.sig <- results.t[results.t$pvalue < 0.05, ]
## Load Gene level data
load("/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/Transcript_Reconstruction/Liver/quantitation/cnts.Merged.genes.RData")
## Remove spike-ins and remove animals not in isoform data
cntsMerged.gene <- cntsMerged.gene[which(!grepl("^ERCC", cntsMerged.gene$gene_id)), c(1, which(colnames(cntsMerged.gene) %in% colnames(cntsMerged.norep.RMO)))]
##subset data
countdata.g <- cntsMerged.gene[, c(grep("F344-NHsd", colnames(cntsMerged.gene)), grep("LEW-SsNHsd", colnames(cntsMerged.gene)))]
## Filter genes by counts
rownames(countdata.g) <- cntsMerged.gene$gene_id
countdata.g <- countdata.g[rowSums(countdata.g)>(10*ncol(countdata.g)),]
## Generate 'phenotypedata
phen.g <- data.frame("sample" = colnames(countdata.g), "condition" = as.factor(c(rep("F", 3), rep("L", 3))))
##Generate expression set object
ddg <- DESeqDataSetFromMatrix(countData = round(countdata.g),
colData = phen.g,
design = ~ condition)
## rlog transform for data visualization
rld.g <- rlog(ddg)
## Plot first 2 samples to get idea of rlog success: Doesn;t look good
plot(assay(rld.g)[ , 1:2],
pch=16, cex=0.3)
## PCA plot: Looks ok. the strains cluster away from each other
plotPCA(rld.g, intgroup = c("condition"))
## run DE analysis
ddg <- DESeq(ddg)
## Gives a note. but based on M. Love (https://www.biostars.org/p/119115/), no furhter action required by user.
## Build results table
res.g <- results(ddg)
results.g <- as.data.frame(res.g[!is.na(res.g$pvalue), c("log2FoldChange", "pvalue", "padj")])
results.g$gene_id <- rownames(results.g)
results.g.sig <- results.g[results.g$pvalue < 0.05, ]
results.g.sig.fdr <- results.g[results.g$padj < 0.05, ]
## load rsem data from one sample for isoform to gene mapping
BXH1IR <- read.table("/Volumes/rn6/quantitation/liverTotalRNA/RI/batch2/RI.reconst.v1/BXH2_1.isoforms.results", header = TRUE, sep = "\t")
BXH1IR.nospike <- BXH1IR[which(!startsWith(BXH1IR$gene_id, "ERCC")), ]
## Build map and merge transcripts with their associated genes
map <- BXH1IR.nospike[which(BXH1IR.nospike$transcript_id %in% results.t$transcript_id), c(1,2)]
results.t <- merge(results.t, map, by = "transcript_id")
## Sort dataset by gene_id, then by p-value
library(dplyr)
results.t.sort <- arrange(results.t, gene_id, pvalue)
######################################################### using genes with unadjusted p < 0.05 ############################################################
## Check to see if gene from transcript list is in sig DE gene list
results.t.sort$sigDE <- NA
for(i in 1:length(results.t.sort$transcript_id)){
results.t.sort$sigDE[i] <- results.t.sort$gene_id[i] %in% results.g.sig$gene_id
}
results.t.sort$ttype <- substr(results.t.sort$transcript_id, start = 1, stop = 2)
results.t.sort$sigstat <- results.t.sort$padj < 0.05
results.t.sort$sigstat.unadj <- results.t.sort$pvalue < 0.05
## Generate sig results table for isoforms that also has the mapped genes included
results.t.sig <- results.t.sort[results.t.sort$padj < 0.05, ]
## Calculate percentages for each category of transcript (e.g. 52.64% of the DE transcripts are novel and associated with a gene that is not DE)
t.sig.tb <- table(results.t.sig$ttype, results.t.sig$sigDE)
t.sig.pcts <- round((t.sig.tb/dim(results.t.sig)[1])*100, 2)
## Calculate percentages for novel and known transcripts in full dataset
round((table(substr(BXH1IR.nospike$transcript_id, start = 1, stop = 2)))/length(BXH1IR.nospike$transcript_id)*100, 2)
## genrate list of genes aggregated by their known/novel transcript content and the sum of significant transcripts in each known/novel category - FDR
bygenerslts <- aggregate(sigstat~gene_id+ttype, data = results.t.sort, FUN = function(x) sum(x))
bygenerslts <- arrange(bygenerslts, gene_id, ttype)
## genrate list of genes aggregated by their known/novel transcript content and the sum of significant transcripts in each known/novel category - unadjusted
bygenerslts.unadj <- aggregate(sigstat.unadj~gene_id+ttype, data = results.t.sort, FUN = function(x) sum(x))
bygenerslts.unadj <- arrange(bygenerslts.unadj, gene_id, ttype)
## merge data aggregated datasets
bygenerslts <- merge(bygenerslts, bygenerslts.unadj, by = c("gene_id", "ttype"))
## subset dataset for genes with both known and novel transcripts
index1 <- bygenerslts$gene_id[duplicated(bygenerslts$gene_id)]
bg.both <- bygenerslts[which(bygenerslts$gene_id %in% index1), ]
## identify genes that have DE novel transcripts, but not DE known stranscripts
decompare <- aggregate(sigstat~gene_id, data = bg.both, FUN = function(x) diff(x))
decompare$cand <- decompare$sigstat > 0
## restructure bg.both so that there is a column for ED and for MS for each gene
gnames <- bg.both$gene_id[seq(1, length(bg.both$gene_id), 2)]
EN.fdr <- bg.both$sigstat[seq(1, length(bg.both$gene_id), 2)]
EN.unadj <- bg.both$sigstat.unadj[seq(1, length(bg.both$gene_id), 2)]
gnames2 <- bg.both$gene_id[seq(2, length(bg.both$gene_id), 2)]
MS.fdr <- bg.both$sigstat[seq(2, length(bg.both$gene_id), 2)]
MS.unadj <- bg.both$sigstat.unadj[seq(2, length(bg.both$gene_id), 2)]
identical(gnames, gnames2) # Sanity check. Should be true
bg.both.t <- data.frame("gene_id" = gnames, "fdr.EN" = EN.fdr, "fdr.MS" = MS.fdr, "unadj.EN" = EN.unadj, "unadj.MS" = MS.unadj)
## assign code for if gene has 0 DE known transcripts (based on FDR) and >0 DE novel transcripts (based on FDR)
bg.both.t$cand <- (bg.both.t$fdr.EN == 0 & bg.both.t$fdr.MS > 0)
bg.both.t$cand2 <- (bg.both.t$unadj.EN == 0 & bg.both.t$fdr.MS > 0)
## Summarize genes that have 0 DE known transcripts and at least 1 DE novel transcript.
table(bg.both.t$cand2) ## subset/count transcripts associated with 490 genes that return TRUE
noDEg.yesDEt.index <- bg.both.t[bg.both.t$cand2 == TRUE, "gene_id"]
noDEg.yesDEt <- BXH1IR.nospike[which(BXH1IR.nospike$gene_id %in% noDEg.yesDEt.index), ] # There are 12217 transcripts
##sanity check
sum(!duplicated(noDEg.yesDEt$gene_id)) # should be 490
## Generate table comparing number of genes with DE novel and not DE known
comparison <- c("# of DE novel transcripts out number # of known DE transcripts", "novel transcripts DE at FDR <0.05 & known transcripts not DE at FDR <0.05", "novel transcripts DE at FDR <0.05 & known transcripts not DE at unadjusted <0.05")
genecompDF <- as.data.frame(cbind(comparison, (rbind(table(decompare$cand), table(bg.both.t$cand), table(bg.both.t$cand2)))))
colnames(genecompDF) <- c("Comparison type", "Gene group 1", "Gene group 2")
genecompDF
library(ggplot2)
library(reshape2)
library(RColorBrewer)
source("/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/Transcript_Reconstruction/Liver/code/multiplot.R")
labels <- c("Associated gene is not \n differentially expressed", "Associated gene is \n differentially expressed")
labels2 <- c("Genes where novel trascript \n differential expression \n is not gretaer than \n known transcript \n differential expression",
"Genes where novel trascript \n differential expression \n is gretaer than known \n transcript \n differential expression")
ggplot(results.t.sig, aes(fill = ttype, x = sigDE)) + geom_bar(position = "dodge") +
labs(x = "Associated gene category", y = "Number of transcripts") +
scale_x_discrete(labels = labels) +
scale_fill_manual(values=c("red3", "dodgerblue3"),
name=NULL,
breaks=c("EN", "MS"),
labels=c("Known transcripts", "Novel transcripts")) +
theme(legend.position = c(0.75, 0.90)) +
annotate("text", x = 1.23, y = 830, label = paste0(t.sig.pcts[2,1], "%"), size = 8, color = "white") +
annotate("text", x = 2.23, y = 430, label = paste0(t.sig.pcts[2,2], "%"), size = 8, color = "white") +
theme(text = element_text(size=12)) + ggtitle("A")
pdf("/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/Transcript_Reconstruction/Liver/Graphics/DE.barcharts.pdf", height = 5, width = 5)
multiplot(p1)
dev.off()
p1 <- ggplot(results.t.sig, aes(fill = ttype, x = sigDE)) + geom_bar(position = "dodge") +
labs(x = "Associated gene category", y = "Number of transcripts") +
scale_x_discrete(labels = labels) +
scale_fill_manual(values=c("red3", "dodgerblue3"),
name=NULL,
breaks=c("EN", "MS"),
labels=c("Known transcripts", "Novel transcripts")) +
theme(legend.position = c(0.75, 0.90)) +
annotate("text", x = 1.23, y = 830, label = paste0(t.sig.pcts[2,1], "%"), size = 8, color = "white") +
annotate("text", x = 2.23, y = 430, label = paste0(t.sig.pcts[2,2], "%"), size = 8, color = "white") +
theme(text = element_text(size=12)) + ggtitle("A")
pdf("/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/Transcript_Reconstruction/Liver/Graphics/DE.barcharts.pdf", height = 5, width = 5)
multiplot(p1)
dev.off()
p1 <- ggplot(results.t.sig, aes(fill = ttype, x = sigDE)) + geom_bar(position = "dodge") +
labs(x = "Associated gene category", y = "Number of transcripts") +
scale_x_discrete(labels = labels) +
scale_fill_manual(values=c("red3", "dodgerblue3"),
name=NULL,
breaks=c("EN", "MS"),
labels=c("Known transcripts", "Novel transcripts")) +
theme(legend.position = c(0.75, 0.90)) +
annotate("text", x = 1.23, y = 830, label = paste0(t.sig.pcts[2,1], "%"), size = 6, color = "white") +
annotate("text", x = 2.23, y = 430, label = paste0(t.sig.pcts[2,2], "%"), size = 6, color = "white") +
theme(text = element_text(size=12)) + ggtitle("A")
pdf("/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/Transcript_Reconstruction/Liver/Graphics/DE.barcharts.pdf", height = 5, width = 5)
multiplot(p1)
dev.off()
genecompDF
write.csv(genecompDF, file = "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/Transcript_Reconstruction/Liver/tables/genecompDF.csv", row.names = F, quote = T)
library(stcr)
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/"
dirs2 <- "/Volumes/rn6/quantitation/HS_brainPolyA/"
dirlocal <- "~/Desktop/Saba_Lab/"
location <- "reconst.Full"
N <- list(1, 2, "_3_4_5")
tissue <- "Brain"
qtype <- "counts"
filename <- "cnts.merged"
load("/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/Transcript_Reconstruction/Brain/quantitation/cnts.merged.RData")
names(cntsMerged)
grep("batch_3_4_5", colnames(cntsMerged))
grepl("batch_3_4_5", colnames(cntsMerged))
gsub("batch_3_4_5", "batch3", colnames(cntsMerged), fixed = TRUE)
colnames(cntsMerged) <- gsub("batch_3_4_5", "batch3", colnames(cntsMerged), fixed = TRUE)
cntsMerged.norep <- rm.tech.rep(cntsMerged)
rm.tech.rep
sub(':', '|', colnames(cntsMerged))
sub('_', '.', colnames(cntsMerged))
sub('_', '.', colnames(cntsMerged)[-1])
colnames(cntsMerged)[-1] <- sub('_', '.', colnames(cntsMerged)[-1])
colnames(cntsMerged)
cntsMerged.norep <- rm.tech.rep(cntsMerged)
rm.tech.rep
df <- cntsMerged
names <-  unlist(lapply(strsplit(names(df),split="_",fixed=TRUE),function(a) paste(a[1], a[2], sep = "_")))
rep.index <- names[duplicated(names)]
df.w.reps <- df[, grepl(paste(rep.index, collapse = "|"), names(df))]
df.wo.reps <- df[, !grepl(paste(rep.index, collapse = "|"), names(df))]
sums.vect <- sort(apply(df.w.reps, MARGIN = 2, FUN = sum), decreasing = TRUE)
sums.vect <- as.matrix(sums.vect)
View(df.w.reps)
df.w.reps[1, ]
View(df.w.reps)
apply(df.w.reps, 2, FUN = function(x) typeof(x))
apply(cntsMerged, 2, FUN = function(x) typeof(x))
options(stringsAsFactors = FALSE)
load("/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/Transcript_Reconstruction/Brain/quantitation/cnts.merged.brain.RData")
rownames(cntsMerged) <- cntsMerged$transcript_id
## subset out strains that have lane level counts (i.e. batches 1 and 2)
b1.2DF <- cntsMerged[, c(grep("*_L00*", colnames(cntsMerged)))]
b3.10DF <- cntsMerged[, c(!grepl("*_L00*", colnames(cntsMerged)))]
b1.2DF.names <- ifelse(grepl("*_L00*", colnames(b1.2DF)),
unlist(lapply(strsplit(colnames(b1.2DF[grep("*_L00*", colnames(b1.2DF))]), split = "_", fixed = TRUE), FUN = function(x) paste(x[1], x[2], x[4], sep = "_"))), colnames(b1.2DF))
colnames(b1.2DF) <- b1.2DF.names
## sum counts for each gene based on strain (i.e. sum rows based on matching column name)
b1.2.agg <- as.data.frame(t(rowsum(t(b1.2DF), group = colnames(b1.2DF))))
b1.2.agg$transcript_id <- rownames(b1.2.agg)
## Recombine batches 1 & 2 with batches 3:10
cntsMerged.raw <- merge(b1.2.agg, b3.10DF, by = "transcript_id")
colnames(cntsMerged.raw)[which(grepl("BNLX", colnames(cntsMerged.raw), fixed = TRUE))] <- c("BNLx_1_batch3", "BNLx_2_batch3")
colnames(cntsMerged.raw)[which(grepl("F344_Ncl", colnames(cntsMerged.raw), fixed = TRUE))] <- c("F344-NCl_1_batch9")
colnames(cntsMerged.raw)[which(grepl("SR-JrHsd", colnames(cntsMerged.raw), fixed = TRUE))] <- c("SR_1_batch8", "SR_2_batch8", "SR_3_batch11")
colnames(cntsMerged.raw)[which(grepl("SS-JrHsd", colnames(cntsMerged.raw), fixed = TRUE))] <- c("SS_1_batch8", "SS_2_batch8", "SS_1_batch11", "SS_3_batch11")
colnames(cntsMerged.raw)[which(grepl("SHRSP-Crl", colnames(cntsMerged.raw), fixed = TRUE))] <- c("SHRSP_2_batch8", "SHRSP_3_batch8", "SHRSP_1_batch9" ,"SHRSP_1_batch10", "SHRSP_2_batch10")
colnames(cntsMerged.raw)[which(grepl("WKY-NCrl", colnames(cntsMerged.raw), fixed = TRUE))] <- c("WKY_1_batch8", "WKY_2_batch8", "WKY_1_batch10", "WKY_2_batch10" ,"WKY_3_batch11")
apply(cntsMerged.raw, 2, FUN = function(x) typeof(x))
cntsMerged.norep <- rm.tech.rep(cntsMerged.raw)
cntsMerged <- cntsMerged.raw
df <- cntsMerged
names <-  unlist(lapply(strsplit(names(df),split="_",fixed=TRUE),function(a) paste(a[1], a[2], sep = "_")))
rep.index <- names[duplicated(names)]
df.w.reps <- df[, grepl(paste(rep.index, collapse = "|"), names(df))]
df.wo.reps <- df[, !grepl(paste(rep.index, collapse = "|"), names(df))]
View(df.w.reps)
View(df.wo.reps)
## load isoform level data
options(stringsAsFactors = F)
load("/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/Transcript_Reconstruction/Brain/quantitation/cnts.merged.RData")
## change names that have batch_3_4_5 to batch3
colnames(cntsMerged) <- gsub("batch_3_4_5", "batch3", colnames(cntsMerged), fixed = TRUE)
colnames(cntsMerged)[-1] <- sub('_', '.', colnames(cntsMerged)[-1])
library(stcr)
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/"
dirs2 <- "/Volumes/rn6/quantitation/HS_brainPolyA/"
dirlocal <- "~/Desktop/Saba_Lab/"
location <- "reconst.Full"
N <- list(1, 2, "_3_4_5")
tissue <- "Brain"
qtype <- "counts"
filename <- "cnts.merged"
df <- cntsMerged
names <-  unlist(lapply(strsplit(names(df),split="_",fixed=TRUE),function(a) paste(a[1], a[2], sep = "_")))
rep.index <- names[duplicated(names)]
## Read in RSEM data by batch number
library(stcr)
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/"
dirs2 <- "/Volumes/rn6/quantitation/HS_brainPolyA/"
dirlocal <- "~/Desktop/Saba_Lab/"
location <- "reconst.Full"
N <- list(1, 2, "_3_4_5")
tissue <- "Brain"
qtype <- "counts"
filename <- "cnts.merged"
## load isoform level data
options(stringsAsFactors = F)
load("/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/Transcript_Reconstruction/Brain/quantitation/cnts.merged.RData")
## change names that have batch_3_4_5 to batch3
colnames(cntsMerged) <- gsub("batch_3_4_5", "batch3", colnames(cntsMerged), fixed = TRUE)
colnames(cntsMerged)[-1] <- sub('_', '.', colnames(cntsMerged)[-1])
mainname = unlist(lapply(strsplit(colnames(cntsMerged.norep),split="_",fixed=TRUE),function(a) a[1]))
mainname = unlist(lapply(strsplit(colnames(cntsMerged),split="_",fixed=TRUE),function(a) a[1]))
sum(duplicated(mainname))
PA.table <- pres.abs.table(cntsMerged.norep, mainname)
PA.table <- pres.abs.table(cntsMerged, mainname)
View(PA.table)
PA.table <- cntsMerged[, -1] >= 10
View(PA.table)
PA.table <- apply(PA.table, 2,FUN = function(x) as.integer(x))
PA.table <- data.frame(cntsMerged$transcript_id, PA.table)
View(cntsMerged)
order(colnames(cntsMerged))
colnames(cntsMerged)
identical(order(colnames(cntsMerged)), order(colnames(PA.table)))
order(colnames(PA.table))
PA.table <- cntsMerged[, -1] >= 10
PA.table <- apply(PA.table, 2,FUN = function(x) as.integer(x))
PA.table <- as.data.frame(cbind(cntsMerged$transcript_id, PA.table))
order(colnames(PA.table))
identical(order(colnames(cntsMerged)), order(colnames(PA.table)))
colnames(PA.table)[1] <- "transcript_id"
save(PA.table, file = "/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/Transcript_Reconstruction/Brain/quantitation/PA.table.RData")
rrt <- apply(cntsMerged[-1], 2, FUN = function(x) sum(x))
head(rrt)
hist(rrt)
plot(rrt)
rrt[rrt < 5000000]
names(rrt[rrt < 5000000])
cntsMerged <- cntsMerged[, which(colnames(cntsMerged) %in% names(rrt[rrt < 5000000]))]
'%!in%' <- function(x,y)!('%in%'(x,y))
## load isoform level data
options(stringsAsFactors = F)
load("/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/Transcript_Reconstruction/Brain/quantitation/cnts.merged.RData")
## change names that have batch_3_4_5 to batch3
colnames(cntsMerged) <- gsub("batch_3_4_5", "batch3", colnames(cntsMerged), fixed = TRUE)
colnames(cntsMerged)[-1] <- sub('_', '.', colnames(cntsMerged)[-1])
## Examine read totals for each sample
rrt <- apply(cntsMerged[-1], 2, FUN = function(x) sum(x))
## plot histogram
hist(rrt)
## plot scatterplot
plot(rrt)
## remove low quality samples (i.e. raw read count less than 5 million)
'%!in%' <- function(x,y)!('%in%'(x,y))
cntsMerged <- cntsMerged[, which(colnames(cntsMerged) %!in% names(rrt[rrt < 5000000]))]
PA.table <- cntsMerged[, -1] >= 10
PA.table <- apply(PA.table, 2,FUN = function(x) as.integer(x))
PA.table <- as.data.frame(cbind(cntsMerged$transcript_id, PA.table))
colnames(PA.table)[1] <- "transcript_id"
save(PA.table, file = "/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/Transcript_Reconstruction/Brain/quantitation/PA.table.RData")
rm(list = ls())
options(stringsAsFactors = FALSE)
library(stcr)
library(WGCNA)
library(RColorBrewer)
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/"
dirlocal <- "~/Desktop/Saba_Lab/"
tissue <- "Brain"
load(file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  "PA.table", ".Rdata", sep = ""))
PA.forDendro <- PA.table[, -c(1)]
rownames(PA.forDendro) <- PA.table$transcript_id
content.hclust = hclust(as.dist(1-cor(PA.forDendro, method="pearson")))
colors = c(brewer.pal(9, "Set1"), brewer.pal(8, "Set2"))
batch.tmp <-  unlist(lapply(strsplit(content.hclust$labels,split="_",fixed=TRUE),function(a) a[length(a)]))
batch.num <- unlist(lapply(strsplit(batch.tmp,split="batch",fixed=TRUE),function(a) a[length(a)]))
batch.num
colors4plot2=c()
for(i in 1:length(batch.num)){
if(batch.num[i]=="1"){colors4plot2[i]=colors[1]}
if(batch.num[i]=="2"){colors4plot2[i]=colors[2]}
if(batch.num[i]=="3"){colors4plot2[i]=colors[3]}
}
colors4plot2=as.matrix(colors4plot2)
colnames(colors4plot2) = "Batch"
colors4plot2
labsforstrain <- content.hclust$labels
labsforstrain
labsforbrainregion <- content.hclust$labels
colors4brainregion=c()
for(i in 1:length(labsforbrainregion)){
if(grepl("AcBc", labsforbrainregion[i], fixed = T)){colors4brainregion[i]=colors[4]}
if(grepl("IL", labsforbrainregion[i], fixed = T)){colors4brainregion[i]=colors[5]}
if(grepl("LHB", labsforbrainregion[i], fixed = T)){colors4brainregion[i]=colors[6]}
if(grepl("PL", labsforbrainregion[i], fixed = T)){colors4brainregion[i]=colors[7]}
if(grepl("VoLo", labsforbrainregion[i], fixed = T)){colors4brainregion[i]=colors[8]}
}
colors4brainregion=as.matrix(colors4brainregion)
colnames(colors4brainregion) = "Brain Region"
#plot the dendrogram with a color bar underneath that in this example case corresponds to batch
pdf("/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/Transcript_Reconstruction/Brain/Graphics/TC_SampleLevel_Dendrogram_BeforeFiltering.pdf", height = 8, width = 10)
plotDendroAndColors(dendro=content.sample.hclust, colors=as.matrix(cbind(colors4plot2, colors4brainregion)), main="HS Brain Transcript Content: Present/Absent \n Sample Level", ylab="1-Pearson Correlation",cex.dendroLabels = 0.45)
dev.off()
pdf("/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/Transcript_Reconstruction/Brain/Graphics/TC_SampleLevel_Dendrogram_BeforeFiltering.pdf", height = 8, width = 10)
plotDendroAndColors(dendro=content.hclust, colors=as.matrix(cbind(colors4plot2, colors4brainregion)), main="HS Brain Transcript Content: Present/Absent \n Sample Level", ylab="1-Pearson Correlation",cex.dendroLabels = 0.45)
dev.off()
#plot the dendrogram with a color bar underneath that in this example case corresponds to batch
pdf("/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/Transcript_Reconstruction/Brain/graphics/TC_SampleLevel_Dendrogram_BeforeFiltering.pdf", height = 8, width = 10)
plotDendroAndColors(dendro=content.hclust, colors=as.matrix(cbind(colors4plot2, colors4brainregion)), main="HS Brain Transcript Content: Present/Absent \n Sample Level", ylab="1-Pearson Correlation",cex.dendroLabels = 0.45)
dev.off()
pdf("/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/Transcript_Reconstruction/Brain/graphics/TC_SampleLevel_Dendrogram_BeforeFiltering.pdf", height = 8, width = 20)
plotDendroAndColors(dendro=content.hclust, colors=as.matrix(cbind(colors4plot2, colors4brainregion)), main="HS Brain Transcript Content: Present/Absent \n Sample Level", ylab="1-Pearson Correlation",cex.dendroLabels = 0.45)
dev.off()
#plot the dendrogram with a color bar underneath that in this example case corresponds to batch
pdf("/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/Transcript_Reconstruction/Brain/graphics/TC_SampleLevel_Dendrogram_BeforeFiltering.pdf", height = 10, width = 25)
plotDendroAndColors(dendro=content.hclust, colors=as.matrix(cbind(colors4plot2, colors4brainregion)), main="HS Brain Transcript Content: Present/Absent \n Sample Level", ylab="1-Pearson Correlation",cex.dendroLabels = 0.45)
dev.off()
