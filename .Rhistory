sdevs <- c(as.numeric(avgsem[c(3,8,13,18,23), ]))
sems <- c(as.numeric(avgsem[c(4,9,14,19,24), ]))
strainsampled <- c(as.numeric(avgsem[c(5, 10, 15, 20, 25), ]))
## reformat avgsem into a ggplot friednly format - For transcripts added graph
panels2 <- c(avgsem2[c(1,6,11, 16, 21), ])
avgs2 <- c(as.numeric(avgsem2[c(2,7,12, 17, 22), ]))
sdevs2 <- c(as.numeric(avgsem2[c(3,8,13,18,23), ]))
sems2 <- c(as.numeric(avgsem2[c(4,9,14,19,24), ]))
strainsampled2 <- c(as.numeric(avgsem2[c(5, 10, 15, 20, 25), ]))
## Generate dataframe for content plot
avgsem.forPlot <- data.frame(Panel=panels, SSampled=strainsampled, Mean=avgs, SD=sdevs, SEM=sems)
avgsem.forPlot <- avgsem.forPlot[order(avgsem.forPlot$Panel), ]
avgsem.forPlot <- avgsem.forPlot[-c(15:20, 26:30, 38:40, 49,50), ]
avgsem.forPlot[c(14,18,19, 34), 2] <- c(11, 11, 13, 32)
## Generate dataframe for transcripts added plot
avgsem.forPlot2 <- data.frame(Panel=panels2, SSampled=strainsampled2, Mean=avgs2, SD=sdevs2, SEM=sems2)
avgsem.forPlot2 <- avgsem.forPlot2[order(avgsem.forPlot2$Panel), ]
## calculate the number of transcripts added after each sampling
added.trans <- c(0, avgsem.forPlot2[-1,3] - avgsem.forPlot2[-nrow(avgsem.forPlot2),3])
#added.trans[added.trans <= 0] <- 0
avgsem.forPlot2$added_transcripts <- added.trans
avgsem.forPlot2$rownum <- c(1:length(avgsem.forPlot2$Panel))
## make new df for transcripts added
addedtransForPlot <- avgsem.forPlot2[-c(14:20, 25:30, 38:40, 50), -c(3,4,5)]
addedtransForPlot$added_transcripts[addedtransForPlot$added_transcripts <= 0] <- 0
#addedtransForPlot[c(10,14,18,19, 34), 2] <- c(42,11, 11, 13, 27)
ggplot(avgsem.forPlot, aes(x=SSampled, y=Mean, colour=Panel)) +
geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=.1) +
geom_line() +
geom_point() +
ggtitle("Sampling the full dataset with present threshold of > 10")
ggplot(addedtransForPlot, aes(x=SSampled, y=added_transcripts, colour=Panel)) +
geom_line() +
geom_point() +
ggtitle("Number of transcripts added at each sampling \n Threshold > 10")
sample.means.sds <- function(m, n, o, p, q){
set.seed(2110)
library(plotrix)
rep <- replicate(5, sample.and.summarize(PA.table.RMO, tlist = transcriptListAOL, RI.num = m, hrdp.num = n, IB.num = o, RI.num2 = p, IB.num2 = q))
means <- apply(matrix(as.numeric(rep), 5, 5), 1, FUN = function(x) mean(x))
sds <- apply(matrix(as.numeric(rep), 5, 5), 1, FUN = function(x) sd(x))
sem <- apply(matrix(as.numeric(rep), 5, 5), 1, FUN = function(x) std.error(x))
df.out <- rbind(c("HRDP", "RI.par", "IB.nopar", "RI.nopar", "IB.par"), means, sds, sem, n)
}
## Specify the number of strains to sample for each iteration where j is for RI and i is for classic IBs
m <- c(2, 5, 10, 15, 20, 25, 30, 32, 32, 32)
n <- c(2, 5, 10, 15, 20, 25, 30, 35, 40, 43)
o <- c(2, 5, 10, 11, 11, 11, 11, 11, 11, 11)
p <- c(2, 5, 10, 15, 20, 25, 30, 30, 30, 30)
q <- c(2, 5, 10, 11, 13, 13, 13, 13, 13, 13)
## Specify the number of strains to sample for each iteration for looking at number of transcripts added. These should be equal intervals.
m2 <- c(2, 7, 12, 17, 22, 27, 27, 27, 27, 27) # max 32
n2 <- c(2, 7, 12, 17, 22, 27, 32, 37, 42, 42) # max 43
o2 <- c(2, 7, 7, 7, 7, 7, 7, 7, 7, 7) # max 11
p2 <- c(2, 7, 12, 17, 22, 27, 27, 27, 27, 27) # max 30
q2 <- c(2, 7, 12, 12, 12, 12, 12, 12, 12, 12) # max 13
tlist <- transcriptListAOL
## Using mapply here allows feeding the sample.means.sds function 2 separate strain sample number vectors.
avgsem <- mapply(sample.means.sds, m, n, o, p, q)
avgsem2 <- mapply(sample.means.sds, m2, n2, o2, p2, q2)
## reformat avgsem into a ggplot friednly format - For content graph
panels <- c(avgsem[c(1,6,11, 16, 21), ])
avgs <- c(as.numeric(avgsem[c(2,7,12, 17, 22), ]))
sdevs <- c(as.numeric(avgsem[c(3,8,13,18,23), ]))
sems <- c(as.numeric(avgsem[c(4,9,14,19,24), ]))
strainsampled <- c(as.numeric(avgsem[c(5, 10, 15, 20, 25), ]))
## reformat avgsem into a ggplot friednly format - For transcripts added graph
panels2 <- c(avgsem2[c(1,6,11, 16, 21), ])
avgs2 <- c(as.numeric(avgsem2[c(2,7,12, 17, 22), ]))
sdevs2 <- c(as.numeric(avgsem2[c(3,8,13,18,23), ]))
sems2 <- c(as.numeric(avgsem2[c(4,9,14,19,24), ]))
strainsampled2 <- c(as.numeric(avgsem2[c(5, 10, 15, 20, 25), ]))
## Generate dataframe for content plot
avgsem.forPlot <- data.frame(Panel=panels, SSampled=strainsampled, Mean=avgs, SD=sdevs, SEM=sems)
avgsem.forPlot <- avgsem.forPlot[order(avgsem.forPlot$Panel), ]
avgsem.forPlot <- avgsem.forPlot[-c(15:20, 26:30, 38:40, 49,50), ]
avgsem.forPlot[c(14,18,19, 34), 2] <- c(11, 11, 13, 32)
## Generate dataframe for transcripts added plot
avgsem.forPlot2 <- data.frame(Panel=panels2, SSampled=strainsampled2, Mean=avgs2, SD=sdevs2, SEM=sems2)
avgsem.forPlot2 <- avgsem.forPlot2[order(avgsem.forPlot2$Panel), ]
## calculate the number of transcripts added after each sampling
added.trans <- c(0, avgsem.forPlot2[-1,3] - avgsem.forPlot2[-nrow(avgsem.forPlot2),3])
#added.trans[added.trans <= 0] <- 0
avgsem.forPlot2$added_transcripts <- added.trans
avgsem.forPlot2$rownum <- c(1:length(avgsem.forPlot2$Panel))
avgsem.forPlot2
## Specify the number of strains to sample for each iteration for looking at number of transcripts added. These should be equal intervals.
m2 <- c(2, 7, 12, 17, 22, 27, 27, 27, 27) # max 32
n2 <- c(2, 7, 12, 17, 22, 27, 32, 37, 42) # max 43
o2 <- c(2, 7, 7, 7, 7, 7, 7, 7, 7) # max 11
p2 <- c(2, 7, 12, 17, 22, 27, 27, 27, 27) # max 30
q2 <- c(2, 7, 12, 12, 12, 12, 12, 12, 12) # max 13
avgsem2 <- mapply(sample.means.sds, m2, n2, o2, p2, q2)
panels2 <- c(avgsem2[c(1,6,11, 16, 21), ])
panels2
avgs2 <- c(as.numeric(avgsem2[c(2,7,12, 17, 22), ]))
sdevs2 <- c(as.numeric(avgsem2[c(3,8,13,18,23), ]))
sems2 <- c(as.numeric(avgsem2[c(4,9,14,19,24), ]))
strainsampled2 <- c(as.numeric(avgsem2[c(5, 10, 15, 20, 25), ]))
avgsem.forPlot2 <- data.frame(Panel=panels2, SSampled=strainsampled2, Mean=avgs2, SD=sdevs2, SEM=sems2)
avgsem.forPlot2 <- avgsem.forPlot2[order(avgsem.forPlot2$Panel), ]
avgsem.forPlot2
added.trans <- c(0, avgsem.forPlot2[-1,3] - avgsem.forPlot2[-nrow(avgsem.forPlot2),3])
avgsem.forPlot2$added_transcripts <- added.trans
avgsem.forPlot2$rownum <- c(1:length(avgsem.forPlot2$Panel))
avgsem.forPlot2
addedtransForPlot <- avgsem.forPlot2[-c(12:18, 22:27, 34:46), -c(3,4,5)]
addedtransForPlot$added_transcripts[addedtransForPlot$added_transcripts <= 0] <- 0
addedtransForPlot
avgsem.forPlot2
addedtransForPlot <- avgsem.forPlot2[-c(12:18, 22:27, 34:46), -c(3,4,5)]
addedtransForPlot
addedtransForPlot <- avgsem.forPlot2[-c(12:18, 22:27, 34:36), -c(3,4,5)]
addedtransForPlot
addedtransForPlot$added_transcripts[addedtransForPlot$added_transcripts <= 0] <- 0
addedtransForPlot
ggplot(addedtransForPlot, aes(x=SSampled, y=added_transcripts, colour=Panel)) +
geom_line() +
geom_point() +
ggtitle("Number of transcripts added at each sampling \n Threshold > 10")
sample.means.sds <- function(m, n, o, p, q){
set.seed(2110)
library(plotrix)
rep <- replicate(100, sample.and.summarize(PA.table.RMO, tlist = transcriptListAOL, RI.num = m, hrdp.num = n, IB.num = o, RI.num2 = p, IB.num2 = q))
means <- apply(matrix(as.numeric(rep), 5, 100), 1, FUN = function(x) mean(x))
sds <- apply(matrix(as.numeric(rep), 5, 100), 1, FUN = function(x) sd(x))
sem <- apply(matrix(as.numeric(rep), 5, 100), 1, FUN = function(x) std.error(x))
df.out <- rbind(c("HRDP", "RI.par", "IB.nopar", "RI.nopar", "IB.par"), means, sds, sem, n)
}
## Specify the number of strains to sample for each iteration where j is for RI and i is for classic IBs
m <- c(2, 5, 10, 15, 20, 25, 30, 32, 32, 32)
n <- c(2, 5, 10, 15, 20, 25, 30, 35, 40, 43)
o <- c(2, 5, 10, 11, 11, 11, 11, 11, 11, 11)
p <- c(2, 5, 10, 15, 20, 25, 30, 30, 30, 30)
q <- c(2, 5, 10, 11, 13, 13, 13, 13, 13, 13)
## Specify the number of strains to sample for each iteration for looking at number of transcripts added. These should be equal intervals.
m2 <- c(2, 7, 12, 17, 22, 27, 27, 27, 27) # max 32
n2 <- c(2, 7, 12, 17, 22, 27, 32, 37, 42) # max 43
o2 <- c(2, 7, 7, 7, 7, 7, 7, 7, 7) # max 11
p2 <- c(2, 7, 12, 17, 22, 27, 27, 27, 27) # max 30
q2 <- c(2, 7, 12, 12, 12, 12, 12, 12, 12) # max 13
tlist <- transcriptListAOL
## Using mapply here allows feeding the sample.means.sds function 2 separate strain sample number vectors.
avgsem <- mapply(sample.means.sds, m, n, o, p, q)
avgsem2 <- mapply(sample.means.sds, m2, n2, o2, p2, q2)
## reformat avgsem into a ggplot friednly format - For content graph
panels <- c(avgsem[c(1,6,11, 16, 21), ])
avgs <- c(as.numeric(avgsem[c(2,7,12, 17, 22), ]))
sdevs <- c(as.numeric(avgsem[c(3,8,13,18,23), ]))
sems <- c(as.numeric(avgsem[c(4,9,14,19,24), ]))
strainsampled <- c(as.numeric(avgsem[c(5, 10, 15, 20, 25), ]))
## reformat avgsem into a ggplot friednly format - For transcripts added graph
panels2 <- c(avgsem2[c(1,6,11, 16, 21), ])
avgs2 <- c(as.numeric(avgsem2[c(2,7,12, 17, 22), ]))
sdevs2 <- c(as.numeric(avgsem2[c(3,8,13,18,23), ]))
sems2 <- c(as.numeric(avgsem2[c(4,9,14,19,24), ]))
strainsampled2 <- c(as.numeric(avgsem2[c(5, 10, 15, 20, 25), ]))
## Generate dataframe for content plot
avgsem.forPlot <- data.frame(Panel=panels, SSampled=strainsampled, Mean=avgs, SD=sdevs, SEM=sems)
avgsem.forPlot <- avgsem.forPlot[order(avgsem.forPlot$Panel), ]
avgsem.forPlot <- avgsem.forPlot[-c(15:20, 26:30, 38:40, 49,50), ]
avgsem.forPlot[c(14,18,19, 34), 2] <- c(11, 11, 13, 32)
## Generate dataframe for transcripts added plot
avgsem.forPlot2 <- data.frame(Panel=panels2, SSampled=strainsampled2, Mean=avgs2, SD=sdevs2, SEM=sems2)
avgsem.forPlot2 <- avgsem.forPlot2[order(avgsem.forPlot2$Panel), ]
## calculate the number of transcripts added after each sampling
added.trans <- c(0, avgsem.forPlot2[-1,3] - avgsem.forPlot2[-nrow(avgsem.forPlot2),3])
#added.trans[added.trans <= 0] <- 0
avgsem.forPlot2$added_transcripts <- added.trans
avgsem.forPlot2$rownum <- c(1:length(avgsem.forPlot2$Panel))
## make new df for transcripts added
addedtransForPlot <- avgsem.forPlot2[-c(12:18, 22:27, 34:36), -c(3,4,5)]
addedtransForPlot$added_transcripts[addedtransForPlot$added_transcripts <= 0] <- 0
#addedtransForPlot[c(10,14,18,19, 34), 2] <- c(42,11, 11, 13, 27)
ggplot(avgsem.forPlot, aes(x=SSampled, y=Mean, colour=Panel)) +
geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=.1) +
geom_line() +
geom_point() +
ggtitle("Sampling the full dataset with present threshold of > 10")
ggplot(addedtransForPlot, aes(x=SSampled, y=added_transcripts, colour=Panel)) +
geom_line() +
geom_point() +
ggtitle("Number of transcripts added at each sampling \n Threshold > 10")
pdf(file = "/Users/smiharry/Desktop/Saba_Lab/Liver/Graphics/strainNumberEffectFull.threshold10.pdf")
ggplot(avgsem.forPlot, aes(x=SSampled, y=Mean, colour=Panel)) +
geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=.1) +
geom_line() +
geom_point() +
ggtitle("Sampling the full dataset with present threshold of > 10")
dev.off()
pdf(file = "/Users/smiharry/Desktop/Saba_Lab/Liver/Graphics/transcriptsAdded.threshold10.pdf")
ggplot(addedtransForPlot, aes(x=SSampled, y=added_transcripts, colour=Panel)) +
geom_line() +
geom_point() +
ggtitle("Number of transcripts added at each sampling \n Threshold > 10")
dev.off()
source("~/Desktop/Saba_Lab/Liver/code/rsem.read.R")
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/"
dirs2 <- "/Volumes/rn6/quantitation/liverTotalRNA/RI/"
dirlocal <- "~/Desktop/Saba_Lab/"
N <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
tissue <- "Liver"
library(reshape2)
library(ggplot2)
library(RColorBrewer)
## WORKING FROM LOCAL MACHINE LOAD ##
load(file = paste(dirlocal, tissue, "/quantitation/",  "PA.table.RMO", ".Rdata", sep = ""))
load(file = paste(dirlocal, tissue, "/quantitation/",  "PA.table.RMO.100", ".Rdata", sep = ""))
load(file = paste(dirlocal, tissue, "/quantitation/",  "transcriptListAOL", ".Rdata", sep = ""))
sample.and.summarize <- function(PA.table.RMO, tlist, hrdp.num, RI.num, IB.num, RI.num2, IB.num2) {
x <- c("HXB", "BXH","BN", "SHR") # Define RI names
h <- c("HXB", "BXH") # Define RI names with no parents
a <- c("ENSRNOT") # Define prefix that denotes known transcripts
hrdp <- PA.table.RMO[PA.table.RMO$transcript_id %in% tlist, ]
sample_index.hrdp <- c(sample(c(2:44), hrdp.num))
hrdp.sample <- hrdp[, sample_index.hrdp]
hrdp.result <- apply(hrdp.sample, MARGIN = 1, FUN = function(x){
if(any(x == 1.0, na.rm = T)) return(1)
else return(5)
})
## Create RI only dataset
y <- grepl(paste(x, collapse = "|"), colnames(hrdp))
RI.tmp <- hrdp[, y]
RI.tmp <- as.data.frame(cbind(RI.tmp, hrdp$type))
RI <- RI.tmp[, colnames(RI.tmp) != "SHRSP"]
rownames(RI) <- hrdp$transcript_id
colnames(RI)[length(colnames(RI))] <- "type"
sample_index.RI <- c(sample(c(1:32), RI.num))
RI.sample <- RI[, sample_index.RI]
RI_par.result <- apply(RI.sample, MARGIN = 1, FUN = function(x){
if(any(x == 1.0, na.rm = T)) return(1)
else return(5)
})
## Create RI only dataset without parents
f <- grepl(paste(h, collapse = "|"), colnames(hrdp))
RI.tmp.nop <- hrdp[, f]
RI.tmp.nop <- as.data.frame(cbind(RI.tmp.nop, hrdp$type))
rownames(RI.tmp.nop) <- hrdp$transcript_id
colnames(RI.tmp.nop)[length(colnames(RI.tmp.nop))] <- "type"
sample_index.RI.nop <- c(sample(c(1:30), RI.num2))
RI.sample.nop <- RI.tmp.nop[, sample_index.RI.nop]
RI_nopar.result <- apply(RI.sample.nop, MARGIN = 1, FUN = function(x){
if(any(x == 1.0, na.rm = T)) return(1)
else return(5)
})
## Create Classic IB only dataset
z <- !grepl(paste(x, collapse = "|"), colnames(hrdp))
IB.temp <- hrdp[, z]
IB <- as.data.frame(cbind(IB.temp[, -1], RI.tmp[, colnames(RI.tmp) == "SHRSP"]))
colnames(IB)[colnames(IB) == "RI.tmp[, colnames(RI.tmp) == \"SHRSP\"]"] <- "SHRSP"
rownames(IB) <- hrdp$transcript_id
sample_index.IB <- c(sample(c(1:10, 12), IB.num))
IB.sampled <- IB[, sample_index.IB]
IB_nopar.result <- apply(IB.sampled, MARGIN = 1, FUN = function(x){
if(any(x == 1.0, na.rm = T)) return(1)
else return(5)
})
## Create Classic IB only dataset with parents
k <- !grepl(paste(h, collapse = "|"), colnames(hrdp))
IB.temp.par <- hrdp[, k]
rownames(IB.temp.par) <- hrdp$transcript_id
sample_index.IB.par <- c(sample(c(2:14), IB.num2))
IB.sampled.par <- IB.temp.par[, sample_index.IB.par]
IB_par.result <- apply(IB.sampled.par, MARGIN = 1, FUN = function(x){
if(any(x == 1.0, na.rm = T)) return(1)
else return(5)
})
totalcounts <- c(sum(hrdp.result == 1), sum(RI_par.result == 1), sum(IB_nopar.result == 1), sum(RI_nopar.result == 1), sum(IB_par.result == 1))
return(totalcounts)
}
## This function is runs the sample.and.summarize functions over and over essentitally acting as a resampling method. It then extracts the totals generated by the sample.and.summarize function, vectorizes them, and then summarizes them into means, stds, and sems. It then binds these into one final dataset for output. NOTE: the dimensions of the matrix for each summary measure should be 3xthe number of resamplings.
sample.means.sds <- function(m, n, o, p, q){
set.seed(2110)
library(plotrix)
rep <- replicate(100, sample.and.summarize(PA.table.RMO.100, tlist = transcriptListAOL, RI.num = m, hrdp.num = n, IB.num = o, RI.num2 = p, IB.num2 = q))
means <- apply(matrix(as.numeric(rep), 5, 100), 1, FUN = function(x) mean(x))
sds <- apply(matrix(as.numeric(rep), 5, 100), 1, FUN = function(x) sd(x))
sem <- apply(matrix(as.numeric(rep), 5, 100), 1, FUN = function(x) std.error(x))
df.out <- rbind(c("HRDP", "RI.par", "IB.nopar", "RI.nopar", "IB.par"), means, sds, sem, n)
}
## Specify the number of strains to sample for each iteration where j is for RI and i is for classic IBs
m <- c(2, 5, 10, 15, 20, 25, 30, 32, 32, 32)
n <- c(2, 5, 10, 15, 20, 25, 30, 35, 40, 43)
o <- c(2, 5, 10, 11, 11, 11, 11, 11, 11, 11)
p <- c(2, 5, 10, 15, 20, 25, 30, 30, 30, 30)
q <- c(2, 5, 10, 11, 13, 13, 13, 13, 13, 13)
## Specify the number of strains to sample for each iteration for looking at number of transcripts added. These should be equal intervals.
m2 <- c(2, 7, 12, 17, 22, 27, 27, 27, 27) # max 32
n2 <- c(2, 7, 12, 17, 22, 27, 32, 37, 42) # max 43
o2 <- c(2, 7, 7, 7, 7, 7, 7, 7, 7) # max 11
p2 <- c(2, 7, 12, 17, 22, 27, 27, 27, 27) # max 30
q2 <- c(2, 7, 12, 12, 12, 12, 12, 12, 12) # max 13
tlist <- transcriptListAOL
## Using mapply here allows feeding the sample.means.sds function 2 separate strain sample number vectors.
avgsem <- mapply(sample.means.sds, m, n, o, p, q)
sample.means.sds <- function(m, n, o, p, q){
set.seed(2110)
library(plotrix)
rep <- replicate(5, sample.and.summarize(PA.table.RMO.100, tlist = transcriptListAOL, RI.num = m, hrdp.num = n, IB.num = o, RI.num2 = p, IB.num2 = q))
means <- apply(matrix(as.numeric(rep), 5, 5), 1, FUN = function(x) mean(x))
sds <- apply(matrix(as.numeric(rep), 5, 5), 1, FUN = function(x) sd(x))
sem <- apply(matrix(as.numeric(rep), 5, 5), 1, FUN = function(x) std.error(x))
df.out <- rbind(c("HRDP", "RI.par", "IB.nopar", "RI.nopar", "IB.par"), means, sds, sem, n)
}
## Specify the number of strains to sample for each iteration where j is for RI and i is for classic IBs
m <- c(2, 5, 10, 15, 20, 25, 30, 32, 32, 32)
n <- c(2, 5, 10, 15, 20, 25, 30, 35, 40, 43)
o <- c(2, 5, 10, 11, 11, 11, 11, 11, 11, 11)
p <- c(2, 5, 10, 15, 20, 25, 30, 30, 30, 30)
q <- c(2, 5, 10, 11, 13, 13, 13, 13, 13, 13)
## Specify the number of strains to sample for each iteration for looking at number of transcripts added. These should be equal intervals.
m2 <- c(2, 7, 12, 17, 22, 27, 32, 32, 32) # max 32
n2 <- c(2, 7, 12, 17, 22, 27, 32, 37, 42) # max 43
o2 <- c(2, 7, 7, 7, 7, 7, 7, 7, 7) # max 11
p2 <- c(2, 7, 12, 17, 22, 27, 27, 27, 27) # max 30
q2 <- c(2, 7, 12, 12, 12, 12, 12, 12, 12) # max 13
tlist <- transcriptListAOL
## Using mapply here allows feeding the sample.means.sds function 2 separate strain sample number vectors.
avgsem <- mapply(sample.means.sds, m, n, o, p, q)
avgsem2 <- mapply(sample.means.sds, m2, n2, o2, p2, q2)
## reformat avgsem into a ggplot friednly format - For content graph
panels <- c(avgsem[c(1,6,11, 16, 21), ])
avgs <- c(as.numeric(avgsem[c(2,7,12, 17, 22), ]))
sdevs <- c(as.numeric(avgsem[c(3,8,13,18,23), ]))
sems <- c(as.numeric(avgsem[c(4,9,14,19,24), ]))
strainsampled <- c(as.numeric(avgsem[c(5, 10, 15, 20, 25), ]))
## reformat avgsem into a ggplot friednly format - For transcripts added graph
panels2 <- c(avgsem2[c(1,6,11, 16, 21), ])
avgs2 <- c(as.numeric(avgsem2[c(2,7,12, 17, 22), ]))
sdevs2 <- c(as.numeric(avgsem2[c(3,8,13,18,23), ]))
sems2 <- c(as.numeric(avgsem2[c(4,9,14,19,24), ]))
strainsampled2 <- c(as.numeric(avgsem2[c(5, 10, 15, 20, 25), ]))
## Generate dataframe for content plot
avgsem.forPlot <- data.frame(Panel=panels, SSampled=strainsampled, Mean=avgs, SD=sdevs, SEM=sems)
avgsem.forPlot <- avgsem.forPlot[order(avgsem.forPlot$Panel), ]
avgsem.forPlot <- avgsem.forPlot[-c(15:20, 26:30, 38:40, 49,50), ]
avgsem.forPlot[c(14,18,19, 34), 2] <- c(11, 11, 13, 32)
## Generate dataframe for transcripts added plot
avgsem.forPlot2 <- data.frame(Panel=panels2, SSampled=strainsampled2, Mean=avgs2, SD=sdevs2, SEM=sems2)
avgsem.forPlot2 <- avgsem.forPlot2[order(avgsem.forPlot2$Panel), ]
## calculate the number of transcripts added after each sampling
added.trans <- c(0, avgsem.forPlot2[-1,3] - avgsem.forPlot2[-nrow(avgsem.forPlot2),3])
#added.trans[added.trans <= 0] <- 0
avgsem.forPlot2$added_transcripts <- added.trans
avgsem.forPlot2$rownum <- c(1:length(avgsem.forPlot2$Panel))
avgsem.forPlot2
addedtransForPlot <- avgsem.forPlot2[-c(12:18, 22:27, 34:36, 44:45), -c(3,4,5)]
addedtransForPlot$added_transcripts[addedtransForPlot$added_transcripts <= 0] <- 0
addedtransForPlot
ggplot(avgsem.forPlot, aes(x=SSampled, y=Mean, colour=Panel)) +
geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=.1) +
geom_line() +
geom_point() +
ggtitle("Sampling the full dataset with present threshold of > 100")
ggplot(addedtransForPlot, aes(x=SSampled, y=added_transcripts, colour=Panel)) +
geom_line() +
geom_point() +
ggtitle("Number of transcripts added at each sampling \n Threshold > 100")
sample.means.sds <- function(m, n, o, p, q){
set.seed(2110)
library(plotrix)
rep <- replicate(100, sample.and.summarize(PA.table.RMO, tlist = transcriptListAOL, RI.num = m, hrdp.num = n, IB.num = o, RI.num2 = p, IB.num2 = q))
means <- apply(matrix(as.numeric(rep), 5, 100), 1, FUN = function(x) mean(x))
sds <- apply(matrix(as.numeric(rep), 5, 100), 1, FUN = function(x) sd(x))
sem <- apply(matrix(as.numeric(rep), 5, 100), 1, FUN = function(x) std.error(x))
df.out <- rbind(c("HRDP", "RI.par", "IB.nopar", "RI.nopar", "IB.par"), means, sds, sem, n)
}
## Specify the number of strains to sample for each iteration where j is for RI and i is for classic IBs
m <- c(2, 5, 10, 15, 20, 25, 30, 32, 32, 32)
n <- c(2, 5, 10, 15, 20, 25, 30, 35, 40, 43)
o <- c(2, 5, 10, 11, 11, 11, 11, 11, 11, 11)
p <- c(2, 5, 10, 15, 20, 25, 30, 30, 30, 30)
q <- c(2, 5, 10, 11, 13, 13, 13, 13, 13, 13)
## Specify the number of strains to sample for each iteration for looking at number of transcripts added. These should be equal intervals.
m2 <- c(2, 7, 12, 17, 22, 27, 32, 32, 32) # max 32
n2 <- c(2, 7, 12, 17, 22, 27, 32, 37, 42) # max 43
o2 <- c(2, 7, 7, 7, 7, 7, 7, 7, 7) # max 11
p2 <- c(2, 7, 12, 17, 22, 27, 27, 27, 27) # max 30
q2 <- c(2, 7, 12, 12, 12, 12, 12, 12, 12) # max 13
tlist <- transcriptListAOL
## Using mapply here allows feeding the sample.means.sds function 2 separate strain sample number vectors.
avgsem <- mapply(sample.means.sds, m, n, o, p, q)
avgsem2 <- mapply(sample.means.sds, m2, n2, o2, p2, q2)
## reformat avgsem into a ggplot friednly format - For content graph
panels <- c(avgsem[c(1,6,11, 16, 21), ])
avgs <- c(as.numeric(avgsem[c(2,7,12, 17, 22), ]))
sdevs <- c(as.numeric(avgsem[c(3,8,13,18,23), ]))
sems <- c(as.numeric(avgsem[c(4,9,14,19,24), ]))
strainsampled <- c(as.numeric(avgsem[c(5, 10, 15, 20, 25), ]))
## reformat avgsem into a ggplot friednly format - For transcripts added graph
panels2 <- c(avgsem2[c(1,6,11, 16, 21), ])
avgs2 <- c(as.numeric(avgsem2[c(2,7,12, 17, 22), ]))
sdevs2 <- c(as.numeric(avgsem2[c(3,8,13,18,23), ]))
sems2 <- c(as.numeric(avgsem2[c(4,9,14,19,24), ]))
strainsampled2 <- c(as.numeric(avgsem2[c(5, 10, 15, 20, 25), ]))
## Generate dataframe for content plot
avgsem.forPlot <- data.frame(Panel=panels, SSampled=strainsampled, Mean=avgs, SD=sdevs, SEM=sems)
avgsem.forPlot <- avgsem.forPlot[order(avgsem.forPlot$Panel), ]
avgsem.forPlot <- avgsem.forPlot[-c(15:20, 26:30, 38:40, 49,50), ]
avgsem.forPlot[c(14,18,19, 34), 2] <- c(11, 11, 13, 32)
## Generate dataframe for transcripts added plot
avgsem.forPlot2 <- data.frame(Panel=panels2, SSampled=strainsampled2, Mean=avgs2, SD=sdevs2, SEM=sems2)
avgsem.forPlot2 <- avgsem.forPlot2[order(avgsem.forPlot2$Panel), ]
## calculate the number of transcripts added after each sampling
added.trans <- c(0, avgsem.forPlot2[-1,3] - avgsem.forPlot2[-nrow(avgsem.forPlot2),3])
#added.trans[added.trans <= 0] <- 0
avgsem.forPlot2$added_transcripts <- added.trans
avgsem.forPlot2$rownum <- c(1:length(avgsem.forPlot2$Panel))
## make new df for transcripts added
addedtransForPlot <- avgsem.forPlot2[-c(12:18, 22:27, 34:36, 44:45), -c(3,4,5)]
addedtransForPlot$added_transcripts[addedtransForPlot$added_transcripts <= 0] <- 0
#addedtransForPlot[c(10,14,18,19, 34), 2] <- c(42,11, 11, 13, 27)
ggplot(avgsem.forPlot, aes(x=SSampled, y=Mean, colour=Panel)) +
geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=.1) +
geom_line() +
geom_point() +
ggtitle("Sampling the full dataset with present threshold of > 10")
ggplot(addedtransForPlot, aes(x=SSampled, y=added_transcripts, colour=Panel)) +
geom_line() +
geom_point() +
ggtitle("Number of transcripts added at each sampling \n Threshold > 10")
pdf(file = "/Users/smiharry/Desktop/Saba_Lab/Liver/Graphics/strainNumberEffectFull.threshold10.pdf")
ggplot(avgsem.forPlot, aes(x=SSampled, y=Mean, colour=Panel)) +
geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=.1) +
geom_line() +
geom_point() +
ggtitle("Sampling the full dataset with present threshold of > 10")
dev.off()
pdf(file = "/Users/smiharry/Desktop/Saba_Lab/Liver/Graphics/transcriptsAdded.threshold10.pdf")
ggplot(addedtransForPlot, aes(x=SSampled, y=added_transcripts, colour=Panel)) +
geom_line() +
geom_point() +
ggtitle("Number of transcripts added at each sampling \n Threshold > 10")
dev.off()
sample.means.sds <- function(m, n, o, p, q){
set.seed(2110)
library(plotrix)
rep <- replicate(100, sample.and.summarize(PA.table.RMO.100, tlist = transcriptListAOL, RI.num = m, hrdp.num = n, IB.num = o, RI.num2 = p, IB.num2 = q))
means <- apply(matrix(as.numeric(rep), 5, 100), 1, FUN = function(x) mean(x))
sds <- apply(matrix(as.numeric(rep), 5, 100), 1, FUN = function(x) sd(x))
sem <- apply(matrix(as.numeric(rep), 5, 100), 1, FUN = function(x) std.error(x))
df.out <- rbind(c("HRDP", "RI.par", "IB.nopar", "RI.nopar", "IB.par"), means, sds, sem, n)
}
## Specify the number of strains to sample for each iteration where j is for RI and i is for classic IBs
m <- c(2, 5, 10, 15, 20, 25, 30, 32, 32, 32)
n <- c(2, 5, 10, 15, 20, 25, 30, 35, 40, 43)
o <- c(2, 5, 10, 11, 11, 11, 11, 11, 11, 11)
p <- c(2, 5, 10, 15, 20, 25, 30, 30, 30, 30)
q <- c(2, 5, 10, 11, 13, 13, 13, 13, 13, 13)
## Specify the number of strains to sample for each iteration for looking at number of transcripts added. These should be equal intervals.
m2 <- c(2, 7, 12, 17, 22, 27, 32, 32, 32) # max 32
n2 <- c(2, 7, 12, 17, 22, 27, 32, 37, 42) # max 43
o2 <- c(2, 7, 7, 7, 7, 7, 7, 7, 7) # max 11
p2 <- c(2, 7, 12, 17, 22, 27, 27, 27, 27) # max 30
q2 <- c(2, 7, 12, 12, 12, 12, 12, 12, 12) # max 13
tlist <- transcriptListAOL
## Using mapply here allows feeding the sample.means.sds function 2 separate strain sample number vectors.
avgsem <- mapply(sample.means.sds, m, n, o, p, q)
avgsem2 <- mapply(sample.means.sds, m2, n2, o2, p2, q2)
## reformat avgsem into a ggplot friednly format - For content graph
panels <- c(avgsem[c(1,6,11, 16, 21), ])
avgs <- c(as.numeric(avgsem[c(2,7,12, 17, 22), ]))
sdevs <- c(as.numeric(avgsem[c(3,8,13,18,23), ]))
sems <- c(as.numeric(avgsem[c(4,9,14,19,24), ]))
strainsampled <- c(as.numeric(avgsem[c(5, 10, 15, 20, 25), ]))
## reformat avgsem into a ggplot friednly format - For transcripts added graph
panels2 <- c(avgsem2[c(1,6,11, 16, 21), ])
avgs2 <- c(as.numeric(avgsem2[c(2,7,12, 17, 22), ]))
sdevs2 <- c(as.numeric(avgsem2[c(3,8,13,18,23), ]))
sems2 <- c(as.numeric(avgsem2[c(4,9,14,19,24), ]))
strainsampled2 <- c(as.numeric(avgsem2[c(5, 10, 15, 20, 25), ]))
## Generate dataframe for content plot
avgsem.forPlot <- data.frame(Panel=panels, SSampled=strainsampled, Mean=avgs, SD=sdevs, SEM=sems)
avgsem.forPlot <- avgsem.forPlot[order(avgsem.forPlot$Panel), ]
avgsem.forPlot <- avgsem.forPlot[-c(15:20, 26:30, 38:40, 49,50), ]
avgsem.forPlot[c(14,18,19, 34), 2] <- c(11, 11, 13, 32)
## Generate dataframe for transcripts added plot
avgsem.forPlot2 <- data.frame(Panel=panels2, SSampled=strainsampled2, Mean=avgs2, SD=sdevs2, SEM=sems2)
avgsem.forPlot2 <- avgsem.forPlot2[order(avgsem.forPlot2$Panel), ]
## calculate the number of transcripts added after each sampling
added.trans <- c(0, avgsem.forPlot2[-1,3] - avgsem.forPlot2[-nrow(avgsem.forPlot2),3])
#added.trans[added.trans <= 0] <- 0
avgsem.forPlot2$added_transcripts <- added.trans
avgsem.forPlot2$rownum <- c(1:length(avgsem.forPlot2$Panel))
## make new df for transcripts added
addedtransForPlot <- avgsem.forPlot2[-c(12:18, 22:27, 34:36, 44:45), -c(3,4,5)]
addedtransForPlot$added_transcripts[addedtransForPlot$added_transcripts <= 0] <- 0
#addedtransForPlot[c(10,14,18,19, 34), 2] <- c(42,11, 11, 13, 27)
ggplot(avgsem.forPlot, aes(x=SSampled, y=Mean, colour=Panel)) +
geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=.1) +
geom_line() +
geom_point() +
ggtitle("Sampling the full dataset with present threshold of > 100")
ggplot(addedtransForPlot, aes(x=SSampled, y=added_transcripts, colour=Panel)) +
geom_line() +
geom_point() +
ggtitle("Number of transcripts added at each sampling \n Threshold > 100")
pdf(file = "/Users/smiharry/Desktop/Saba_Lab/Liver/Graphics/strainNumberEffectFull.threshold100.pdf")
ggplot(avgsem.forPlot, aes(x=SSampled, y=Mean, colour=Panel)) +
geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=.1) +
geom_line() +
geom_point() +
ggtitle("Sampling the full dataset with present threshold of > 100")
dev.off()
pdf(file = "/Users/smiharry/Desktop/Saba_Lab/Liver/Graphics/transcriptsAdded.threshold100.pdf")
ggplot(addedtransForPlot, aes(x=SSampled, y=added_transcripts, colour=Panel)) +
geom_line() +
geom_point() +
ggtitle("Number of transcripts added at each sampling \n Threshold > 100")
dev.off()
pres.abs.table
