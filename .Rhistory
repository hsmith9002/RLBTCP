if(h==N[1]) cntsMerged = cntsT
if(h!=N[1]) cntsMerged = merge(cntsMerged,cntsT,by="transcript_id")
## save cnts
save(list = c("cntsMerged"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
} else{
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".isoforms.results",sep=""),sep="\t",header=TRUE)
y = data.frame(transcript_id = x$transcript_id, i=x$TPM)
colnames(y)[2] = i
if(i==sampleID[1]) cntsT = y
if(i!=sampleID[1]) cntsT = merge(cntsT,y,by="transcript_id")
}
colnames(cntsT)[-1] <- paste(colnames(cntsT)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged = cntsT
if(h!=N[1]) cntsMerged = merge(cntsMerged,cntsT,by="transcript_id")
## save cnts
save(list = c("cntsMerged"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
}
}
else {
if(qtype == "counts") {
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".genes.results",sep=""),sep="\t",header=TRUE)
y = data.frame(gene_id = x$gene_id, i=x$expected_count)
colnames(y)[2] = i
if(i==sampleID[1]) cntsG = y
if(i!=sampleID[1]) cntsG = merge(cntsG,y,by="gene_id")
}
colnames(cntsG)[-1] <- paste(colnames(cntsG)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged.gene = cntsG
if(h!=N[1]) cntsMerged.gene = merge(cntsMerged.gene,cntsG,by="gene_id")
## save cnts
save(list = c("cntsMerged.gene"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
} else{
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".genes.results",sep=""),sep="\t",header=TRUE)
y = data.frame(gene_id = x$gene_id, i=x$TPM)
colnames(y)[2] = i
if(i==sampleID[1]) cntsG = y
if(i!=sampleID[1]) cntsG = merge(cntsG,y,by="gene_id")
}
colnames(cntsG)[-1] <- paste(colnames(cntsG)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged.gene = cntsG
if(h!=N[1]) cntsMerged.gene = merge(cntsMerged.gene,cntsG,by="gene_id")
## save cnts
save(list = c("cntsMerged.gene"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
}
}
}
}
rsem.read.iso.test <- function(dir, dirs2, tissue, N, qtype, level, filename) {
for(h in unique(N)) {
## Define "not in" function
'%!in%' <- function(x,y)!('%in%'(x,y))
## Read in batch file list and extract unique strain names with replicate number attached
flist <- as.character(read.table(file = paste(dir, "metadata/", tissue, "/", "RSEM.", "batch", h, ".filelist.txt", sep = ""), header = F)$V1)
sampleID <- unique(unlist(lapply(strsplit(flist,split=".",fixed=TRUE),function(a) a[1])))
sampleID <- sampleID[which(sampleID %!in% c("prep", paste("prepL", h, sep = ""), "rsem", "RSEM", paste("rsemp", c(1:10), sep = ""), paste("rsemb", c(1:10), sep = ""), paste("rsem", c(1:10), sep = ""), "rsem_redo", "new_rsem", paste("rsemL", N, sep = "")))]
fcheck <- rep(NA, length(sampleID))
for(v in 1:length(sampleID)){
if(paste(sampleID[v], ".", "isoforms.results", sep = "") %in% flist) {fcheck[v] = 1.0} else {fcheck[v] = 0.0}
}
if(sum(fcheck) != length(sampleID)) {stop(paste('There is no .results file present in directory for one of the strains: check batch:', N, sep = ""))}
if(level == "transcript"){
if(qtype == "counts") {
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".isoforms.results",sep=""),sep="\t",header=TRUE)
y = data.frame(transcript_id = x$transcript_id, i=x$expected_count)
colnames(y)[2] = i
if(i==sampleID[1]) cntsT = y
if(i!=sampleID[1]) cntsT = merge(cntsT,y,by="transcript_id")
}
colnames(cntsT)[-1] <- paste(colnames(cntsT)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged = cntsT
if(h!=N[1]) cntsMerged = merge(cntsMerged,cntsT,by="transcript_id")
## save cnts
save(list = c("cntsMerged"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
} else{
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".isoforms.results",sep=""),sep="\t",header=TRUE)
y = data.frame(transcript_id = x$transcript_id, i=x$TPM)
colnames(y)[2] = i
if(i==sampleID[1]) cntsT = y
if(i!=sampleID[1]) cntsT = merge(cntsT,y,by="transcript_id")
}
colnames(cntsT)[-1] <- paste(colnames(cntsT)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged = cntsT
if(h!=N[1]) cntsMerged = merge(cntsMerged,cntsT,by="transcript_id")
## save cnts
save(list = c("cntsMerged"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
}
}
else {
if(qtype == "counts") {
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".genes.results",sep=""),sep="\t",header=TRUE)
y = data.frame(gene_id = x$gene_id, i=x$expected_count)
colnames(y)[2] = i
if(i==sampleID[1]) cntsG = y
if(i!=sampleID[1]) cntsG = merge(cntsG,y,by="gene_id")
}
colnames(cntsG)[-1] <- paste(colnames(cntsG)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged.gene = cntsG
if(h!=N[1]) cntsMerged.gene = merge(cntsMerged.gene,cntsG,by="gene_id")
## save cnts
save(list = c("cntsMerged.gene"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
} else{
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".genes.results",sep=""),sep="\t",header=TRUE)
y = data.frame(gene_id = x$gene_id, i=x$TPM)
colnames(y)[2] = i
if(i==sampleID[1]) cntsG = y
if(i!=sampleID[1]) cntsG = merge(cntsG,y,by="gene_id")
}
colnames(cntsG)[-1] <- paste(colnames(cntsG)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged.gene = cntsG
if(h!=N[1]) cntsMerged.gene = merge(cntsMerged.gene,cntsG,by="gene_id")
## save cnts
save(list = c("cntsMerged.gene"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
}
}
}
}
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/"
dirs2 <- "/Volumes/rn6/quantitation/brainTotalRNA/RI/"
dirlocal <- "~/Desktop/Saba_Lab/"
N <- c(3, 4, 5, 6, 7, 8, 9, 10)
tissue <- "Brain"
qtype <- "counts"
rsem.read.iso.test(dir, dirs2, tissue, N, qtype = qtype, level = "isoform", filename = filename)
rsem.read.iso.test <- function(dir, dirs2, tissue, N, qtype, level, filename) {
for(h in unique(N)) {
## Define "not in" function
'%!in%' <- function(x,y)!('%in%'(x,y))
## Read in batch file list and extract unique strain names with replicate number attached
flist <- as.character(read.table(file = paste(dir, "metadata/", tissue, "/", "RSEM.", "batch", h, ".filelist.txt", sep = ""), header = F)$V1)
sampleID <- unique(unlist(lapply(strsplit(flist,split=".",fixed=TRUE),function(a) a[1])))
sampleID <- sampleID[which(sampleID %!in% c("prep", paste("prepL", h, sep = ""), "rsem", "RSEM", paste("rsemp", c(1:10), sep = ""), paste("rsemb", c(1:10), sep = ""), paste("rsem", c(1:10), sep = ""), "rsem_redo", "new_rsem", paste("rsemL", N, sep = "")))]
}
fcheck <- rep(NA, length(sampleID))
for(v in 1:length(sampleID)){
if(paste(sampleID[v], ".", "isoforms.results", sep = "") %in% flist) {fcheck[v] = 1.0} else {fcheck[v] = 0.0}
}
if(sum(fcheck) != length(sampleID)) {stop(paste('There is no .results file present in directory for one of the strains: check batch:', N, sep = ""))}
for(h in unique(N)) {
## Define "not in" function
'%!in%' <- function(x,y)!('%in%'(x,y))
## Read in batch file list and extract unique strain names with replicate number attached
flist <- as.character(read.table(file = paste(dir, "metadata/", tissue, "/", "RSEM.", "batch", h, ".filelist.txt", sep = ""), header = F)$V1)
sampleID <- unique(unlist(lapply(strsplit(flist,split=".",fixed=TRUE),function(a) a[1])))
sampleID <- sampleID[which(sampleID %!in% c("prep", paste("prepL", h, sep = ""), "rsem", "RSEM", paste("rsemp", c(1:10), sep = ""), paste("rsem", c(1:10), sep = ""), "rsem_redo", "new_rsem", paste("rsemL", N, sep = "")))]
if(level == "transcript"){
if(qtype == "counts") {
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".isoforms.results",sep=""),sep="\t",header=TRUE)
y = data.frame(transcript_id = x$transcript_id, i=x$expected_count)
colnames(y)[2] = i
if(i==sampleID[1]) cntsT = y
if(i!=sampleID[1]) cntsT = merge(cntsT,y,by="transcript_id")
}
colnames(cntsT)[-1] <- paste(colnames(cntsT)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged = cntsT
if(h!=N[1]) cntsMerged = merge(cntsMerged,cntsT,by="transcript_id")
## save cnts
save(list = c("cntsMerged"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
} else{
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".isoforms.results",sep=""),sep="\t",header=TRUE)
y = data.frame(transcript_id = x$transcript_id, i=x$TPM)
colnames(y)[2] = i
if(i==sampleID[1]) cntsT = y
if(i!=sampleID[1]) cntsT = merge(cntsT,y,by="transcript_id")
}
colnames(cntsT)[-1] <- paste(colnames(cntsT)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged = cntsT
if(h!=N[1]) cntsMerged = merge(cntsMerged,cntsT,by="transcript_id")
## save cnts
save(list = c("cntsMerged"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
}
}
else {
if(qtype == "counts") {
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".genes.results",sep=""),sep="\t",header=TRUE)
y = data.frame(gene_id = x$gene_id, i=x$expected_count)
colnames(y)[2] = i
if(i==sampleID[1]) cntsG = y
if(i!=sampleID[1]) cntsG = merge(cntsG,y,by="gene_id")
}
colnames(cntsG)[-1] <- paste(colnames(cntsG)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged.gene = cntsG
if(h!=N[1]) cntsMerged.gene = merge(cntsMerged.gene,cntsG,by="gene_id")
## save cnts
save(list = c("cntsMerged.gene"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
} else{
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".genes.results",sep=""),sep="\t",header=TRUE)
y = data.frame(gene_id = x$gene_id, i=x$TPM)
colnames(y)[2] = i
if(i==sampleID[1]) cntsG = y
if(i!=sampleID[1]) cntsG = merge(cntsG,y,by="gene_id")
}
colnames(cntsG)[-1] <- paste(colnames(cntsG)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged.gene = cntsG
if(h!=N[1]) cntsMerged.gene = merge(cntsMerged.gene,cntsG,by="gene_id")
## save cnts
save(list = c("cntsMerged.gene"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
}
}
}
}
rsem.read.iso.test(dir, dirs2, tissue, N, qtype = qtype, level = "isoform", filename = filename)
rsem.read.iso.test <- function(dir, dirs2, tissue, N, qtype, level, filename) {
for(h in unique(N)) {
## Define "not in" function
'%!in%' <- function(x,y)!('%in%'(x,y))
## Read in batch file list and extract unique strain names with replicate number attached
flist <- as.character(read.table(file = paste(dir, "metadata/", tissue, "/", "RSEM.", "batch", h, ".filelist.txt", sep = ""), header = F)$V1)
sampleID <- unique(unlist(lapply(strsplit(flist,split=".",fixed=TRUE),function(a) a[1])))
sampleID <- sampleID[which(sampleID %!in% c("prep", paste("prepL", h, sep = ""), "rsem", "RSEM", paste("rsemp", c(1:10), sep = ""), paste("rsemb", c(1:10), sep = ""), paste("rsem", c(1:10), sep = ""), "rsem_redo", "new_rsem", paste("rsemL", N, sep = "")))]
}
fcheck <- rep(NA, length(sampleID))
for(v in 1:length(sampleID)){
if(paste(sampleID[v], ".", "isoforms.results", sep = "") %in% flist) {fcheck[v] = 1.0} else {fcheck[v] = 0.0}
}
if(sum(fcheck) != length(sampleID)) {stop(paste('There is no .results file present in directory for one of the strains: check batch:', N, sep = ""))}
else {
for(h in unique(N)) {
## Define "not in" function
'%!in%' <- function(x,y)!('%in%'(x,y))
## Read in batch file list and extract unique strain names with replicate number attached
flist <- as.character(read.table(file = paste(dir, "metadata/", tissue, "/", "RSEM.", "batch", h, ".filelist.txt", sep = ""), header = F)$V1)
sampleID <- unique(unlist(lapply(strsplit(flist,split=".",fixed=TRUE),function(a) a[1])))
sampleID <- sampleID[which(sampleID %!in% c("prep", paste("prepL", h, sep = ""), "rsem", "RSEM", paste("rsemp", c(1:10), sep = ""), paste("rsem", c(1:10), sep = ""), "rsem_redo", "new_rsem", paste("rsemL", N, sep = "")))]
if(level == "transcript"){
if(qtype == "counts") {
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".isoforms.results",sep=""),sep="\t",header=TRUE)
y = data.frame(transcript_id = x$transcript_id, i=x$expected_count)
colnames(y)[2] = i
if(i==sampleID[1]) cntsT = y
if(i!=sampleID[1]) cntsT = merge(cntsT,y,by="transcript_id")
}
colnames(cntsT)[-1] <- paste(colnames(cntsT)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged = cntsT
if(h!=N[1]) cntsMerged = merge(cntsMerged,cntsT,by="transcript_id")
## save cnts
save(list = c("cntsMerged"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
} else{
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".isoforms.results",sep=""),sep="\t",header=TRUE)
y = data.frame(transcript_id = x$transcript_id, i=x$TPM)
colnames(y)[2] = i
if(i==sampleID[1]) cntsT = y
if(i!=sampleID[1]) cntsT = merge(cntsT,y,by="transcript_id")
}
colnames(cntsT)[-1] <- paste(colnames(cntsT)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged = cntsT
if(h!=N[1]) cntsMerged = merge(cntsMerged,cntsT,by="transcript_id")
## save cnts
save(list = c("cntsMerged"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
}
}
else {
if(qtype == "counts") {
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".genes.results",sep=""),sep="\t",header=TRUE)
y = data.frame(gene_id = x$gene_id, i=x$expected_count)
colnames(y)[2] = i
if(i==sampleID[1]) cntsG = y
if(i!=sampleID[1]) cntsG = merge(cntsG,y,by="gene_id")
}
colnames(cntsG)[-1] <- paste(colnames(cntsG)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged.gene = cntsG
if(h!=N[1]) cntsMerged.gene = merge(cntsMerged.gene,cntsG,by="gene_id")
## save cnts
save(list = c("cntsMerged.gene"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
} else{
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".genes.results",sep=""),sep="\t",header=TRUE)
y = data.frame(gene_id = x$gene_id, i=x$TPM)
colnames(y)[2] = i
if(i==sampleID[1]) cntsG = y
if(i!=sampleID[1]) cntsG = merge(cntsG,y,by="gene_id")
}
colnames(cntsG)[-1] <- paste(colnames(cntsG)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged.gene = cntsG
if(h!=N[1]) cntsMerged.gene = merge(cntsMerged.gene,cntsG,by="gene_id")
## save cnts
save(list = c("cntsMerged.gene"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
}
}
}
}
}
rsem.read.iso.test(dir, dirs2, tissue, N, qtype = qtype, level = "isoform", filename = filename)
for(h in unique(N)) {
## Define "not in" function
'%!in%' <- function(x,y)!('%in%'(x,y))
## Read in batch file list and extract unique strain names with replicate number attached
flist <- as.character(read.table(file = paste(dir, "metadata/", tissue, "/", "RSEM.", "batch", h, ".filelist.txt", sep = ""), header = F)$V1)
sampleID <- unique(unlist(lapply(strsplit(flist,split=".",fixed=TRUE),function(a) a[1])))
sampleID <- sampleID[which(sampleID %!in% c("prep", paste("prepL", h, sep = ""), "rsem", "RSEM", paste("rsemp", c(1:10), sep = ""), paste("rsemb", c(1:10), sep = ""), paste("rsem", c(1:10), sep = ""), "rsem_redo", "new_rsem", paste("rsemL", N, sep = "")))]
}
fcheck <- rep(NA, length(sampleID))
for(v in 1:length(sampleID)){
if(paste(sampleID[v], ".", "isoforms.results", sep = "") %in% flist) {fcheck[v] = 1.0} else {fcheck[v] = 0.0}
}
if(sum(fcheck) != length(sampleID)) {stop(paste('There is no .results file present in directory for one of the strains: check batch:', N, sep = ""))}
rsem.read.iso.test <- function(dir, dirs2, tissue, N, qtype, level, filename) {
for(h in unique(N)) {
## Define "not in" function
'%!in%' <- function(x,y)!('%in%'(x,y))
## Read in batch file list and extract unique strain names with replicate number attached
flist <- as.character(read.table(file = paste(dir, "metadata/", tissue, "/", "RSEM.", "batch", h, ".filelist.txt", sep = ""), header = F)$V1)
sampleID <- unique(unlist(lapply(strsplit(flist,split=".",fixed=TRUE),function(a) a[1])))
sampleID <- sampleID[which(sampleID %!in% c("prep", paste("prepL", h, sep = ""), "rsem", "RSEM", paste("rsemp", c(1:10), sep = ""), paste("rsemb", c(1:10), sep = ""), paste("rsem", c(1:10), sep = ""), "rsem_redo", "new_rsem", paste("rsemL", N, sep = "")))]
fcheck <- rep(NA, length(sampleID))
for(v in 1:length(sampleID)){
if(paste(sampleID[v], ".", "isoforms.results", sep = "") %in% flist) {fcheck[v] = 1.0} else {fcheck[v] = 0.0}
}
}
if(sum(fcheck) != length(sampleID)) {stop(paste('There is no .results file present in directory for one of the strains: check batch:', N, sep = ""))}
else {
for(h in unique(N)) {
## Define "not in" function
'%!in%' <- function(x,y)!('%in%'(x,y))
## Read in batch file list and extract unique strain names with replicate number attached
flist <- as.character(read.table(file = paste(dir, "metadata/", tissue, "/", "RSEM.", "batch", h, ".filelist.txt", sep = ""), header = F)$V1)
sampleID <- unique(unlist(lapply(strsplit(flist,split=".",fixed=TRUE),function(a) a[1])))
sampleID <- sampleID[which(sampleID %!in% c("prep", paste("prepL", h, sep = ""), "rsem", "RSEM", paste("rsemp", c(1:10), sep = ""), paste("rsem", c(1:10), sep = ""), "rsem_redo", "new_rsem", paste("rsemL", N, sep = "")))]
if(level == "transcript"){
if(qtype == "counts") {
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".isoforms.results",sep=""),sep="\t",header=TRUE)
y = data.frame(transcript_id = x$transcript_id, i=x$expected_count)
colnames(y)[2] = i
if(i==sampleID[1]) cntsT = y
if(i!=sampleID[1]) cntsT = merge(cntsT,y,by="transcript_id")
}
colnames(cntsT)[-1] <- paste(colnames(cntsT)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged = cntsT
if(h!=N[1]) cntsMerged = merge(cntsMerged,cntsT,by="transcript_id")
## save cnts
save(list = c("cntsMerged"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
} else{
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".isoforms.results",sep=""),sep="\t",header=TRUE)
y = data.frame(transcript_id = x$transcript_id, i=x$TPM)
colnames(y)[2] = i
if(i==sampleID[1]) cntsT = y
if(i!=sampleID[1]) cntsT = merge(cntsT,y,by="transcript_id")
}
colnames(cntsT)[-1] <- paste(colnames(cntsT)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged = cntsT
if(h!=N[1]) cntsMerged = merge(cntsMerged,cntsT,by="transcript_id")
## save cnts
save(list = c("cntsMerged"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
}
}
else {
if(qtype == "counts") {
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".genes.results",sep=""),sep="\t",header=TRUE)
y = data.frame(gene_id = x$gene_id, i=x$expected_count)
colnames(y)[2] = i
if(i==sampleID[1]) cntsG = y
if(i!=sampleID[1]) cntsG = merge(cntsG,y,by="gene_id")
}
colnames(cntsG)[-1] <- paste(colnames(cntsG)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged.gene = cntsG
if(h!=N[1]) cntsMerged.gene = merge(cntsMerged.gene,cntsG,by="gene_id")
## save cnts
save(list = c("cntsMerged.gene"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
} else{
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".genes.results",sep=""),sep="\t",header=TRUE)
y = data.frame(gene_id = x$gene_id, i=x$TPM)
colnames(y)[2] = i
if(i==sampleID[1]) cntsG = y
if(i!=sampleID[1]) cntsG = merge(cntsG,y,by="gene_id")
}
colnames(cntsG)[-1] <- paste(colnames(cntsG)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged.gene = cntsG
if(h!=N[1]) cntsMerged.gene = merge(cntsMerged.gene,cntsG,by="gene_id")
## save cnts
save(list = c("cntsMerged.gene"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
}
}
}
}
}
rsem.read.iso.test(dir, dirs2, tissue, N, qtype = qtype, level = "isoform", filename = filename)
for(h in unique(N)) {
## Define "not in" function
'%!in%' <- function(x,y)!('%in%'(x,y))
## Read in batch file list and extract unique strain names with replicate number attached
flist <- as.character(read.table(file = paste(dir, "metadata/", tissue, "/", "RSEM.", "batch", h, ".filelist.txt", sep = ""), header = F)$V1)
sampleID <- unique(unlist(lapply(strsplit(flist,split=".",fixed=TRUE),function(a) a[1])))
sampleID <- sampleID[which(sampleID %!in% c("prep", paste("prepL", h, sep = ""), "rsem", "RSEM", paste("rsemp", c(1:10), sep = ""), paste("rsemb", c(1:10), sep = ""), paste("rsem", c(1:10), sep = ""), "rsem_redo", "new_rsem", paste("rsemL", N, sep = "")))]
fcheck <- rep(NA, length(sampleID))
for(v in 1:length(sampleID)){
if(paste(sampleID[v], ".", "isoforms.results", sep = "") %in% flist) {fcheck[v] = 1.0} else {fcheck[v] = 0.0}
}
}
if(sum(fcheck) != length(sampleID)) {stop(paste('There is no .results file present in directory for one of the strains: check batch:', N, sep = ""))}
for(h in unique(N)) {
## Define "not in" function
'%!in%' <- function(x,y)!('%in%'(x,y))
## Read in batch file list and extract unique strain names with replicate number attached
flist <- as.character(read.table(file = paste(dir, "metadata/", tissue, "/", "RSEM.", "batch", h, ".filelist.txt", sep = ""), header = F)$V1)
sampleID <- unique(unlist(lapply(strsplit(flist,split=".",fixed=TRUE),function(a) a[1])))
sampleID <- sampleID[which(sampleID %!in% c("prep", paste("prepL", h, sep = ""), "rsem", "RSEM", paste("rsemp", c(1:10), sep = ""), paste("rsemb", c(1:10), sep = ""), paste("rsem", c(1:10), sep = ""), "rsem_redo", "new_rsem", paste("rsemL", N, sep = "")))]
fcheck <- rep(NA, length(sampleID))
for(v in 1:length(sampleID)){
if(paste(sampleID[v], ".", "isoforms.results", sep = "") %in% flist) {fcheck[v] = 1.0} else {fcheck[v] = 0.0}
}
if(sum(fcheck) != length(sampleID)) {stop(paste('There is no .results file present in directory for one of the strains: check batch:', N, sep = ""))}
}
for(h in unique(N)) {
## Define "not in" function
'%!in%' <- function(x,y)!('%in%'(x,y))
## Read in batch file list and extract unique strain names with replicate number attached
flist <- as.character(read.table(file = paste(dir, "metadata/", tissue, "/", "RSEM.", "batch", h, ".filelist.txt", sep = ""), header = F)$V1)
sampleID <- unique(unlist(lapply(strsplit(flist,split=".",fixed=TRUE),function(a) a[1])))
sampleID <- sampleID[which(sampleID %!in% c("prep", paste("prepL", h, sep = ""), "rsem", "RSEM", paste("rsemp", c(1:10), sep = ""), paste("rsemb", c(1:10), sep = ""), paste("rsem", c(1:10), sep = ""), "rsem_redo", "new_rsem", paste("rsemL", N, sep = "")))]
}
sampleID
fcheck <- rep(NA, length(sampleID))
for(v in 1:length(sampleID)){
if(paste(sampleID[v], ".", "isoforms.results", sep = "") %in% flist) {fcheck[v] = 1.0} else {fcheck[v] = 0.0}
}
if(sum(fcheck) != length(sampleID)) {stop(paste('There is no .results file present in directory for one of the strains: check batch:', N, sep = ""))}
## Source rsem.read
source("/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/Transcript_Reconstruction/code/rsem.read.R")
## WORKING FROM LOCAL MACHINE SOURCE ##
source("~/Desktop/Saba_Lab/Liver/code/rsem.read.R")
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/"
dirlocal <- "~/Desktop/Saba_Lab/"
N <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
tissue <- "Liver"
load(file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  "cnts.Merged", ".Rdata", sep = ""))
sample.level.content <- cntsMerged.norep[, -1] >= 10
View(sample.level.content)
View(cntsMerged.norep)
sample.level.content.lv <- data.frame(cntsMerged.norep$transcript_id, sample.level.content)
View(sample.level.content.lv)
sample.level.content.lv <- data.frame(transcript_id = cntsMerged.norep$transcript_id, sample.level.content)
sample.level.content.lv <- data.frame(transcript_id = cntsMerged.norep$transcript_id, as.integer(sample.level.content))
sample.level.content.lv <- data.frame(transcript_id = cntsMerged.norep$transcript_id, sample.level.content*1))
sample.level.content.lv <- data.frame(transcript_id = cntsMerged.norep$transcript_id, sample.level.content*1)
save(sample.level.content.lv, file = "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/Transcript_Reconstruction/Liver/quantitation/patable.samplelevel.lv.RData")
library("devtools")
library(roxygen2)
setwd("/Users/smiharry/Desktop/Saba_Lab/RLBTCP")
create("stcr")
setwd("./stcr")
document()
setwd("..")
install("stcr")
library(stcr)
?rsem.read.iso
?rsem.read.gene
?rm.tech.rep
?pres.abs.table
?sep.panel
?sep.panel.sample
?content.for.plot
?track.position.table
?track.position.bytransc
?summarize.content
?contentQC
