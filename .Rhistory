options(stringsAsFactors = FALSE)
dirs = "/Volumes/smiharry/Saba_Lab/RNA-Seq/Brain-Epilepsy/"
bkgrd <- read.table(file=paste(dirs,"data/geneSymbolsForCombinedBkgrd.2017-08-07.txt",sep=""),sep="\t",header=FALSE)$V1
de <- read.table(file=paste(dirs,"data/geneSymbolsForCombinedDE.2017-08-07.txt",sep=""),sep="\t",header=FALSE)$V1
## double check that all differentially expressed genes are in background
sum(!(de %in% bkgrd))
##Read in KEGG tables and make copies for reproducibility
KEGG_pathways <- read.table(file="http://rest.kegg.jp/list/pathway/hsa",fill=TRUE,sep="\t",quote="")
write.table(KEGG_pathways, file = paste(dirs, "data/keggAPI_pathways.txt", sep = ""), row.names = FALSE, quote = FALSE, col.names = TRUE, sep = "\t")
KEGG_pathways <- read.table(file = paste(dirs, "data/keggAPI_pathways.txt", sep = ""))
?write.table
write.table(KEGG_pathways, paste(dirs, "data/keggAPI_pathways.txt", sep = ""), row.names = FALSE, col.names = TRUE, sep = ">")
write.table(KEGG_pathways, paste(dirs, "data/keggAPI_pathways.txt", sep = ""), row.names = FALSE, col.names = TRUE, quote = FALSE, sep = ">")
KEGG_pathways <- read.table(file = paste(dirs, "data/keggAPI_pathways.txt", sep = ">"))
KEGG_pathways <- read.table(file = paste(dirs, "data/keggAPI_pathways.txt", sep = ""), header = TRUE, sep = ">")
write.table(KEGG_pathways, paste(dirs, "data/keggAPI_pathways.txt", sep = ""), row.names = TRUE, col.names = TRUE, quote = FALSE, sep = ">")
KEGG_pathways <- read.table(file="http://rest.kegg.jp/list/pathway/hsa",fill=TRUE,sep="\t",quote="")
write.table(KEGG_pathways, paste(dirs, "data/keggAPI_pathways.txt", sep = ""), row.names = TRUE, col.names = TRUE, quote = FALSE, sep = ">")
harry <- read.table(file = paste(dirs, "data/keggAPI_pathways.txt", sep = ""), header = TRUE, sep = ">")
View(harry)
rownames(harry)
harry <- read.table(file = paste(dirs, "data/keggAPI_pathways.txt", sep = ""), header = TRUE, sep = ">", fill = TRUE)
View(harry)
harry <- read.table(file = paste(dirs, "data/keggAPI_pathways.txt", sep = ""), header = TRUE, sep = ">")
rm(list=ls())
options(stringsAsFactors = FALSE)
dirs = "/Volumes/smiharry/Saba_Lab/RNA-Seq/Brain-Epilepsy/"
bkgrd <- read.table(file=paste(dirs,"data/geneSymbolsForCombinedBkgrd.2017-08-07.txt",sep=""),sep="\t",header=FALSE)$V1
de <- read.table(file=paste(dirs,"data/geneSymbolsForCombinedDE.2017-08-07.txt",sep=""),sep="\t",header=FALSE)$V1
## double check that all differentially expressed genes are in background
sum(!(de %in% bkgrd))
##Read in KEGG tables and make copies for reproducibility
KEGG_pathways <- read.table(file="http://rest.kegg.jp/list/pathway/hsa",fill=TRUE,sep="\t",quote="")
KEGG_pathways$V3 <- unlist(lapply(strsplit(KEGG_pathways$V2, "-", fixed = T), function(x) x[1]))
KEGG_pathways <- KEGG_pathways[, c(1, 3)]
##Read in KEGG tables and make copies for reproducibility
KEGG_pathways <- read.table(file="http://rest.kegg.jp/list/pathway/hsa",fill=TRUE,sep="\t",quote="")
KEGG_pathways$V3 <- unlist(lapply(strsplit(KEGG_pathways$V2, " - ", fixed = T), function(x) x[1]))
KEGG_pathways <- KEGG_pathways[, c(1, 3)]
##Read in KEGG tables and make copies for reproducibility
KEGG_pathways <- read.table(file="http://rest.kegg.jp/list/pathway/hsa",fill=TRUE,sep="\t",quote="")
KEGG_pathways$V3 <- unlist(lapply(strsplit(KEGG_pathways$V2, " - ", fixed = T), function(x) x[1]))
KEGG_pathways <- KEGG_pathways[, c(1, 3)]
write.table(KEGG_pathways, paste(dirs, "data/keggAPI_pathways.txt", sep = ""), row.names = TRUE, col.names = TRUE, quote = FALSE, sep = "\t")
write.table(KEGG_pathways, paste(dirs, "data/keggAPI_pathways.txt", sep = ""), row.names = FALSE, col.names = TRUE, quote = FALSE, sep = "\t")
harry <- read.table(file = paste(dirs, "data/keggAPI_pathways.txt", sep = ""), header = TRUE, sep = "\t")
View(harry)
##Read in KEGG tables and make copies for reproducibility
KEGG_pathways <- read.table(file="http://rest.kegg.jp/list/pathway/hsa",fill=TRUE,sep="\t",quote="")
KEGG_pathways$V3 <- unlist(lapply(strsplit(KEGG_pathways$V2, " - ", fixed = T), function(x) x[1]))
KEGG_pathways <- KEGG_pathways[, c(1, 3)]
write.table(KEGG_pathways, paste(dirs, "data/keggAPI_pathways.txt", sep = ""), row.names = FALSE, col.names = TRUE, quote = FALSE, sep = "@")
harry <- read.table(file = paste(dirs, "data/keggAPI_pathways.txt", sep = ""), header = TRUE, sep = "@")
##Read in KEGG tables and make copies for reproducibility
KEGG_pathways <- read.table(file="http://rest.kegg.jp/list/pathway/hsa",fill=TRUE,sep="\t",quote="")
KEGG_pathways$V3 <- unlist(lapply(strsplit(KEGG_pathways$V2, " - ", fixed = T), function(x) x[1]))
KEGG_pathways <- KEGG_pathways[, c(1, 3)]
write.table(KEGG_pathways, paste(dirs, "data/keggAPI_pathways.txt", sep = ""), row.names = FALSE, col.names = TRUE, quote = FALSE, sep = "\t")
harry <- read.table(file = paste(dirs, "data/keggAPI_pathways.txt", sep = ""), header = TRUE, sep = "\t")
save(KEGG_pathways, file = paste(dirs, "data/keggAPI_pathways.RData-08-21-17", sep = ""))
KEGG_pathways <- load(file = paste(dirs, "data/keggAPI_pathways.RData-08-21-17", sep = ""))
KEGG_pathways <- read.table(file="http://rest.kegg.jp/list/pathway/hsa",fill=TRUE,sep="\t",quote="")
save(KEGG_pathways, file = paste(dirs, "data/keggAPI_pathways.RData-08-21-17", sep = ""))
rm(list=ls())
options(stringsAsFactors = FALSE)
dirs = "/Volumes/smiharry/Saba_Lab/RNA-Seq/Brain-Epilepsy/"
bkgrd <- read.table(file=paste(dirs,"data/geneSymbolsForCombinedBkgrd.2017-08-07.txt",sep=""),sep="\t",header=FALSE)$V1
de <- read.table(file=paste(dirs,"data/geneSymbolsForCombinedDE.2017-08-07.txt",sep=""),sep="\t",header=FALSE)$V1
## double check that all differentially expressed genes are in background
sum(!(de %in% bkgrd))
##Read in KEGG tables and make copies for reproducibility
KEGG_pathways <- read.table(file="http://rest.kegg.jp/list/pathway/hsa",fill=TRUE,sep="\t",quote="")
colnames(KEGG_pathways) <- c("KEGG.pathway.ID", "Pathway")
save(KEGG_pathways, file = paste(dirs, "data/keggAPI_pathways.RData-08-21-17", sep = ""))
KEGG_genes <- read.table(file="http://rest.kegg.jp/list/hsa",fill=TRUE,sep="\t",quote="")
KEGG_genes$V3 <- gsub("uncharacterized", "", KEGG_genes$V2, fixed = TRUE)
KEGG_temp <- unlist(lapply(strsplit(KEGG_genes$V3, ",", fixed = T), function(x) x[1]))
KEGG_genes$V4 <-  unlist(lapply(strsplit(KEGG_temp, ";", fixed = T), function(x) x[1]))
KEGG_genes <- KEGG_genes[, -c(2,3)]
colnames(KEGG_genes) <- c("KEGG.Gene.ID", "Gene.symbol")
save(KEGG_genes, file = paste(dirs, "data/keggAPI_genes.RData-08-21-17", sep = ""))
KEGG_link <- read.table(file="http://rest.kegg.jp/link/hsa/pathway",fill=TRUE,sep="\t",quote="")
colnames(KEGG_link) <- c("KEGG.pathway.ID", "KEGG.Gene.ID")
save(KEGG_link, file = paste(dirs, "data/keggAPI_link.RData-08-21-17", sep = ""))
##Prepare KEGG datasets for enrichment analysis
load(file = paste(dirs, "data/keggAPI_pathways.RData-08-21-17", sep = ""))
load(file = paste(dirs, "data/keggAPI_genes.RData-08-21-17", sep = ""))
load(file = paste(dirs, "data/keggAPI_link.RData-08-21-17", sep = ""))
#Merge Gene and pathway datasets
KEGG_temp2 <- merge(KEGG_genes, KEGG_link, by = "KEGG.Gene.ID")
KEGG_For_Enrichment <- merge(KEGG_temp2, KEGG_pathways, by = "KEGG.pathway.ID")
KEGG_For_Enrichment <- as.data.frame(cbind(KEGG_For_Enrichment$Pathway, KEGG_For_Enrichment$Gene.symbol))
colnames(KEGG_For_Enrichment) <- c("Pathway", "Gene.symbol")
###Redesign dataframe to match the format of the data download from Laura's orginal analysis###
# function to run over each element in list
set_to_max_length <- function(x) {
length(x) <- max.length
return(x)
}
# 1. split into  list
mydf.split <- split(KEGG_For_Enrichment$Gene.symbol, KEGG_For_Enrichment$Pathway)
# 2.a get max length of all columns
max.length <- max(sapply(mydf.split, length))
# 2.b set each list element to max length
mydf.split.2 <- lapply(mydf.split, set_to_max_length)
# 3. combine back into df
KEGG_For_Analysis <- t(data.frame(mydf.split.2))
KEGG_For_Analysis[is.na(KEGG_For_Analysis)] <- ""
##Function for calculating enrichment using the Fisher's Exact test
enrich_results <- function(db,bkgrd,de){
num_bkgrd <- sum(bkgrd %in% db)
num_de <- sum(de %in% db)
de_genes <- paste(de[de %in% db],collapse=";")
#Fisher Test
n_bkgrd = length(bkgrd)
n_de = length(de)
x <- matrix(c(num_bkgrd,n_bkgrd - n_de - num_bkgrd,num_de,n_de - num_de),nr=2)
p_value <- fisher.test(x)$p.value
return(data.frame(num_bkgrd,num_de,p_value,de_genes))
}
KEGG_results <- do.call("rbind",apply(KEGG_For_Analysis,1,enrich_results,bkgrd,de))
KEGG_results$pathway <- KEGG_For_Analysis[,1]
KEGG_results$expected <- length(de) * (KEGG_results$num_bkgrd/length(bkgrd))
KEGG_results <- KEGG_results[KEGG_results$num_de>1,]
KEGG_results$FDR <- p.adjust(KEGG_results$p_value,method="BH")
KEGG_results <- KEGG_results[order(KEGG_results$FDR),]
View(KEGG_For_Analysis)
View(KEGG_results)
harry <- read.table(file="http://rest.kegg.jp/find/genes/hsa",fill=TRUE,sep="\t",quote="")
View(harry)
which(!KEGG_genes$Gene.symbol %in% de)
which(!de %in% KEGG_genes$Gene.symbol)
harry <- which(!de %in% KEGG_genes$Gene.symbol)
de[harry]
KEGG_genes[KEGG_genes$KEGG.Gene.ID == "hsa:65983", ]
setwd("/Volumes/smiharry/CBC/P1218Fontenot/code")
setwd("/Volumes/smiharry/Saba_Lab/RNA-Seq/Brain-Epilepsy/code")
View(KEGG_For_Enrichment)
View(KEGG_genes)
sum(duplicated(KEGG_genes$Gene.symbol))
harry <- which(duplicated(KEGG_genes$Gene.symbol))
smith <- KEGG_genes[harry, ]
sum(smith$Gene.symbol %in% de)
sum(de %in% smith$Gene.symbol)
View(smith)
View(KEGG_results)
View(KEGG_For_Analysis)
##Prepare KEGG datasets for enrichment analysis
load(file = paste(dirs, "data/keggAPI_pathways.RData-08-21-17", sep = ""))
load(file = paste(dirs, "data/keggAPI_genes.RData-08-21-17", sep = ""))
load(file = paste(dirs, "data/keggAPI_link.RData-08-21-17", sep = ""))
#Merge Gene and pathway datasets
KEGG_temp2 <- merge(KEGG_genes, KEGG_link, by = "KEGG.Gene.ID")
KEGG_For_Enrichment <- merge(KEGG_temp2, KEGG_pathways, by = "KEGG.pathway.ID")
KEGG_For_Enrichment <- as.data.frame(cbind(KEGG_For_Enrichment$Pathway, KEGG_For_Enrichment$Gene.symbol))
colnames(KEGG_For_Enrichment) <- c("Pathway", "Gene.symbol")
###Redesign dataframe to match the format of the data download from Laura's orginal analysis###
# function to run over each element in list
set_to_max_length <- function(x) {
length(x) <- max.length
return(x)
}
# 1. split into  list
mydf.split <- split(KEGG_For_Enrichment$Gene.symbol, KEGG_For_Enrichment$Pathway)
# 2.a get max length of all columns
max.length <- max(sapply(mydf.split, length))
# 2.b set each list element to max length
mydf.split.2 <- lapply(mydf.split, set_to_max_length)
# 3. combine back into df
KEGG_For_Analysis <- t(data.frame(mydf.split.2))
KEGG_For_Analysis[is.na(KEGG_For_Analysis)] <- ""
##Function for calculating enrichment using the Fisher's Exact test
enrich_results <- function(db,bkgrd,de){
num_bkgrd <- sum(bkgrd %in% db)
num_de <- sum(de %in% db)
de_genes <- paste(de[de %in% db],collapse=";")
#Fisher Test
n_bkgrd = length(bkgrd)
n_de = length(de)
x <- matrix(c(num_bkgrd,n_bkgrd - n_de - num_bkgrd,num_de,n_de - num_de),nr=2)
p_value <- fisher.test(x)$p.value
return(data.frame(num_bkgrd,num_de,p_value,de_genes))
}
KEGG_results <- do.call("rbind",apply(KEGG_For_Analysis,1,enrich_results,bkgrd,de))
KEGG_results$pathway <- row.names(KEGG_For_Analysis)
KEGG_results$expected <- length(de) * (KEGG_results$num_bkgrd/length(bkgrd))
KEGG_results <- KEGG_results[KEGG_results$num_de>1,]
KEGG_results$FDR <- p.adjust(KEGG_results$p_value,method="BH")
KEGG_results <- KEGG_results[order(KEGG_results$FDR),]
```
Enrichment using KEGG database from Laura's code
```{r echo=FALSE, warning=FALSE, message=FALSE}
enrich_results <- function(db,bkgrd,de){
num_bkgrd <- sum(bkgrd %in% db)
num_de <- sum(de %in% db)
de_genes <- paste(de[de %in% db],collapse=";")
#Fisher Test
n_bkgrd = length(bkgrd)
n_de = length(de)
x <- matrix(c(num_bkgrd,n_bkgrd - n_de - num_bkgrd,num_de,n_de - num_de),nr=2)
p_value <- fisher.test(x)$p.value
return(data.frame(num_bkgrd,num_de,p_value,de_genes))
}
###  KEGG PATHWAYS  ###
database_file <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/Brain-Epilepsy/data/KEGG_2016_2017-01-25.txt"
n_col = max(count.fields(database_file, sep = "\t"))
kegg <- read.table(file=database_file ,header=FALSE,fill=TRUE,col.names=c(1:n_col),sep="\t")
kegg_v2 <- t(apply(kegg,1,function(a) gsub(",1.0","",a)))
kegg_results <- do.call("rbind",apply(kegg_v2,1,enrich_results,bkgrd,de))
kegg_results$pathway <- kegg_v2[,1]
kegg_results$expected <- length(de) * (kegg_results$num_bkgrd/length(bkgrd))
kegg_results <- kegg_results[kegg_results$num_de>1,]
kegg_results$FDR <- p.adjust(kegg_results$p_value,method="BH")
kegg_results <- kegg_results[order(kegg_results$FDR),]
dirs = "/Volumes/smiharry/Saba_Lab/RNA-Seq/Brain-Epilepsy/"
rm(list=ls())
options(stringsAsFactors = FALSE)
dirs = "/Volumes/smiharry/Saba_Lab/RNA-Seq/Brain-Epilepsy/"
bkgrd <- read.table(file=paste(dirs,"data/geneSymbolsForCombinedBkgrd.2017-08-07.txt",sep=""),sep="\t",header=FALSE)$V1
de <- read.table(file=paste(dirs,"data/geneSymbolsForCombinedDE.2017-08-07.txt",sep=""),sep="\t",header=FALSE)$V1
## double check that all differentially expressed genes are in background
sum(!(de %in% bkgrd))
##Prepare KEGG datasets for enrichment analysis
load(file = paste(dirs, "data/keggAPI_pathways.RData-08-21-17", sep = ""))
load(file = paste(dirs, "data/keggAPI_genes.RData-08-21-17", sep = ""))
load(file = paste(dirs, "data/keggAPI_link.RData-08-21-17", sep = ""))
#Merge Gene and pathway datasets
KEGG_temp2 <- merge(KEGG_genes, KEGG_link, by = "KEGG.Gene.ID")
KEGG_For_Enrichment <- merge(KEGG_temp2, KEGG_pathways, by = "KEGG.pathway.ID")
KEGG_For_Enrichment <- as.data.frame(cbind(KEGG_For_Enrichment$Pathway, KEGG_For_Enrichment$Gene.symbol))
colnames(KEGG_For_Enrichment) <- c("Pathway", "Gene.symbol")
###Redesign dataframe to match the format of the data download from Laura's orginal analysis###
# function to run over each element in list
set_to_max_length <- function(x) {
length(x) <- max.length
return(x)
}
# 1. split into  list
mydf.split <- split(KEGG_For_Enrichment$Gene.symbol, KEGG_For_Enrichment$Pathway)
# 2.a get max length of all columns
max.length <- max(sapply(mydf.split, length))
# 2.b set each list element to max length
mydf.split.2 <- lapply(mydf.split, set_to_max_length)
# 3. combine back into df
KEGG_For_Analysis <- t(data.frame(mydf.split.2))
KEGG_For_Analysis[is.na(KEGG_For_Analysis)] <- ""
##Function for calculating enrichment using the Fisher's Exact test
enrich_results <- function(db,bkgrd,de){
num_bkgrd <- sum(bkgrd %in% db)
num_de <- sum(de %in% db)
de_genes <- paste(de[de %in% db],collapse=";")
#Fisher Test
n_bkgrd = length(bkgrd)
n_de = length(de)
x <- matrix(c(num_bkgrd,n_bkgrd - n_de - num_bkgrd,num_de,n_de - num_de),nr=2)
p_value <- fisher.test(x)$p.value
return(data.frame(num_bkgrd,num_de,p_value,de_genes))
}
KEGG_results <- do.call("rbind",apply(KEGG_For_Analysis,1,enrich_results,bkgrd,de))
KEGG_results$pathway <- row.names(KEGG_For_Analysis)
KEGG_results$expected <- length(de) * (KEGG_results$num_bkgrd/length(bkgrd))
KEGG_results <- KEGG_results[KEGG_results$num_de>1,]
KEGG_results$FDR <- p.adjust(KEGG_results$p_value,method="BH")
KEGG_results <- KEGG_results[order(KEGG_results$FDR),]
```
Enrichment using KEGG database from Laura's code
```{r echo=FALSE, warning=FALSE, message=FALSE}
enrich_results <- function(db,bkgrd,de){
num_bkgrd <- sum(bkgrd %in% db)
num_de <- sum(de %in% db)
de_genes <- paste(de[de %in% db],collapse=";")
#Fisher Test
n_bkgrd = length(bkgrd)
n_de = length(de)
x <- matrix(c(num_bkgrd,n_bkgrd - n_de - num_bkgrd,num_de,n_de - num_de),nr=2)
p_value <- fisher.test(x)$p.value
return(data.frame(num_bkgrd,num_de,p_value,de_genes))
}
###  KEGG PATHWAYS  ###
database_file <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/Brain-Epilepsy/data/KEGG_2016_2017-01-25.txt"
n_col = max(count.fields(database_file, sep = "\t"))
kegg <- read.table(file=database_file ,header=FALSE,fill=TRUE,col.names=c(1:n_col),sep="\t")
kegg_v2 <- t(apply(kegg,1,function(a) gsub(",1.0","",a)))
kegg_results <- do.call("rbind",apply(kegg_v2,1,enrich_results,bkgrd,de))
kegg_results$pathway <- kegg_v2[,1]
kegg_results$expected <- length(de) * (kegg_results$num_bkgrd/length(bkgrd))
kegg_results <- kegg_results[kegg_results$num_de>1,]
kegg_results$FDR <- p.adjust(kegg_results$p_value,method="BH")
kegg_results <- kegg_results[order(kegg_results$FDR),]
rm(list=ls())
options(stringsAsFactors = FALSE)
dirs = "/Volumes/smiharry/Saba_Lab/RNA-Seq/Brain-Epilepsy/"
bkgrd <- read.table(file=paste(dirs,"data/geneSymbolsForCombinedBkgrd.2017-08-07.txt",sep=""),sep="\t",header=FALSE)$V1
de <- read.table(file=paste(dirs,"data/geneSymbolsForCombinedDE.2017-08-07.txt",sep=""),sep="\t",header=FALSE)$V1
## double check that all differentially expressed genes are in background
sum(!(de %in% bkgrd))
##Prepare KEGG datasets for enrichment analysis
load(file = paste(dirs, "data/keggAPI_pathways.RData-08-21-17", sep = ""))
load(file = paste(dirs, "data/keggAPI_genes.RData-08-21-17", sep = ""))
load(file = paste(dirs, "data/keggAPI_link.RData-08-21-17", sep = ""))
#Merge Gene and pathway datasets
KEGG_temp2 <- merge(KEGG_genes, KEGG_link, by = "KEGG.Gene.ID")
KEGG_For_Enrichment <- merge(KEGG_temp2, KEGG_pathways, by = "KEGG.pathway.ID")
KEGG_For_Enrichment <- as.data.frame(cbind(KEGG_For_Enrichment$Pathway, KEGG_For_Enrichment$Gene.symbol))
colnames(KEGG_For_Enrichment) <- c("Pathway", "Gene.symbol")
###Redesign dataframe to match the format of the data download from Laura's orginal analysis###
# function to run over each element in list
set_to_max_length <- function(x) {
length(x) <- max.length
return(x)
}
# 1. split into  list
mydf.split <- split(KEGG_For_Enrichment$Gene.symbol, KEGG_For_Enrichment$Pathway)
# 2.a get max length of all columns
max.length <- max(sapply(mydf.split, length))
# 2.b set each list element to max length
mydf.split.2 <- lapply(mydf.split, set_to_max_length)
# 3. combine back into df
KEGG_For_Analysis <- t(data.frame(mydf.split.2))
KEGG_For_Analysis[is.na(KEGG_For_Analysis)] <- ""
##Function for calculating enrichment using the Fisher's Exact test
enrich_results <- function(db,bkgrd,de){
num_bkgrd <- sum(bkgrd %in% db)
num_de <- sum(de %in% db)
de_genes <- paste(de[de %in% db],collapse=";")
#Fisher Test
n_bkgrd = length(bkgrd)
n_de = length(de)
x <- matrix(c(num_bkgrd,n_bkgrd - n_de - num_bkgrd,num_de,n_de - num_de),nr=2)
p_value <- fisher.test(x)$p.value
return(data.frame(num_bkgrd,num_de,p_value,de_genes))
}
KEGG_results <- do.call("rbind",apply(KEGG_For_Analysis,1,enrich_results,bkgrd,de))
KEGG_results$pathway <- row.names(KEGG_For_Analysis)
KEGG_results$expected <- length(de) * (KEGG_results$num_bkgrd/length(bkgrd))
KEGG_results <- KEGG_results[KEGG_results$num_de>1,]
KEGG_results$FDR <- p.adjust(KEGG_results$p_value,method="BH")
KEGG_results <- KEGG_results[order(KEGG_results$FDR),]
View(KEGG_results)
setwd("/Volumes/smiharry/CBC/P1218Fontenot/code")
setwd("/Volumes/smiharry/Saba_Lab")
setwd("/Volumes/smiharry/Saba_Lab/RNA-Seq/Brain-Epilepsy/code")
setwd("/Volumes/smiharry/CBC/P1218Fontenot/code")
table(mtcars[, 1], mtcars[, 2])
x <- table(mtcars[, 1], mtcars[, 2])
as.data.frame.matrix(x)
y <- as.data.frame.matrix(x)
?sort
z <- sort(y, order(y$`4`))
z <- sort(y, order(y[, 1]))
length(y$`4`)
length(order(y$`4`))
order(y$`4`)
z <- y[order(y[, 1]), ]
directory <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/Brain-Epilepsy/StringTie/results/"
sample <- "1_S25"
chrSize <- "hg38.cleaned.chrom.sizes"
numexp <- 5
exncnt <- 5
tptcnt <- 5
file <- "stringtie_merged_results.gtf"
###Create workspace and load packages###
options(stringsAsFactors = FALSE)
library(rtracklayer)
library(GenomicRanges)
library(dplyr)
library(RColorBrewer)
##Import cleaned Chromosome sized dataset
dir <- directory #define file directory
file <- file #defile file name
chrSize <- chrSize
chro.clean <- read.table(paste(dir, chrSize, sep = ""), header = FALSE, sep = "\t")
colnames(chro.clean) <- c("Chromosome", "Length")
#ST_gtf.raw <- read.table(paste(dir, file, sep = ""), header = FALSE, sep = "\t") #read in raw .gtf table if necessary (Might remove this step later)
ST_gtfClean <- import(paste(dir, file, sep = "")) #This imports the .gtf file and formats the information in the file and the 9th column to something more    readible
ST_df <- as.data.frame(ST_gtfClean) #Converts the object above to a dataframe
#Create a dataset that is just trascripts (i.e. remove rows that are exons or have a TPM = 0)
ST_transcripts <- ST_df[ST_df$type == "transcript" & ST_df$TPM != "0.000000", ] ###Make this part of the output list###
#Order transcript dataset by level of expression (most expressed to least expressed)
ST_transcripts <- ST_transcripts[order(ST_transcripts$TPM, decreasing = TRUE), ] ###Make this part of the ouput list###
#Calculate total number of transcripts per chromosome
ST_tptPERchr <- as.data.frame(table(ST_transcripts$seqnames)) ###Make this art of the output list###
colnames(ST_tptPERchr) <- c("Chromosome", "Transcript_Count")
ST_transcripts <- ST_df
ST_tptPERchr <- as.data.frame(table(ST_transcripts$seqnames)) ###Make this art of the output list###
colnames(ST_tptPERchr) <- c("Chromosome", "Transcript_Count")
labels <- c(paste(c("chr"), c(1:22), sep = ""), paste(c("chr"), c("X", "Y", "M"), sep = ""))
chromMerged <- merge(ST_tptPERchr, chro.clean, by = "Chromosome")
levels(chromMerged$Chromosome) <- c(levels(chromMerged$Chromosome), "total")
chromMerged <- rbind(chromMerged, list(as.factor("total"), sum(as.numeric(chromMerged$Transcript_Count)), sum(as.numeric(chromMerged$Length))))
chromMerged$Chromosome <- as.character(chromMerged$Chromosome)
norder <- c(1,12,16,17,18,19,20,21,22,2,3,4,5,6,7,8,9,10,11,13,14,15,24,25,23,26)
chromMerged <- chromMerged[norder, ]
View(chromMerged)
dim(ST_df)[1]
file <- "stringtie_merged.gtf"
dir <- directory #define file directory
file <- file #defile file name
chrSize <- chrSize
chro.clean <- read.table(paste(dir, chrSize, sep = ""), header = FALSE, sep = "\t")
colnames(chro.clean) <- c("Chromosome", "Length")
#ST_gtf.raw <- read.table(paste(dir, file, sep = ""), header = FALSE, sep = "\t") #read in raw .gtf table if necessary (Might remove this step later)
ST_gtfClean <- import(paste(dir, file, sep = "")) #This imports the .gtf file and formats the information in the file and the 9th column to something more    readible
ST_df <- as.data.frame(ST_gtfClean) #Converts the object above to a dataframe
dim(ST_df)[1]
View(chromMerged)
ST_transcripts <- ST_df
ST_tptPERchr <- as.data.frame(table(ST_transcripts$seqnames)) ###Make this art of the output list###
colnames(ST_tptPERchr) <- c("Chromosome", "Transcript_Count")
##Plot distribution of transcripts per chromosome
labels <- c(paste(c("chr"), c(1:22), sep = ""), paste(c("chr"), c("X", "Y", "M"), sep = ""))
##Merge transcripts per chromosome table and chromosome cleaned datasets
chromMerged <- merge(ST_tptPERchr, chro.clean, by = "Chromosome")
levels(chromMerged$Chromosome) <- c(levels(chromMerged$Chromosome), "total")
chromMerged <- rbind(chromMerged, list(as.factor("total"), sum(as.numeric(chromMerged$Transcript_Count)), sum(as.numeric(chromMerged$Length))))
chromMerged$Chromosome <- as.character(chromMerged$Chromosome)
norder <- c(1,12,16,17,18,19,20,21,22,2,3,4,5,6,7,8,9,10,11,13,14,15,24,25,23,26)
chromMerged <- chromMerged[norder, ]
View(chromMerged)
load(file = "AM-Brush-RawCounts.RData")
load(file = "AMCountsWithGeneName.RData")
load(file = "CandidateLists-AMData.RData")
#create needed function objets for testing
countsData <- namechangeDF
sigSampleData <- HPS_vs_HNS.AM.sigGenes
countsData2 <- BE_cnts_AM
comparison <- "HIVPOS_smoker|HIVNEG_smoker"
setwd("/Volumes/smiharry/CBC/P1218Fontenot/code")
rm(list=ls())
options(stringsAsFactors=FALSE)
library(RColorBrewer)
library(gplots)
######### Load Data ##########
load(file = "AM-Brush-RawCounts.RData")
load(file = "AMCountsWithGeneName.RData")
load(file = "CandidateLists-AMData.RData")
#create needed function objets for testing
countsData <- namechangeDF
sigSampleData <- HPS_vs_HNS.AM.sigGenes
countsData2 <- BE_cnts_AM
comparison <- "HIVPOS_smoker|HIVNEG_smoker"
AMOL_Results_list <- list(HNS_vs_HNN.AM.sigGenes$Gene.name, HPN_vs_HNN.AM.sigGenes$Gene.name, HPS_vs_HPN.AM.sigGenes$Gene.name, HPS_vs_HNS.AM.sigGenes$Gene.name)
AMOL_Results_index <- unlist(AMOL_Results_list)
AMOL_Results_index <- unique(AMOL_Results_index[duplicated(AMOL_Results_index)])
HNS_vs_HNN.AM.FG <- HNS_vs_HNN.AM.sigGenes[HNS_vs_HNN.AM.sigGenes$Gene.name %in% AMOL_Results_index, c(6, 10)]
HPN_vs_HNN.AM.FG <- HPN_vs_HNN.AM.sigGenes[HPN_vs_HNN.AM.sigGenes$Gene.name %in% AMOL_Results_index, c(6, 10)]
HPS_vs_HPN.AM.FG <- HPS_vs_HPN.AM.sigGenes[HPS_vs_HPN.AM.sigGenes$Gene.name %in% AMOL_Results_index, c(6, 10)]
HPS_vs_HNS.AM.FG <- HPS_vs_HNS.AM.sigGenes[HPS_vs_HNS.AM.sigGenes$Gene.name %in% AMOL_Results_index, c(6, 10)]
MyMerge <- function(x, y){
df <- merge(x, y, by= "Gene.name", all.x= TRUE, all.y= TRUE)
return(df)
}
AMFG.Merge <- Reduce(MyMerge, list(HNS_vs_HNN.AM.FG, HPN_vs_HNN.AM.FG, HPS_vs_HPN.AM.FG, HPS_vs_HNS.AM.FG))
colnames(AMFG.Merge) <- c("Gene.name", "HNS_v_HNN", "HPN_vHNN", "HPS_vHPN", "HPS_vHNS")
library(ggplot2)
library(reshape)
expr <- AMFG.Merge
rownames(expr) <- AMFG.Merge$Gene.name
test <- melt(expr)
my_palette <- colorRampPalette(c("blue", "white", "red"))(n = 299)
ggplot(test, aes(x = variable, y = Gene.name)) + geom_tile(aes(fill = value)) + scale_fill_continuous()
install.packages("reshape")
library(ggplot2)
library(reshape)
expr <- AMFG.Merge
rownames(expr) <- AMFG.Merge$Gene.name
test <- melt(expr)
my_palette <- colorRampPalette(c("blue", "white", "red"))(n = 299)
ggplot(test, aes(x = variable, y = Gene.name)) + geom_tile(aes(fill = value)) + scale_fill_continuous()
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
setwd("/Users/smiharry/Desktop/Saba_Lab/RLBTCP")
create("rlbtcp")
setwd("./rlbtcp")
document()
setwd("..")
install("rlbtcp")
install("rlbtcp")
install("rlbtcp")
install("rlbtcp")
setwd("./rlbtcp")
document()
setwd("/Users/smiharry/Desktop/Saba_Lab/RLBTCP")
create("rlbtcp")
setwd("./rlbtcp")
setwd("./rlbtcp")
document()
setwd("..")
install("rlbtcp")
library(rlbtcp)
?rsem.read.iso
install("rlbtcp")
library(rlbtcp)
?rsem.read.iso
setwd("/Users/smiharry/Desktop/Saba_Lab/RLBTCP")
create("rlbtcp")
setwd("./rlbtcp")
document()
setwd("..")
install("rlbtcp")
library(rlbtcp)
?rsem.read.iso
setwd("/Users/smiharry/Desktop/Saba_Lab/RLBTCP")
create("rlbtcp")
setwd("./rlbtcp")
document()
setwd("..")
install("rlbtcp")
library(rlbtcp)
?rsem.read.iso
