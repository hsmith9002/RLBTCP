x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".genes.results",sep=""),sep="\t",header=TRUE)
y = data.frame(gene_id = x$gene_id, i=x$expected_count)
colnames(y)[2] = i
if(i==sampleID[1]) cntsG = y
if(i!=sampleID[1]) cntsG = merge(cntsG,y,by="gene_id")
}
colnames(cntsG)[-1] <- paste(colnames(cntsG)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged.gene = cntsG
if(h!=N[1]) cntsMerged.gene = merge(cntsMerged.gene,cntsG,by="gene_id")
## save cnts
save(list = c("cntsMerged.gene"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
} else{
## Read in transcript level data
for(i in sampleID){
x = read.table(file=paste(dirs2, "batch", h, "/RI.reconst.v1/",i,".genes.results",sep=""),sep="\t",header=TRUE)
y = data.frame(gene_id = x$gene_id, i=x$TPM)
colnames(y)[2] = i
if(i==sampleID[1]) cntsG = y
if(i!=sampleID[1]) cntsG = merge(cntsG,y,by="gene_id")
}
colnames(cntsG)[-1] <- paste(colnames(cntsG)[-1], "_batch", h, sep = "")
## Merge datasets
if(h==N[1]) cntsMerged.gene = cntsG
if(h!=N[1]) cntsMerged.gene = merge(cntsMerged.gene,cntsG,by="gene_id")
## save cnts
save(list = c("cntsMerged.gene"), file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  filename, ".Rdata", sep = ""))
}
}
}
}
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/"
dirs2 <- "/data/rn6/quantitation/HS_brainPolyA/"
dirlocal <- "~/Desktop/Saba_Lab/"
location <- "reconst.Full"
N <- c(1, 2, 3)
tissue <- "Brain"
qtype <- "counts"
filename <- "cnts.merged"
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", location = location, filename = filename)
N <- list(1, 2, "3_4_5")
N <- list(1, 2, "_3_4_5")
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", location = location, filename = filename)
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", location = location, filename = filename)
dirs2 <- "/Volumes/rn6/quantitation/HS_brainPolyA/"
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", location = location, filename = filename)
setwd("/Users/smiharry/Desktop/Saba_Lab/RLBTCP")
create("stcr")
setwd("./stcr")
document()
setwd("..")
install("stcr")
library(stcr)
?rsem.read.iso
?rsem.read.gene
?rm.tech.rep
?pres.abs.table
?sep.panel
?sep.panel.sample
?content.for.plot
?track.position.table
?track.position.bytransc
?summarize.content
?contentQC
## Read in RSEM data by batch number
library(stcr)
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/"
dirs2 <- "/Volumes/rn6/quantitation/brainTotalRNA/RI/"
dirlocal <- "~/Desktop/Saba_Lab/"
location <- "RI.reconst.v1"
N <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
tissue <- "Brain"
qtype <- "counts"
filename <- "test"
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", location = location, filename = filename)
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "gene", location = location, filename = "test")
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", location = location, filename = filename)
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/"
dirs2 <- "/Volumes/rn6/quantitation/HS_brainPolyA/"
dirlocal <- "~/Desktop/Saba_Lab/"
location <- "reconst.Full"
N <- list(1, 2, "_3_4_5")
tissue <- "Brain"
qtype <- "counts"
filename <- "cnts.merged"
library(stcr)
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", location = location, filename = filename)
source("~/Desktop/Saba_Lab/Liver/code/rsem.read.R")
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/"
dirs2 <- "/Volumes/rn6/quantitation/liverTotalRNA/RI/"
location <- "RI.reconst.v1"
dirlocal <- "~/Desktop/Saba_Lab/"
N <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
tissue <- "Liver"
BXH1IR <- read.table("/Volumes/rn6/quantitation/liverTotalRNA/RI/batch2/RI.reconst.v1/BXH2_1.isoforms.results", header = TRUE, sep = "\t")
BXH1IR.nospike <- BXH1IR[which(!startsWith(BXH1IR$gene_id, "ERCC")), ]
## READ FROM LOCAL MACHINE ##
BXH1IR <- read.table("~/Desktop/Saba_Lab/Liver/quantitation/BXH2_1.isoforms.results", header = TRUE, sep = "\t")
BXH1IR.nospike <- BXH1IR[which(!startsWith(BXH1IR$gene_id, "ERCC")), ]
BXH1IR <- read.table("/Volumes/rn6/quantitation/liverTotalRNA/RI/batch2/RI.reconst.v1/BXH2_1.isoforms.results", header = TRUE, sep = "\t")
BXH1IR.nospike <- BXH1IR[which(!startsWith(BXH1IR$gene_id, "ERCC")), ]
## READ FROM LOCAL MACHINE ##
BXH1IR <- read.table("~/Desktop/Saba_Lab/Liver/quantitation/BXH2_1.isoforms.results", header = TRUE, sep = "\t")
BXH1IR.nospike <- BXH1IR[which(!startsWith(BXH1IR$gene_id, "ERCC")), ]
## Generate reference table for assigning gene types
generef.table <- aggregate(BXH1IR.nospike$transcript_id ~ BXH1IR.nospike$gene_id, FUN = function(x) sum(grepl("ENS", x)))
generef.table$`BXH1IR.nospike$transcript_id` <- ifelse(generef.table$`BXH1IR.nospike$transcript_id` > 0, "Known", "Novel")
colnames(generef.table) <- c("gene_id", "t_type")
## Merge with RSEM output table
BXH1IR.nospike <- merge(BXH1IR.nospike, generef.table, by = "gene_id")
load(file = paste(dirlocal, tissue, "/quantitation/",  "PA.table.RMO", ".Rdata", sep = ""))
View(PA.table.RMO)
View(BXH1IR.nospike)
rm(list = ls())
options(stringsAsFactors = FALSE)
library(DESeq2)
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/"
dirlocal <- "~/Desktop/Saba_Lab/"
tissue <- "Liver"
## Load full expected counts dataset
load(file = paste(dir, "Transcript_Reconstruction/", tissue, "/quantitation/",  "cnts.Merged.isoforms.RMO", ".Rdata", sep = ""))
## Remove spike-ins
cntsMerged.norep.RMO <- cntsMerged.norep.RMO[-c(1:92), ]
##subset data
countdata <- cntsMerged.norep.RMO[, c(grep("F344-NHsd", colnames(cntsMerged.norep.RMO)), grep("LEW-SsNHsd", colnames(cntsMerged.norep.RMO)))]
## Filter genes by counts
rownames(countdata) <- cntsMerged.norep.RMO$transcript_id
countdata <- countdata[rowSums(countdata)>(10*ncol(countdata)),]
## Generate 'phenotypedata
phen <- data.frame("sample" = colnames(countdata), "condition" = as.factor(c(rep("F", 3), rep("L", 3))))
##Generate expression set object
dds <- DESeqDataSetFromMatrix(countData = round(countdata),
colData = phen,
design = ~ condition)
## rlog transform for data visualization
rld <- rlog(dds)
## Plot first 2 samples to get idea of rlog success: Doesn;t look good
plot(assay(rld)[ , 1:2],
pch=16, cex=0.3)
## PCA plot: Looks ok. the strains cluster away from each other
plotPCA(rld, intgroup = c("condition"))
## run DE analysis
dds <- DESeq(dds)
## Gives a note. but based on M. Love (https://www.biostars.org/p/119115/), no furhter action required by user.
## Build results table
res <- results(dds)
results.t <- as.data.frame(res[!is.na(res$pvalue), c("log2FoldChange", "pvalue", "padj")])
results.t$transcript_id <- rownames(results.t)
results.t.sig <- results.t[results.t$pvalue < 0.05, ]
## Load Gene level data
load("/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/Transcript_Reconstruction/Liver/quantitation/cnts.Merged.genes.RData")
## Remove spike-ins and remove animals not in isoform data
cntsMerged.gene <- cntsMerged.gene[which(!grepl("^ERCC", cntsMerged.gene$gene_id)), c(1, which(colnames(cntsMerged.gene) %in% colnames(cntsMerged.norep.RMO)))]
##subset data
countdata.g <- cntsMerged.gene[, c(grep("F344-NHsd", colnames(cntsMerged.gene)), grep("LEW-SsNHsd", colnames(cntsMerged.gene)))]
## Filter genes by counts
rownames(countdata.g) <- cntsMerged.gene$gene_id
countdata.g <- countdata.g[rowSums(countdata.g)>(10*ncol(countdata.g)),]
## Generate 'phenotypedata
phen.g <- data.frame("sample" = colnames(countdata.g), "condition" = as.factor(c(rep("F", 3), rep("L", 3))))
##Generate expression set object
ddg <- DESeqDataSetFromMatrix(countData = round(countdata.g),
colData = phen.g,
design = ~ condition)
## rlog transform for data visualization
rld.g <- rlog(ddg)
## Plot first 2 samples to get idea of rlog success: Doesn;t look good
plot(assay(rld.g)[ , 1:2],
pch=16, cex=0.3)
## PCA plot: Looks ok. the strains cluster away from each other
plotPCA(rld.g, intgroup = c("condition"))
## run DE analysis
ddg <- DESeq(ddg)
## Gives a note. but based on M. Love (https://www.biostars.org/p/119115/), no furhter action required by user.
## Build results table
res.g <- results(ddg)
results.g <- as.data.frame(res.g[!is.na(res.g$pvalue), c("log2FoldChange", "pvalue", "padj")])
results.g$gene_id <- rownames(results.g)
results.g.sig <- results.g[results.g$pvalue < 0.05, ]
results.g.sig.fdr <- results.g[results.g$padj < 0.05, ]
## load rsem data from one sample for isoform to gene mapping
BXH1IR <- read.table("/Volumes/rn6/quantitation/liverTotalRNA/RI/batch2/RI.reconst.v1/BXH2_1.isoforms.results", header = TRUE, sep = "\t")
BXH1IR.nospike <- BXH1IR[which(!startsWith(BXH1IR$gene_id, "ERCC")), ]
## Build map and merge transcripts with their associated genes
map <- BXH1IR.nospike[which(BXH1IR.nospike$transcript_id %in% results.t$transcript_id), c(1,2)]
results.t <- merge(results.t, map, by = "transcript_id")
## Sort dataset by gene_id, then by p-value
library(dplyr)
results.t.sort <- arrange(results.t, gene_id, pvalue)
######################################################### using genes with unadjusted p < 0.05 ############################################################
## Check to see if gene from transcript list is in sig DE gene list
results.t.sort$sigDE <- NA
for(i in 1:length(results.t.sort$transcript_id)){
results.t.sort$sigDE[i] <- results.t.sort$gene_id[i] %in% results.g.sig$gene_id
}
results.t.sort$ttype <- substr(results.t.sort$transcript_id, start = 1, stop = 2)
results.t.sort$sigstat <- results.t.sort$padj < 0.05
results.t.sort$sigstat.unadj <- results.t.sort$pvalue < 0.05
## Generate sig results table for isoforms that also has the mapped genes included
results.t.sig <- results.t.sort[results.t.sort$padj < 0.05, ]
library(ggplot2)
library(reshape2)
library(RColorBrewer)
source("/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/Transcript_Reconstruction/Liver/code/multiplot.R")
labels <- c("Associated gene is not \n differentially expressed", "Associated gene is \n differentially expressed")
labels2 <- c("Genes where novel trascript \n differential expression \n is not gretaer than \n known transcript \n differential expression",
"Genes where novel trascript \n differential expression \n is gretaer than known \n transcript \n differential expression")
ggplot(results.t.sig, aes(fill = ttype, x = sigDE)) + geom_bar(position = "dodge") +
labs(x = "Associated gene category", y = "Number of transcripts") +
scale_x_discrete(labels = labels) +
scale_fill_manual(values=c("red3", "dodgerblue3"),
name=NULL,
breaks=c("EN", "MS"),
labels=c("Known transcripts", "Novel transcripts")) +
theme(legend.position = c(0.75, 0.90)) +
theme(text = element_text(size=12)) + ggtitle("A")
View(results.t.sig)
View(results.t.sort)
View(results.g.sig)
## genrate list of genes aggregated by their known/novel transcript content and the sum of significant transcripts in each known/novel category - FDR
bygenerslts <- aggregate(sigstat~gene_id+ttype, data = results.t.sort, FUN = function(x) sum(x))
bygenerslts <- arrange(bygenerslts, gene_id, ttype)
## genrate list of genes aggregated by their known/novel transcript content and the sum of significant transcripts in each known/novel category - unadjusted
bygenerslts.unadj <- aggregate(sigstat.unadj~gene_id+ttype, data = results.t.sort, FUN = function(x) sum(x))
bygenerslts.unadj <- arrange(bygenerslts.unadj, gene_id, ttype)
## merge data aggregated datasets
bygenerslts <- merge(bygenerslts, bygenerslts.unadj, by = c("gene_id", "ttype"))
## subset dataset for genes with both known and novel transcripts
index1 <- bygenerslts$gene_id[duplicated(bygenerslts$gene_id)]
bg.both <- bygenerslts[which(bygenerslts$gene_id %in% index1), ]
## identify genes that have DE novel transcripts, but not DE known stranscripts
decompare <- aggregate(sigstat~gene_id, data = bg.both, FUN = function(x) diff(x))
decompare$cand <- decompare$sigstat > 0
## restructure bg.both so that there is a column for ED and for MS for each gene
gnames <- bg.both$gene_id[seq(1, length(bg.both$gene_id), 2)]
EN.fdr <- bg.both$sigstat[seq(1, length(bg.both$gene_id), 2)]
EN.unadj <- bg.both$sigstat.unadj[seq(1, length(bg.both$gene_id), 2)]
gnames2 <- bg.both$gene_id[seq(2, length(bg.both$gene_id), 2)]
MS.fdr <- bg.both$sigstat[seq(2, length(bg.both$gene_id), 2)]
MS.unadj <- bg.both$sigstat.unadj[seq(2, length(bg.both$gene_id), 2)]
identical(gnames, gnames2) # Sanity check. Should be true
bg.both.t <- data.frame("gene_id" = gnames, "fdr.EN" = EN.fdr, "fdr.MS" = MS.fdr, "unadj.EN" = EN.unadj, "unadj.MS" = MS.unadj)
## assign code for if gene has 0 DE known transcripts (based on FDR) and >0 DE novel transcripts (based on FDR)
bg.both.t$cand <- (bg.both.t$fdr.EN == 0 & bg.both.t$fdr.MS > 0)
bg.both.t$cand2 <- (bg.both.t$unadj.EN == 0 & bg.both.t$fdr.MS > 0)
View(bg.both.t)
table(results.t.sig$ttype, results.t.sig$sigDE)
163+158+887+477
t.sig.pcts <- table(results.t.sig$ttype, results.t.sig$sigDE)
t.sig.tb <- table(results.t.sig$ttype, results.t.sig$sigDE)
t.sig.pcts <- (t.sig.tb/dim(results.t.sig[1]))*100
t.sig.pcts
t.sig.pcts <- (t.sig.tb/dim(results.t.sig[1]))
t.sig.pcts
dim(results.t.sig[1]
)
t.sig.pcts <- (t.sig.tb/dim(results.t.sig)[1])
t.sig.pcts
t.sig.pcts <- (t.sig.tb/dim(results.t.sig)[1])*100
t.sig.pcts
9.7+9.4+52.6+28.3
ggplot(results.t.sig, aes(fill = ttype, x = sigDE)) + geom_bar(position = "dodge") +
labs(x = "Associated gene category", y = "Number of transcripts") +
scale_x_discrete(labels = labels) +
scale_fill_manual(values=c("red3", "dodgerblue3"),
name=NULL,
breaks=c("EN", "MS"),
labels=c("Known transcripts", "Novel transcripts")) +
theme(legend.position = c(0.75, 0.90)) +
annotate("text", x = .25, y = .75, label = paste0(t.sig.pcts[1,2], "%"))
theme(text = element_text(size=12)) + ggtitle("A")
ggplot(results.t.sig, aes(fill = ttype, x = sigDE)) + geom_bar(position = "dodge") +
labs(x = "Associated gene category", y = "Number of transcripts") +
scale_x_discrete(labels = labels) +
scale_fill_manual(values=c("red3", "dodgerblue3"),
name=NULL,
breaks=c("EN", "MS"),
labels=c("Known transcripts", "Novel transcripts")) +
theme(legend.position = c(0.75, 0.90)) +
annotate("text", x = .25, y = .75, label = paste0(t.sig.pcts[1,2], "%")) +
theme(text = element_text(size=12)) + ggtitle("A")
t.sig.pcts <- round((t.sig.tb/dim(results.t.sig)[1])*100, 2)
t.sig.pcts
ggplot(results.t.sig, aes(fill = ttype, x = sigDE)) + geom_bar(position = "dodge") +
labs(x = "Associated gene category", y = "Number of transcripts") +
scale_x_discrete(labels = labels) +
scale_fill_manual(values=c("red3", "dodgerblue3"),
name=NULL,
breaks=c("EN", "MS"),
labels=c("Known transcripts", "Novel transcripts")) +
theme(legend.position = c(0.75, 0.90)) +
annotate("text", x = 25, y = 75, label = paste0(t.sig.pcts[1,2], "%")) +
theme(text = element_text(size=12)) + ggtitle("A")
ggplot(results.t.sig, aes(fill = ttype, x = sigDE)) + geom_bar(position = "dodge") +
labs(x = "Associated gene category", y = "Number of transcripts") +
scale_x_discrete(labels = labels) +
scale_fill_manual(values=c("red3", "dodgerblue3"),
name=NULL,
breaks=c("EN", "MS"),
labels=c("Known transcripts", "Novel transcripts")) +
theme(legend.position = c(0.75, 0.90)) +
annotate("text", x = .25, y = .75, label = paste0(t.sig.pcts[1,2], "%")) +
theme(text = element_text(size=12)) + ggtitle("A")
ggplot(results.t.sig, aes(fill = ttype, x = sigDE)) + geom_bar(position = "dodge") +
labs(x = "Associated gene category", y = "Number of transcripts") +
scale_x_discrete(labels = labels) +
scale_fill_manual(values=c("red3", "dodgerblue3"),
name=NULL,
breaks=c("EN", "MS"),
labels=c("Known transcripts", "Novel transcripts")) +
theme(legend.position = c(0.75, 0.90)) +
annotate("text", x = 2, y = 5, label = paste0(t.sig.pcts[1,2], "%")) +
theme(text = element_text(size=12)) + ggtitle("A")
ggplot(results.t.sig, aes(fill = ttype, x = sigDE)) + geom_bar(position = "dodge") +
labs(x = "Associated gene category", y = "Number of transcripts") +
scale_x_discrete(labels = labels) +
scale_fill_manual(values=c("red3", "dodgerblue3"),
name=NULL,
breaks=c("EN", "MS"),
labels=c("Known transcripts", "Novel transcripts")) +
theme(legend.position = c(0.75, 0.90)) +
annotate("text", x = 1.5, y = 20, label = paste0(t.sig.pcts[1,2], "%")) +
theme(text = element_text(size=12)) + ggtitle("A")
ggplot(results.t.sig, aes(fill = ttype, x = sigDE)) + geom_bar(position = "dodge") +
labs(x = "Associated gene category", y = "Number of transcripts") +
scale_x_discrete(labels = labels) +
scale_fill_manual(values=c("red3", "dodgerblue3"),
name=NULL,
breaks=c("EN", "MS"),
labels=c("Known transcripts", "Novel transcripts")) +
theme(legend.position = c(0.75, 0.90)) +
annotate("text", x = 1, y = 750, label = paste0(t.sig.pcts[1,2], "%")) +
theme(text = element_text(size=12)) + ggtitle("A")
ggplot(results.t.sig, aes(fill = ttype, x = sigDE)) + geom_bar(position = "dodge") +
labs(x = "Associated gene category", y = "Number of transcripts") +
scale_x_discrete(labels = labels) +
scale_fill_manual(values=c("red3", "dodgerblue3"),
name=NULL,
breaks=c("EN", "MS"),
labels=c("Known transcripts", "Novel transcripts")) +
theme(legend.position = c(0.75, 0.90)) +
annotate("text", x = 1.25, y = 750, label = paste0(t.sig.pcts[1,2], "%")) +
theme(text = element_text(size=12)) + ggtitle("A")
ggplot(results.t.sig, aes(fill = ttype, x = sigDE)) + geom_bar(position = "dodge") +
labs(x = "Associated gene category", y = "Number of transcripts") +
scale_x_discrete(labels = labels) +
scale_fill_manual(values=c("red3", "dodgerblue3"),
name=NULL,
breaks=c("EN", "MS"),
labels=c("Known transcripts", "Novel transcripts")) +
theme(legend.position = c(0.75, 0.90)) +
annotate("text", x = 1.2, y = 750, label = paste0(t.sig.pcts[1,2], "%")) +
theme(text = element_text(size=12)) + ggtitle("A")
ggplot(results.t.sig, aes(fill = ttype, x = sigDE)) + geom_bar(position = "dodge") +
labs(x = "Associated gene category", y = "Number of transcripts") +
scale_x_discrete(labels = labels) +
scale_fill_manual(values=c("red3", "dodgerblue3"),
name=NULL,
breaks=c("EN", "MS"),
labels=c("Known transcripts", "Novel transcripts")) +
theme(legend.position = c(0.75, 0.90)) +
annotate("text", x = 1.2, y = 750, label = paste0(t.sig.pcts[1,2], "%"), size = 12, color = "white") +
theme(text = element_text(size=12)) + ggtitle("A")
ggplot(results.t.sig, aes(fill = ttype, x = sigDE)) + geom_bar(position = "dodge") +
labs(x = "Associated gene category", y = "Number of transcripts") +
scale_x_discrete(labels = labels) +
scale_fill_manual(values=c("red3", "dodgerblue3"),
name=NULL,
breaks=c("EN", "MS"),
labels=c("Known transcripts", "Novel transcripts")) +
theme(legend.position = c(0.75, 0.90)) +
annotate("text", x = 1.2, y = 750, label = paste0(t.sig.pcts[1,2], "%"), size = 8, color = "white") +
theme(text = element_text(size=12)) + ggtitle("A")
ggplot(results.t.sig, aes(fill = ttype, x = sigDE)) + geom_bar(position = "dodge") +
labs(x = "Associated gene category", y = "Number of transcripts") +
scale_x_discrete(labels = labels) +
scale_fill_manual(values=c("red3", "dodgerblue3"),
name=NULL,
breaks=c("EN", "MS"),
labels=c("Known transcripts", "Novel transcripts")) +
theme(legend.position = c(0.75, 0.90)) +
annotate("text", x = 1.23, y = 750, label = paste0(t.sig.pcts[1,2], "%"), size = 8, color = "white") +
theme(text = element_text(size=12)) + ggtitle("A")
ggplot(results.t.sig, aes(fill = ttype, x = sigDE)) + geom_bar(position = "dodge") +
labs(x = "Associated gene category", y = "Number of transcripts") +
scale_x_discrete(labels = labels) +
scale_fill_manual(values=c("red3", "dodgerblue3"),
name=NULL,
breaks=c("EN", "MS"),
labels=c("Known transcripts", "Novel transcripts")) +
theme(legend.position = c(0.75, 0.90)) +
annotate("text", x = 1.23, y = 800, label = paste0(t.sig.pcts[1,2], "%"), size = 8, color = "white") +
theme(text = element_text(size=12)) + ggtitle("A")
ggplot(results.t.sig, aes(fill = ttype, x = sigDE)) + geom_bar(position = "dodge") +
labs(x = "Associated gene category", y = "Number of transcripts") +
scale_x_discrete(labels = labels) +
scale_fill_manual(values=c("red3", "dodgerblue3"),
name=NULL,
breaks=c("EN", "MS"),
labels=c("Known transcripts", "Novel transcripts")) +
theme(legend.position = c(0.75, 0.90)) +
annotate("text", x = 1.23, y = 800, label = paste0(t.sig.pcts[2,1], "%"), size = 8, color = "white") +
theme(text = element_text(size=12)) + ggtitle("A")
ggplot(results.t.sig, aes(fill = ttype, x = sigDE)) + geom_bar(position = "dodge") +
labs(x = "Associated gene category", y = "Number of transcripts") +
scale_x_discrete(labels = labels) +
scale_fill_manual(values=c("red3", "dodgerblue3"),
name=NULL,
breaks=c("EN", "MS"),
labels=c("Known transcripts", "Novel transcripts")) +
theme(legend.position = c(0.75, 0.90)) +
annotate("text", x = 1.23, y = 800, label = paste0(t.sig.pcts[2,1], "%"), size = 8, color = "white") +
annotate("text", x = 2.23, y = 450, label = paste0(t.sig.pcts[2,2], "%"), size = 8, color = "white") +
theme(text = element_text(size=12)) + ggtitle("A")
ggplot(results.t.sig, aes(fill = ttype, x = sigDE)) + geom_bar(position = "dodge") +
labs(x = "Associated gene category", y = "Number of transcripts") +
scale_x_discrete(labels = labels) +
scale_fill_manual(values=c("red3", "dodgerblue3"),
name=NULL,
breaks=c("EN", "MS"),
labels=c("Known transcripts", "Novel transcripts")) +
theme(legend.position = c(0.75, 0.90)) +
annotate("text", x = 1.23, y = 800, label = paste0(t.sig.pcts[2,1], "%"), size = 8, color = "white") +
annotate("text", x = 2.23, y = 430, label = paste0(t.sig.pcts[2,2], "%"), size = 8, color = "white") +
theme(text = element_text(size=12)) + ggtitle("A")
ggplot(results.t.sig, aes(fill = ttype, x = sigDE)) + geom_bar(position = "dodge") +
labs(x = "Associated gene category", y = "Number of transcripts") +
scale_x_discrete(labels = labels) +
scale_fill_manual(values=c("red3", "dodgerblue3"),
name=NULL,
breaks=c("EN", "MS"),
labels=c("Known transcripts", "Novel transcripts")) +
theme(legend.position = c(0.75, 0.90)) +
annotate("text", x = 1.23, y = 825, label = paste0(t.sig.pcts[2,1], "%"), size = 8, color = "white") +
annotate("text", x = 2.23, y = 430, label = paste0(t.sig.pcts[2,2], "%"), size = 8, color = "white") +
theme(text = element_text(size=12)) + ggtitle("A")
ggplot(results.t.sig, aes(fill = ttype, x = sigDE)) + geom_bar(position = "dodge") +
labs(x = "Associated gene category", y = "Number of transcripts") +
scale_x_discrete(labels = labels) +
scale_fill_manual(values=c("red3", "dodgerblue3"),
name=NULL,
breaks=c("EN", "MS"),
labels=c("Known transcripts", "Novel transcripts")) +
theme(legend.position = c(0.75, 0.90)) +
annotate("text", x = 1.23, y = 830, label = paste0(t.sig.pcts[2,1], "%"), size = 8, color = "white") +
annotate("text", x = 2.23, y = 430, label = paste0(t.sig.pcts[2,2], "%"), size = 8, color = "white") +
theme(text = element_text(size=12)) + ggtitle("A")
table(substr(BXH1IR.nospike$transcript_id, start = 1, stop = 2))
round((table(substr(BXH1IR.nospike$transcript_id, start = 1, stop = 2)))/length(BXH1IR.nospike$transcript_id)*100, 2)
table(bg.both.t$cand2)
noDEg.yesDEt <- bg.both.t[bg.both.t$cand2 == TRUE, ]
View(bg.both.t)
noDEg.yesDEt <- bg.both.t[bg.both.t$cand2 == TRUE, "gene_id"]
noDEg.yesDEt.index <- bg.both.t[bg.both.t$cand2 == TRUE, "gene_id"]
noDEg.yesDEt <- BXH1IR.nospike[which(BXH1IR.nospike$gene_id %in% noDEg.yesDEt.index), ]
sum(!duplicated(noDEg.yesDEt$gene_id))
## Read in RSEM data by batch number
library(stcr)
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/"
dirs2 <- "/Volumes/rn6/quantitation/HS_brainPolyA/"
dirlocal <- "~/Desktop/Saba_Lab/"
location <- "reconst.Full"
N <- list(1, 2, "_3_4_5")
tissue <- "Brain"
qtype <- "counts"
filename <- "cnts.merged"
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", location = location, filename = filename)
dir <- "/Volumes/Saba_Lab/RNA-Seq/HS/"
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", location = location, filename = filename)
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/"
dirs2 <- "/Volumes/rn6/quantitation/HS_brainPolyA/"
dirlocal <- "~/Desktop/Saba_Lab/"
location <- "reconst.Full"
N <- list(1, 2, "_3_4_5")
tissue <- "Brain"
qtype <- "counts"
filename <- "cnts.merged"
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", location = location, filename = filename)
## Read in RSEM data by batch number
library(stcr)
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/"
dirs2 <- "/Volumes/rn6/quantitation/brainTotalRNA/RI/"
dirlocal <- "~/Desktop/Saba_Lab/"
location <- "RI.reconst.v1"
N <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
tissue <- "Brain"
qtype <- "counts"
filename <- "cnts.merged.brain"
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", location = location, filename = "test")
## Read in RSEM data by batch number
library(stcr)
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/"
dirs2 <- "/Volumes/rn6/quantitation/HS_brainPolyA/"
dirlocal <- "~/Desktop/Saba_Lab/"
location <- "reconst.Full"
N <- list(1, 2, "_3_4_5")
tissue <- "Brain"
qtype <- "counts"
filename <- "cnts.merged"
rsem.read.iso(dir, dirs2, tissue, N, qtype = qtype, level = "transcript", location = location, filename = filename)
load("/Volumes/smiharry/Saba_Lab/RNA-Seq/HS/Transcript_Reconstruction/Brain/quantitation/cnts.merged.RData")
View(cntsMerged)
names(cntsMerged)
