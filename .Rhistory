geneLevel = dge.genes
geneLevel$geneLevel_pctDiff = paste(sprintf("%.1f",round(100*(2^geneLevel$log2FoldChange),1)),"%",sep="") #format percent differential expression
geneLevel$geneLevel_pvalue = format(geneLevel$pvalue,digits=2,scientific=TRUE) #format p-value
geneLevel$geneLevel_FDR = sprintf("%.4f",round(geneLevel$padj,4)) #format false discovery rate (10%)
geneLevel$geneLevel_FDR[geneLevel$geneLevel_FDR=="0.0000"] = "<0.0001" #format low p-values into somethig that makes sense
geneLevel = geneLevel[,c("Gene.stable.ID","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
#isolate significant isoforms - FDR<0.05
sigGenes <- dge_v2[dge_v2$padj<0.05,]
#create print ready variables
sigGenes$Description <- unlist(lapply(strsplit(sigGenes$Gene.description,split="[",fixed=TRUE),function(a) a[1])) #format gene description
sigGenes$GeneLoc.Mb <- sprintf("%.1f",round(sigGenes$Gene.start..bp./1000000,1)) #format location by converting to mega bases
sigGenes$GeneLoc <- paste("Chr",sigGenes$Chromosome.scaffold.name,": ",sigGenes$GeneLoc.Mb," Mb",sep="") #add chr label to location
sigGenes$strand <- c("+","-")[as.numeric(sigGenes$Strand<0) + 1] #format strand direction
#orange - green
sigGenes$pctOfControl = paste(sprintf("%.1f",round(100*(2^sigGenes$log2FoldChange),1)),"%",sep="")
sigGenes$pvalue = format(sigGenes$pvalue,digits=2,scientific=TRUE)
sigGenes$FDR = sprintf("%.4f",round(sigGenes$padj,4))
sigGenes$FDR[sigGenes$FDR=="0.0000"] = "<0.0001"
sigGenes$treated_isoPct = paste(sprintf("%.1f",round(sigGenes$treated_isoPct,1)),"%")
sigGenes$Untreated_isoPct = paste(sprintf("%.1f",round(sigGenes$Untreated_isoPct,1)),"%")
sigGenes = merge(sigGenes,geneLevel,by="Gene.stable.ID",all.x=T)
sigGenes = sigGenes[,c("Gene.name","Gene.description","Gene.stable.ID","Transcript.stable.ID","Transcript.count","GeneLoc","Strand","Gene.type","pctOfControl","pvalue","FDR","treated_isoPct","Untreated_isoPct","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
sigGenes = sigGenes[order(sigGenes$pvalue),]
colnames(sigGenes) = c("Gene Symbol","Gene Description","Ensembl Gene ID","Ensembl Transcript ID","Number of Isoforms","Gene Location","Strand","Transcript Type","Expression in Cases as Percent of Controls","Unadjusted P-value","FDR","Median Percent of Reads from Gene Allotted to this Isoform - Cases","Median Percent of Reads from Gene Allotted to this Isoform - Controls","Percent Difference in Gene Level Analysis","Unadjusted pvalue in Gene Level Analysis","FDR in Gene Level Analysis")
sigSummary <- sigGenes
save(sigSummary, geneLevel, file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/SigSummary.RData")
write.csv(sigSummary,file="/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/tables/sigSummary.csv",row.names=FALSE,quote=FALSE)
rm(list=ls())
options(stringsAsFactors = FALSE)
#load results
load(file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/dge.RData")
#isolate significant results - FDR<0.05
sigGenes <- dge.genes[dge.genes$padj<0.05,] #Pull out genes with adjusted p-values less than 0.05
#create print ready variables
sigGenes$Description <- unlist(lapply(strsplit(sigGenes$Gene.description,split="[",fixed=TRUE),function(a) a[1])) #remove the source annotation
sigGenes$GeneLoc.Mb <- sprintf("%.1f",round(sigGenes$Gene.start..bp./1000000,1)) #Convert Gene start into Mb units and round to 1 decimal place
sigGenes$GeneLoc <- paste("Chr",sigGenes$Chromosome.scaffold.name,": ",sigGenes$GeneLoc.Mb," Mb",sep="") #Make location variable look like chr1:##Mb
sigGenes$strand <- c("+","-")[as.numeric(sigGenes$Strand<0) + 1] #Assign positive or negative symbol to the appropriate strand
#orange - green
sigGenes$pctOfControl = paste(sprintf("%.1f",round(100*(2^sigGenes$log2FoldChange),1)),"%",sep="") ##Back transform fold change from log base 2, and format into a percent
sigGenes$pvalue = format(sigGenes$pvalue,digits=2,scientific=TRUE) #Format p-value
sigGenes$FDR = sprintf("%.4f",round(sigGenes$padj,4)) #format false discovery rate
sigGenes$FDR[sigGenes$FDR=="0.0000"] = "<0.0001" #Format low false discovery rate to something more readable
sigGenes = sigGenes[,c("Gene.name","Description","Gene.stable.ID","Transcript.count","GeneLoc","strand","Gene.type","pctOfControl","pvalue","FDR")]
colnames(sigGenes) = c("Gene Symbol","Gene Description","Ensembl Gene ID","Number of Isoforms","Gene Location","Strand","Gene Type","Expression in Cases as Percent of Controls","Unadjusted P-value","FDR")
save(sigGenes, file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/SigGenes.RData")
write.csv(sigGenes, file="/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/tables/sigGenes.csv",row.names=FALSE,quote=FALSE)
sigGenes <- sigGenes[order(sigGenes$`Unadjusted P-value`), ]
save(sigGenes, file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/SigGenes.RData")
write.csv(sigGenes, file="/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/tables/sigGenes.csv",row.names=FALSE,quote=FALSE)
rm(list=ls())
options(stringsAsFactors = FALSE)
#load results
load(file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/dge.RData")
#gene level results
geneLevel = dge.genes
geneLevel$geneLevel_pctDiff = paste(sprintf("%.1f",round(100*(2^geneLevel$log2FoldChange),1)),"%",sep="") #format percent differential expression
geneLevel$geneLevel_pvalue = format(geneLevel$pvalue,digits=2,scientific=TRUE) #format p-value
geneLevel$geneLevel_FDR = sprintf("%.4f",round(geneLevel$padj,4)) #format false discovery rate (10%)
geneLevel$geneLevel_FDR[geneLevel$geneLevel_FDR=="0.0000"] = "<0.0001" #format low p-values into somethig that makes sense
geneLevel = geneLevel[,c("Gene.stable.ID","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
#isolate significant isoforms - FDR<0.05
sigGenes <- dge_v2[dge_v2$padj<0.05,]
#create print ready variables
sigGenes$Description <- unlist(lapply(strsplit(sigGenes$Gene.description,split="[",fixed=TRUE),function(a) a[1])) #format gene description
sigGenes$GeneLoc.Mb <- sprintf("%.1f",round(sigGenes$Gene.start..bp./1000000,1)) #format location by converting to mega bases
sigGenes$GeneLoc <- paste("Chr",sigGenes$Chromosome.scaffold.name,": ",sigGenes$GeneLoc.Mb," Mb",sep="") #add chr label to location
sigGenes$strand <- c("+","-")[as.numeric(sigGenes$Strand<0) + 1] #format strand direction
#orange - green
sigGenes$pctOfControl = paste(sprintf("%.1f",round(100*(2^sigGenes$log2FoldChange),1)),"%",sep="")
sigGenes$pvalue = format(sigGenes$pvalue,digits=2,scientific=TRUE)
sigGenes$FDR = sprintf("%.4f",round(sigGenes$padj,4))
sigGenes$FDR[sigGenes$FDR=="0.0000"] = "<0.0001"
sigGenes$treated_isoPct = paste(sprintf("%.1f",round(sigGenes$treated_isoPct,1)),"%")
sigGenes$Untreated_isoPct = paste(sprintf("%.1f",round(sigGenes$Untreated_isoPct,1)),"%")
sigGenes = merge(sigGenes,geneLevel,by="Gene.stable.ID",all.x=T)
sigGenes = sigGenes[,c("Gene.name","Gene.description","Gene.stable.ID","Transcript.stable.ID","Transcript.count","GeneLoc","Strand","Gene.type","pctOfControl","pvalue","FDR","treated_isoPct","Untreated_isoPct","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
sigGenes = sigGenes[order(sigGenes$pvalue),]
colnames(sigGenes) = c("Gene Symbol","Gene Description","Ensembl Gene ID","Ensembl Transcript ID","Number of Isoforms","Gene Location","Strand","Transcript Type","Expression in Cases as Percent of Controls","Unadjusted P-value","FDR","Median Percent of Reads from Gene Allotted to this Isoform - Cases","Median Percent of Reads from Gene Allotted to this Isoform - Controls","Percent Difference in Gene Level Analysis","Unadjusted pvalue in Gene Level Analysis","FDR in Gene Level Analysis")
sigSummary <- sigGenes
View(sigSummary)
rm(list=ls())
options(stringsAsFactors = FALSE)
#load results
load(file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/dge.RData")
#gene level results
geneLevel = dge.genes
geneLevel$geneLevel_pctDiff = paste(sprintf("%.1f",round(100*(2^geneLevel$log2FoldChange),1)),"%",sep="") #format percent differential expression
geneLevel$geneLevel_pvalue = format(geneLevel$pvalue,digits=2,scientific=TRUE) #format p-value
geneLevel$geneLevel_FDR = sprintf("%.4f",round(geneLevel$padj,4)) #format false discovery rate (10%)
geneLevel$geneLevel_FDR[geneLevel$geneLevel_FDR=="0.0000"] = "<0.0001" #format low p-values into somethig that makes sense
geneLevel = geneLevel[,c("Gene.stable.ID","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
#isolate significant isoforms - FDR<0.05
sigGenes <- dge_v2[dge_v2$padj<0.05,]
#create print ready variables
sigGenes$Description <- unlist(lapply(strsplit(sigGenes$Gene.description,split="[",fixed=TRUE),function(a) a[1])) #format gene description
sigGenes$GeneLoc.Mb <- sprintf("%.1f",round(sigGenes$Gene.start..bp./1000000,1)) #format location by converting to mega bases
sigGenes$GeneLoc <- paste("Chr",sigGenes$Chromosome.scaffold.name,": ",sigGenes$GeneLoc.Mb," Mb",sep="") #add chr label to location
sigGenes$strand <- c("+","-")[as.numeric(sigGenes$Strand<0) + 1] #format strand direction
#orange - green
sigGenes$pctOfControl = paste(sprintf("%.1f",round(100*(2^sigGenes$log2FoldChange),1)),"%",sep="")
sigGenes$pvalue = format(sigGenes$pvalue,digits=2,scientific=TRUE)
sigGenes$FDR = sprintf("%.4f",round(sigGenes$padj,4))
sigGenes$FDR[sigGenes$FDR=="0.0000"] = "<0.0001"
sigGenes$treated_isoPct = paste(sprintf("%.1f",round(sigGenes$treated_isoPct,1)),"%")
sigGenes$Untreated_isoPct = paste(sprintf("%.1f",round(sigGenes$Untreated_isoPct,1)),"%")
sigGenes = merge(sigGenes,geneLevel,by="Gene.stable.ID",all.x=T)
sigGenes = sigGenes[,c("Gene.name","Gene.description","Gene.stable.ID","Transcript.stable.ID","Transcript.count","GeneLoc","Strand","Gene.type","pctOfControl","pvalue","FDR","treated_isoPct","Untreated_isoPct","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
sigGenes = sigGenes[order(sigGenes$pvalue),]
View(sigGenes)
rm(list=ls())
options(stringsAsFactors = FALSE)
#load results
load(file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/dge.RData")
#gene level results
geneLevel = dge.genes
geneLevel$geneLevel_pctDiff = paste(sprintf("%.1f",round(100*(2^geneLevel$log2FoldChange),1)),"%",sep="") #format percent differential expression
geneLevel$geneLevel_pvalue = format(geneLevel$pvalue,digits=2,scientific=TRUE) #format p-value
geneLevel$geneLevel_FDR = sprintf("%.4f",round(geneLevel$padj,4)) #format false discovery rate (10%)
geneLevel$geneLevel_FDR[geneLevel$geneLevel_FDR=="0.0000"] = "<0.0001" #format low p-values into somethig that makes sense
geneLevel = geneLevel[,c("Gene.stable.ID","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
#isolate significant isoforms - FDR<0.05
sigGenes <- dge_v2[dge_v2$padj<0.05,]
#create print ready variables
sigGenes$Description <- unlist(lapply(strsplit(sigGenes$Gene.description,split="[",fixed=TRUE),function(a) a[1])) #format gene description
sigGenes$GeneLoc.Mb <- sprintf("%.1f",round(sigGenes$Gene.start..bp./1000000,1)) #format location by converting to mega bases
sigGenes$GeneLoc <- paste("Chr",sigGenes$Chromosome.scaffold.name,": ",sigGenes$GeneLoc.Mb," Mb",sep="") #add chr label to location
sigGenes$strand <- c("+","-")[as.numeric(sigGenes$Strand<0) + 1] #format strand direction
#orange - green
sigGenes$pctOfControl = paste(sprintf("%.1f",round(100*(2^sigGenes$log2FoldChange),1)),"%",sep="")
sigGenes$pvalue = format(sigGenes$pvalue,digits=2,scientific=TRUE)
sigGenes$FDR = sprintf("%.4f",round(sigGenes$padj,4))
sigGenes$FDR[sigGenes$FDR=="0.0000"] = "<0.0001"
sigGenes$treated_isoPct = paste(sprintf("%.1f",round(sigGenes$treated_isoPct,1)),"%")
sigGenes$Untreated_isoPct = paste(sprintf("%.1f",round(sigGenes$Untreated_isoPct,1)),"%")
sigGenes = merge(sigGenes,geneLevel,by="Gene.stable.ID",all.x=T)
sigGenes = sigGenes[,c("Gene.name","Gene.description","Gene.stable.ID","Transcript.stable.ID","Transcript.count","GeneLoc","Strand","Gene.type","pctOfControl","pvalue","FDR","treated_isoPct","Untreated_isoPct","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
sigGenes = sigGenes[order(sigGenes$pvalue),]
colnames(sigGenes) = c("Gene Symbol","Gene Description","Ensembl Gene ID","Ensembl Transcript ID","Number of Isoforms","Gene Location","Strand","Transcript Type","Expression in Cases as Percent of Controls","Unadjusted P-value","FDR","Median Percent of Reads from Gene Allotted to this Isoform - Cases","Median Percent of Reads from Gene Allotted to this Isoform - Controls","Percent Difference in Gene Level Analysis","Unadjusted pvalue in Gene Level Analysis","FDR in Gene Level Analysis")
sigSummary <- sigGenes
save(sigSummary, geneLevel, file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/SigSummary.RData")
write.csv(sigSummary,file="/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/tables/sigSummary.csv",row.names=FALSE,quote=FALSE)
rm(list=ls())
options(stringsAsFactors = FALSE)
#load results
load(file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/dge.RData")
#isolate significant results - FDR<0.05
sigGenes <- dge.genes[dge.genes$padj<0.05,] #Pull out genes with adjusted p-values less than 0.05
#create print ready variables
sigGenes$Description <- unlist(lapply(strsplit(sigGenes$Gene.description,split="[",fixed=TRUE),function(a) a[1])) #remove the source annotation
sigGenes$GeneLoc.Mb <- sprintf("%.1f",round(sigGenes$Gene.start..bp./1000000,1)) #Convert Gene start into Mb units and round to 1 decimal place
sigGenes$GeneLoc <- paste("Chr",sigGenes$Chromosome.scaffold.name,": ",sigGenes$GeneLoc.Mb," Mb",sep="") #Make location variable look like chr1:##Mb
sigGenes$strand <- c("+","-")[as.numeric(sigGenes$Strand<0) + 1] #Assign positive or negative symbol to the appropriate strand
#orange - green
sigGenes$pctOfControl = paste(sprintf("%.1f",round(100*(2^sigGenes$log2FoldChange),1)),"%",sep="") ##Back transform fold change from log base 2, and format into a percent
sigGenes$pvalue = format(sigGenes$pvalue,digits=2,scientific=TRUE) #Format p-value
sigGenes$FDR = sprintf("%.4f",round(sigGenes$padj,4)) #format false discovery rate
sigGenes$FDR[sigGenes$FDR=="0.0000"] = "<0.0001" #Format low false discovery rate to something more readable
sigGenes = sigGenes[,c("Gene.name","Description","Gene.stable.ID","Transcript.count","GeneLoc","strand","Gene.type","pctOfControl","pvalue","FDR")]
colnames(sigGenes) = c("Gene Symbol","Gene Description","Ensembl Gene ID","Number of Isoforms","Gene Location","Strand","Gene Type","Expression in Cases as Percent of Controls","Unadjusted P-value","FDR")
save(sigGenes, file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/SigGenes.RData")
write.csv(sigGenes, file="/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/tables/sigGenes.csv",row.names=FALSE,quote=FALSE)
rm(list=ls())
options(stringsAsFactors = FALSE)
#load results
load(file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/dge.RData")
#gene level results
geneLevel = dge.genes
geneLevel$geneLevel_pctDiff = paste(sprintf("%.1f",round(100*(2^geneLevel$log2FoldChange),1)),"%",sep="") #format percent differential expression
geneLevel$geneLevel_pvalue = format(geneLevel$pvalue,digits=2,scientific=TRUE) #format p-value
geneLevel$geneLevel_FDR = sprintf("%.4f",round(geneLevel$padj,4)) #format false discovery rate (10%)
geneLevel$geneLevel_FDR[geneLevel$geneLevel_FDR=="0.0000"] = "<0.0001" #format low p-values into somethig that makes sense
geneLevel = geneLevel[,c("Gene.stable.ID","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
#isolate significant isoforms - FDR<0.05
sigGenes <- dge_v2[dge_v2$padj<0.05,]
#create print ready variables
sigGenes$Description <- unlist(lapply(strsplit(sigGenes$Gene.description,split="[",fixed=TRUE),function(a) a[1])) #format gene description
sigGenes$GeneLoc.Mb <- sprintf("%.1f",round(sigGenes$Gene.start..bp./1000000,1)) #format location by converting to mega bases
sigGenes$GeneLoc <- paste("Chr",sigGenes$Chromosome.scaffold.name,": ",sigGenes$GeneLoc.Mb," Mb",sep="") #add chr label to location
sigGenes$strand <- c("+","-")[as.numeric(sigGenes$Strand<0) + 1] #format strand direction
#orange - green
sigGenes$pctOfControl = paste(sprintf("%.1f",round(100*(2^sigGenes$log2FoldChange),1)),"%",sep="")
sigGenes$pvalue = format(sigGenes$pvalue,digits=2,scientific=TRUE)
sigGenes$FDR = sprintf("%.4f",round(sigGenes$padj,4))
sigGenes$FDR[sigGenes$FDR=="0.0000"] = "<0.0001"
sigGenes$treated_isoPct = paste(sprintf("%.1f",round(sigGenes$treated_isoPct,1)),"%")
sigGenes$Untreated_isoPct = paste(sprintf("%.1f",round(sigGenes$Untreated_isoPct,1)),"%")
sigGenes = merge(sigGenes,geneLevel,by="Gene.stable.ID",all.x=T)
sigGenes = sigGenes[,c("Gene.name","Gene.description","Gene.stable.ID","Transcript.stable.ID","Transcript.count","GeneLoc","Strand","Gene.type","pctOfControl","pvalue","FDR","treated_isoPct","Untreated_isoPct","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
sigGenes = sigGenes[order(sigGenes$pvalue),]
sigGenes$Gene.description <- gsub(",", ";", sigGenes$Gene.description, fixed = T)
colnames(sigGenes) = c("Gene Symbol","Gene Description","Ensembl Gene ID","Ensembl Transcript ID","Number of Isoforms","Gene Location","Strand","Transcript Type","Expression in Cases as Percent of Controls","Unadjusted P-value","FDR","Median Percent of Reads from Gene Allotted to this Isoform - Cases","Median Percent of Reads from Gene Allotted to this Isoform - Controls","Percent Difference in Gene Level Analysis","Unadjusted pvalue in Gene Level Analysis","FDR in Gene Level Analysis")
sigSummary <- sigGenes
save(sigSummary, geneLevel, file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/SigSummary.RData")
write.csv(sigSummary,file="/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/tables/sigSummary.csv",row.names=FALSE,quote=FALSE)
rm(list=ls())
options(stringsAsFactors = FALSE)
#load results
load(file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/dge.RData")
#isolate significant results - FDR<0.05
sigGenes <- dge.genes[dge.genes$padj<0.05,] #Pull out genes with adjusted p-values less than 0.05
#create print ready variables
sigGenes$Description <- unlist(lapply(strsplit(sigGenes$Gene.description,split="[",fixed=TRUE),function(a) a[1])) #remove the source annotation
sigGenes$GeneLoc.Mb <- sprintf("%.1f",round(sigGenes$Gene.start..bp./1000000,1)) #Convert Gene start into Mb units and round to 1 decimal place
sigGenes$GeneLoc <- paste("Chr",sigGenes$Chromosome.scaffold.name,": ",sigGenes$GeneLoc.Mb," Mb",sep="") #Make location variable look like chr1:##Mb
sigGenes$strand <- c("+","-")[as.numeric(sigGenes$Strand<0) + 1] #Assign positive or negative symbol to the appropriate strand
#orange - green
sigGenes$pctOfControl = paste(sprintf("%.1f",round(100*(2^sigGenes$log2FoldChange),1)),"%",sep="") ##Back transform fold change from log base 2, and format into a percent
sigGenes$pvalue = format(sigGenes$pvalue,digits=2,scientific=TRUE) #Format p-value
sigGenes$FDR = sprintf("%.4f",round(sigGenes$padj,4)) #format false discovery rate
sigGenes$FDR[sigGenes$FDR=="0.0000"] = "<0.0001" #Format low false discovery rate to something more readable
sigGenes = sigGenes[,c("Gene.name","Description","Gene.stable.ID","Transcript.count","GeneLoc","strand","Gene.type","pctOfControl","pvalue","FDR")]
sigGenes$Gene.description <- gsub(",", ";", sigGenes$Gene.description, fixed = T)
colnames(sigGenes) = c("Gene Symbol","Gene Description","Ensembl Gene ID","Number of Isoforms","Gene Location","Strand","Gene Type","Expression in Cases as Percent of Controls","Unadjusted P-value","FDR")
save(sigGenes, file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/SigGenes.RData")
write.csv(sigGenes, file="/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/tables/sigGenes.csv",row.names=FALSE,quote=FALSE)
## WORKING FROM LOCAL MACHINE SOURCE ##
source("~/Desktop/Saba_Lab/Liver/code/rsem.read.R")
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/"
dirs2 <- "/Volumes/rn6/quantitation/liverTotalRNA/RI/"
dirlocal <- "~/Desktop/Saba_Lab/"
N <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
tissue <- "Liver"
options(stringsAsFactors = FALSE)
library(rtracklayer)
library(GenomicRanges)
ST_gtfClean <- import(paste(directory, file_merged, sep = ""))
directory <- paste(dirlocal, tissue, "/quantitation/", sep = "")
file_merged <- "stringtie_results_liver.gtf"
sample_merged <- "merged"
options(stringsAsFactors = FALSE)
library(rtracklayer)
library(GenomicRanges)
ST_gtfClean <- import(paste(directory, file_merged, sep = ""))
ST_df <- as.data.frame(ST_gtfClean) #Converts the object above to a dataframe
View(ST_df)
#load results
load(file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/dge.RData")
#gene level results
geneLevel = dge.genes
View(geneLevel)
geneLevel$geneLevel_pctDiff = paste(sprintf("%.1f",round(100*(2^geneLevel$log2FoldChange),1)),"%",sep="") #format percent differential expression
geneLevel$geneLevel_pvalue = format(geneLevel$pvalue,digits=2,scientific=TRUE) #format p-value
geneLevel$geneLevel_FDR = sprintf("%.4f",round(geneLevel$padj,4)) #format false discovery rate (10%)
geneLevel$geneLevel_FDR[geneLevel$geneLevel_FDR=="0.0000"] = "<0.0001" #format low p-values into somethig that makes sense
geneLevel = geneLevel[,c("Gene.stable.ID","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
#isolate significant isoforms - FDR<0.05
sigGenes <- dge_v2[dge_v2$padj<0.05,]
#create print ready variables
sigGenes$Description <- unlist(lapply(strsplit(sigGenes$Gene.description,split="[",fixed=TRUE),function(a) a[1])) #format gene description
sigGenes$GeneLoc.Mb <- sprintf("%.1f",round(sigGenes$Gene.start..bp./1000000,1)) #format location by converting to mega bases
sigGenes$GeneLoc <- paste("Chr",sigGenes$Chromosome.scaffold.name,": ",sigGenes$GeneLoc.Mb," Mb",sep="") #add chr label to location
sigGenes$strand <- c("+","-")[as.numeric(sigGenes$Strand<0) + 1] #format strand direction
#orange - green
sigGenes$pctOfControl = paste(sprintf("%.1f",round(100*(2^sigGenes$log2FoldChange),1)),"%",sep="")
sigGenes$pvalue = format(sigGenes$pvalue,digits=2,scientific=TRUE)
sigGenes$FDR = sprintf("%.4f",round(sigGenes$padj,4))
sigGenes$FDR[sigGenes$FDR=="0.0000"] = "<0.0001"
sigGenes$treated_isoPct = paste(sprintf("%.1f",round(sigGenes$treated_isoPct,1)),"%")
sigGenes$Untreated_isoPct = paste(sprintf("%.1f",round(sigGenes$Untreated_isoPct,1)),"%")
sigGenes = merge(sigGenes,geneLevel,by="Gene.stable.ID",all.x=T)
View(sigGenes)
harry <- ST_df
colnames(harry)[5] <- "Strand"
harry <- harry[, c(5,10, 11)]
smith <- merge(sigGenes, harry, by.x = "Transcript.stable.ID", by.y = "transcript_id")
View(smith)
rm(smith)
smith <- merge(sigGenes, harry, by.x = "Transcript.stable.ID", by.y = "transcript_id", all.x = TRUE)
View(smith)
View(sigGenes)
harry <- ST_df
for(i in 1:length(sigGenes$Transcript.stable.ID)) {
txpos <- match(sigGenes$Transcript.stable.ID[i], harry$transcript_id)
tID <- BXH1IR.nospike$transcript_id[txpos]
if(startsWith(tID, "MSTRG")){sigGenes$Strand[i] = harry$strand[txpos]} else {sigGenes$Strand[i] = sigGenes$Strand[i]}
}
for(i in 1:length(sigGenes$Transcript.stable.ID)) {
txpos <- match(sigGenes$Transcript.stable.ID[i], harry$transcript_id)
tID <- harry$transcript_id[txpos]
if(startsWith(tID, "MSTRG")){sigGenes$Strand[i] = harry$strand[txpos]} else {sigGenes$Strand[i] = sigGenes$Strand[i]}
}
txpos <- match(sigGenes$Transcript.stable.ID[i], harry$transcript_id)
txpos
sigGenes$Transcript.stable.ID[i]
harry$transcript_id
txpos <- match(sigGenes$Transcript.stable.ID[400], harry$transcript_id)
txpos
tID <- harry$transcript_id[txpos]
tID
if(startsWith(tID, "MSTRG")){sigGenes$Strand[400] = harry$strand[txpos]} else {sigGenes$Strand[400] = sigGenes$Strand[400]}
sigGenes$Strand[400]
harry$strand[txpos]
tID
startsWith(tID, "MSTRG")
txpos <- match(sigGenes$Transcript.stable.ID[400], harry$transcript_id)
tID <- harry$transcript_id[txpos]
if(startsWith(tID, "MSTRG")){sigGenes$Strand[400] = harry$strand[txpos]} else {sigGenes$Strand[400] = sigGenes$Strand[400]}
sigGenes$Strand[400]
txpos <- match(sigGenes$Transcript.stable.ID[400], harry$transcript_id)
tID <- harry$transcript_id[txpos]
if(startsWith(tID, "MSTRG")){sigGenes$Strand[400] = as.character(harry$strand[txpos])} else {sigGenes$Strand[400] = sigGenes$Strand[400]}
sigGenes$Strand[400]
## Read in "stringtie_merged_results.gtf" and format into dataframe
directory <- "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/stringtie/"
file_merged <- "stringtie_results.gtf"
sample_merged <- "merged"
options(stringsAsFactors = FALSE)
library(rtracklayer)
library(GenomicRanges)
ST_gtfClean <- import(paste(directory, file_merged, sep = "")) #This imports the .gtf file and formats the information in the file and the 9th column to something more    readible
ST_df <- as.data.frame(ST_gtfClean) #Converts the object above to a dataframe
harry <- ST_df
txpos <- match(sigGenes$Transcript.stable.ID[400], harry$transcript_id)
tID <- harry$transcript_id[txpos]
if(startsWith(tID, "MSTRG")){sigGenes$Strand[400] = as.character(harry$strand[txpos])} else {sigGenes$Strand[400] = sigGenes$Strand[400]}
sigGenes$Strand[400]
for(i in 1:length(sigGenes$Transcript.stable.ID)) {
txpos <- match(sigGenes$Transcript.stable.ID[i], harry$transcript_id)
tID <- harry$transcript_id[txpos]
if(startsWith(tID, "MSTRG")){sigGenes$Strand[i] = as.character(harry$strand[txpos])} else {sigGenes$Strand[i] = sigGenes$Strand[i]}
}
View(harry)
rm(list=ls())
options(stringsAsFactors = FALSE)
#load results
load(file = "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/quantitation/reconst/dge.RData")
#gene level results
geneLevel = dge.genes
geneLevel$geneLevel_pctDiff = paste(sprintf("%.1f",round(100*(2^geneLevel$log2FoldChange),1)),"%",sep="") #format percent differential expression
geneLevel$geneLevel_pvalue = format(geneLevel$pvalue,digits=2,scientific=TRUE) #format p-value
geneLevel$geneLevel_FDR = sprintf("%.4f",round(geneLevel$padj,4)) #format false discovery rate (10%)
geneLevel$geneLevel_FDR[geneLevel$geneLevel_FDR=="0.0000"] = "<0.0001" #format low p-values into somethig that makes sense
geneLevel = geneLevel[,c("Gene.stable.ID","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
#isolate significant isoforms - FDR<0.05
sigGenes <- dge_v2[dge_v2$padj<0.05,]
#create print ready variables
sigGenes$Description <- unlist(lapply(strsplit(sigGenes$Gene.description,split="[",fixed=TRUE),function(a) a[1])) #format gene description
sigGenes$GeneLoc.Mb <- sprintf("%.1f",round(sigGenes$Gene.start..bp./1000000,1)) #format location by converting to mega bases
sigGenes$GeneLoc <- paste("Chr",sigGenes$Chromosome.scaffold.name,": ",sigGenes$GeneLoc.Mb," Mb",sep="") #add chr label to location
sigGenes$strand <- c("+","-")[as.numeric(sigGenes$Strand<0) + 1] #format strand direction
#orange - green
sigGenes$pctOfControl = paste(sprintf("%.1f",round(100*(2^sigGenes$log2FoldChange),1)),"%",sep="")
sigGenes$pvalue = format(sigGenes$pvalue,digits=2,scientific=TRUE)
sigGenes$FDR = sprintf("%.4f",round(sigGenes$padj,4))
sigGenes$FDR[sigGenes$FDR=="0.0000"] = "<0.0001"
sigGenes$treated_isoPct = paste(sprintf("%.1f",round(sigGenes$treated_isoPct,1)),"%")
sigGenes$Untreated_isoPct = paste(sprintf("%.1f",round(sigGenes$Untreated_isoPct,1)),"%")
sigGenes = merge(sigGenes,geneLevel,by="Gene.stable.ID",all.x=T)
sigGenes = sigGenes[,c("Gene.name","Gene.description","Gene.stable.ID","Transcript.stable.ID","Transcript.count","GeneLoc","Strand","Gene.type","pctOfControl","pvalue","FDR","treated_isoPct","Untreated_isoPct","geneLevel_pctDiff","geneLevel_pvalue","geneLevel_FDR")]
sigGenes = sigGenes[order(sigGenes$pvalue),]
sigGenes$Gene.description <- gsub(",", ";", sigGenes$Gene.description, fixed = T)
## Read in "stringtie_merged_results.gtf" and format into dataframe
directory <- "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/stringtie/"
file_merged <- "stringtie_results.gtf"
sample_merged <- "merged"
options(stringsAsFactors = FALSE)
library(rtracklayer)
library(GenomicRanges)
ST_gtfClean <- import(paste(directory, file_merged, sep = "")) #This imports the .gtf file and formats the information in the file and the 9th column to something more    readible
ST_df <- as.data.frame(ST_gtfClean) #Converts the object above to a dataframe
harry <- ST_df
for(i in 1:length(sigGenes$Transcript.stable.ID)) {
txpos <- match(sigGenes$Transcript.stable.ID[i], harry$transcript_id)
tID <- harry$transcript_id[txpos]
if(startsWith(tID, "MSTRG")){sigGenes$Strand[i] = as.character(harry$strand[txpos])} else {sigGenes$Strand[i] = sigGenes$Strand[i]}
}
View(sigGenes)
## Set up workspace
rm(list = ls())
options(stringsAsFactors = FALSE)
## Source rsem.read
source("/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/code/DE_analysis/BE.functions.R")
rsem.read
## Set up workspace
rm(list = ls())
options(stringsAsFactors = FALSE)
## Source rsem.read
source("/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/code/DE_analysis/BE.functions.R")
## Point to sample data
dirs <- "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/data/sampleInfo.2017-01-12.txt"
## Point to RSEM output
dirs2 <- "/Volumes/data/home/smiharry/Saba_Lab/RNA-Seq/Brain-Epilepsy/quantitation/rsem.Ensembl.SE/"
rsem.read(dirs, dirs2, level = "isoforms", col1.lable = "transcript_id")
rm(list = ls())
options(stringsAsFactors = FALSE)
## Source rsem.read
source("/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/code/DE_analysis/BE.functions.R")
## Point to sample data
dirs <- "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/data/sampleInfo.2017-01-12.txt"
## Point to RSEM output
dirs2 <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/Brain-Epilepsy/quantitation/rsem.Ensembl.SE/"
rsem.read(dirs, dirs2, level = "isoforms", col1.lable = "transcript_id")
## Set up workspace
rm(list = ls())
options(stringsAsFactors = FALSE)
## Source rsem.read
source("/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/code/DE_analysis/BE.functions.R")
## Point to sample data
dirs <- "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/data/sampleInfo.2017-01-12.txt"
## Point to RSEM output
dirs2 <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/Brain-Epilepsy/quantitation/rsem.Ensembl.SE/"
## Generate expected count table at the isoform level
rsem.read(dirs, dirs2, level = "isoforms", col1.lable = "transcript_id")
## Set up workspace
rm(list = ls())
options(stringsAsFactors = FALSE)
## Source rsem.read
source("/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/code/DE_analysis/BE.functions.R")
## Point to sample data
dirs <- "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/data/sampleInfo.2017-01-12.txt"
## Point to RSEM output
dirs2 <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/Brain-Epilepsy/quantitation/rsem.Ensembl.SE/"
## Generate expected count table at the isoform level
rsem.read(dirs, dirs2, level = "isoforms", col1.lable = "transcript_id")
load("/Volumes/smiharry/Saba_Lab/RNA-Seq/Brain-Epilepsy/quantitation/rsem.Ensembl.SE/cnts.Merged.isoforms.Rdata")
paste(dirs, "cnts.Merged.", level, ".Rdata", sep = "")
rm(list = ls())
options(stringsAsFactors = FALSE)
## Source rsem.read
source("/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/code/DE_analysis/BE.functions.R")
## Point to sample data
dirs <- "/Users/smiharry/Desktop/Saba_Lab/RNA-Seq/BE_Molly/data/sampleInfo.2017-01-12.txt"
## Point to RSEM output
dirs2 <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/Brain-Epilepsy/quantitation/rsem.Ensembl.SE/"
## Generate expected count table at the isoform level
rsem.read(dirs, dirs2, level = "isoforms", col1.lable = "transcript_id")
## Generate expected count table at the gene level
rsem.read(dirs, dirs2, level = "genes", col1.lable = "gene_id")
load("/Volumes/smiharry/Saba_Lab/RNA-Seq/Brain-Epilepsy/quantitation/rsem.Ensembl.SE/cnts.Merged.isoforms.Rdata")
load("/Volumes/smiharry/Saba_Lab/RNA-Seq/Brain-Epilepsy/quantitation/rsem.Ensembl.SE/cnts.Merged.genes.Rdata")
View(cnts.gene)
View(cnts.iso)
options(stringsAsFactors=FALSE)
#set directory just above where files are kept
dirs = "/Volumes/smiharry/Saba_Lab/RNA-Seq/Brain-Epilepsy/"
#Read in Human Gene annotation data
anno = read.table(file=paste(dirs,"annotation/Ensembl.humanGenes.GRCh38.p7.txt",sep=""),sep="\t",header=TRUE, quote = "")
#Read in simple sample descriptives
samples = read.table(file=paste(dirs,"data/sampleInfo.2017-01-12.txt",sep=""),sep="\t",header=TRUE)
#create sample ID names that match those used in pre processing (i.e. 1_S25, etc)
sampleID = paste(samples$Tube.Label,samples$prefix,sep="_")
#create data set with transcripts as rows and samples as columns (this is your count or expresion raw data)
for(i in sampleID){
x = read.table(file=paste(dirs,"quantitation/rsem.Ensembl/",i,".genes.results",sep=""),sep="\t",header=TRUE)
y = data.frame(gene_id = x$gene_id, i=x$expected_count)
colnames(y)[2] = i
if(i==sampleID[1]) cnts = y
if(i!=sampleID[1]) cnts = merge(cnts,y,by="gene_id")
}
#make transcript ID the rownames for the cnts dataset
rownames(cnts) = cnts[,1]
cnts = cnts[,-1]
## Make gene/transcript_id column rownames and remove
rownames(cnts.iso) <- cnts.iso$transcript_id
cnts.iso <- cnts.iso[, -1]
rownames(cnts.gene) <- cnts.gene$gene_id
cnts.gene <- cnts.gene[, -1]
apply(cnts, 2, function(x) sum(x))
apply(cnts.gene, 2, function(x) sum(x))
mean(apply(cnts, 2, function(x) sum(x)))
mean(apply(cnts.gene, 2, function(x) sum(x)))
## Source rsem.read
source("/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/Transcript_Reconstruction/code/rsem.read.R")
## WORKING FROM LOCAL MACHINE SOURCE ##
source("~/Desktop/Saba_Lab/Liver/code/rsem.read.R")
## Create global directory objects
dir <- "/Volumes/smiharry/Saba_Lab/RNA-Seq/HRDP/"
dirs2 <- "/Volumes/rn6/quantitation/liverTotalRNA/RI/"
dirlocal <- "~/Desktop/Saba_Lab/"
N <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
tissue <- "Liver"
library(rlbtcp)
rsem.read.iso
remove.packages("rlbtcp")
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
setwd("/Users/smiharry/Desktop/Saba_Lab/RLBTCP")
setwd("./rlbtcp")
setwd("..")
install("rlbtcp")
library(rlbtcp)
rsem.read.iso
remove.packages("rlbtcp")
setwd("/Users/smiharry/Desktop/Saba_Lab/RLBTCP")
setwd("./rlbtcp")
document()
setwd("..")
install("rlbtcp")
library(rlbtcp)
?rsem.read.iso
rsem.read.iso
remove.packages("rlbtcp")
setwd("/Users/smiharry/Desktop/Saba_Lab/RLBTCP")
setwd("./rlbtcp")
document()
setwd("..")
install("rlbtcp")
library(rlbtcp)
?rsem.read.iso
?rsem.read.gene
?rm.tech.rep
?pres.abs.table
?sep.panel
?sep.panel.sample
?content.for.plot
?track.position.table
?track.position.bytransc
remove.packages("rlbtcp")
